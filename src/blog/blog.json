[{"fileName":"BroadcastChannel跨标签页通信.md","content":"<h1>前端跨页面通信：Broadcast Channel</h1>\n<blockquote>\n<p>它允许同源的不同浏览器窗口，Tab 页，frame 或者 iframe 下的不同文档之间相互通信。通过触发一个 message 事件，消息可以广播到所有监听了该频道的 BroadcastChannel 对象。</p>\n</blockquote>\n<p>BroadcastChannel，就字面意思来言，叫做“广播频道”，官方文档说，该API是用于同源不同页面之间完成通信的功能</p>\n<p><strong>一、与postMessage区别：</strong></p>\n<p>它与postMessage的区别就是：BroadcastChannel只能用于同源的页面之间进行通信，而postMessage却可以用于任何的页面之间的通信，换句话说，BroadcastChannel可以认为是postMessage的一个实例，它承担了postMessage的一个方面的功能。</p>\n<p><strong>二、 BroadcastChannel的使用方法：</strong></p>\n<p>首先我们先要初始化一下BroadcastChannel：</p>\n<blockquote>\n<p>const setChannel = new BroadcastChannel(&#39;demos&#39;);</p>\n</blockquote>\n<p>传入一个string,用这个来标识BroadcastChannel</p>\n<p>发送消息： 发送消息的话使用它的postMessage方法，但是记住在使用的页面也要初始化BroadcastChannel：</p>\n<blockquote>\n<p>setChannel.postMessage(&#39;要发送消息啦啦啦啦啦啦啦&#39;);</p>\n</blockquote>\n<p>监听消息： 要想监听方法的话使用onmessage方法来获取：</p>\n<blockquote>\n<p>setChannel.onmessage =function(e) {</p>\n<p>    console.log(&#39;接收到消息:&#39;, e.data);</p>\n<p>    //一大波你要要的操作</p>\n<p>};</p>\n</blockquote>\n<p>关闭连接：</p>\n<blockquote>\n<p>setChannel..close();</p>\n</blockquote>\n"},{"fileName":"ES 2021（ES12）新增新特性.md","content":"<ul>\n<li>逻辑运算符和赋值表达式（&amp;&amp;=，||=，??=）</li>\n<li>String.prototype.replaceAll()</li>\n<li>数字分隔符</li>\n<li>Promise.any</li>\n</ul>\n<h4>&amp;&amp;=</h4>\n<p>逻辑与赋值运算符 x &amp;&amp;= y 等价于 x &amp;&amp; (x=y)：意思是当 x 为真时，x = y。</p>\n<pre><code>let a = 1;\nlet b = 0;\n\na &amp;&amp;= 2;\nconsole.log(a); // 2\n\nb &amp;&amp;= 2;\nconsole.log(b);  // 0\n</code></pre>\n<h4>||=</h4>\n<p>逻辑或赋值运算符 x ||= y 等价于 x || (x = y)：意思是仅在 x 为 false 的时候，x = y。</p>\n<pre><code>const a = { duration: 50, title: &#39;&#39; };\n\na.duration ||= 10;\nconsole.log(a.duration);  // 50\n\na.title ||= &#39;title is empty.&#39;;\nconsole.log(a.title);  // &quot;title is empty&quot;\n</code></pre>\n<h4>??=</h4>\n<p>逻辑空赋值运算符 x ??= y 等价于 x ?? (x = y)：意思是仅在 x 为 null 或 undefined 的时候，x = y。</p>\n<pre><code>const a = { duration: 50 };\n\na.duration ??= 10;\nconsole.log(a.duration);  // 50\n\na.speed ??= 25;\nconsole.log(a.speed);  // 25\n</code></pre>\n<h4>String.prototype.replaceAll()</h4>\n<p>返回一个新字符串，字符串中所有满足 pattern 的部分都会被 replacement 替换掉。原字符串保持不变。</p>\n<h3>数字分隔符</h3>\n<p>ES12 允许 JavaScript 的数值使用下划线（_）作为分隔符，但是没有规定间隔的位数：</p>\n<pre><code>123_00\n</code></pre>\n<h4>Promise.any</h4>\n<p>方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。\n只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</p>\n<pre><code>const promise1 = () =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(&quot;promise1&quot;);\n      //  reject(&quot;error promise1 &quot;);\n    }, 3000);\n  });\n};\nconst promise2 = () =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(&quot;promise2&quot;);\n      // reject(&quot;error promise2 &quot;);\n    }, 1000);\n  });\n};\nconst promise3 = () =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(&quot;promise3&quot;);\n      // reject(&quot;error promise3 &quot;);\n    }, 2000);\n  });\n};\nPromise.any([promise1(), promise2(), promise3()])\n  .then((first) =&gt; {\n    // 只要有一个请求成功 就会返回第一个请求成功的\n    console.log(first); // 会返回promise2\n  })\n  .catch((error) =&gt; {\n    // 所有三个全部请求失败 才会来到这里\n    console.log(&quot;error&quot;, error);\n  });\n</code></pre>\n<pre><code>Promise.any([promise1(), promise2(), promise3()])\n  .then((first) =&gt; {\n    // 只要有一个请求成功 就会返回第一个请求成功的\n    console.log(first); // 会返回promise2\n  })\n  .catch((error) =&gt; {\n    // 所有三个全部请求失败 才会来到这里\n    console.log(&quot;error&quot;, error);\n  });\n</code></pre>\n"},{"fileName":"GET请求传数组.md","content":"<p>GET请求直接传数组给后端，格式会错误，\n转换传参格式，JS中将数组变成字符串：数组[arr] + ’ ’</p>\n<pre><code>axios.get(&#39;/gateway/xxx&#39;, {\n    params: {\n      name: &#39;lvxiaobu&#39;,\n      list: [1,2,3] + &#39;&#39;,\n    }\n})\n</code></pre>\n"},{"fileName":"JavaScript打包下载最佳实践：StreamSaver.js+zip-stream.js流式下载.md","content":"<p>前言</p>\n<p>介绍了使用 StreamSaver.js 和 zip-stream.js 实现 JavaScript 打包下载的最佳实践。通常在用户需要下载多个文件时，可以采用浏览器打包下载的方式，减少服务器流量和性能消耗。详细介绍了使用 StreamSaver.js 和 zip-stream.js 的步骤和方法，并提供了同步和异步两种打包下载的函数。最后，给出了调用函数进行下载的示例代码。最后指出，异步下载可能会导致浏览器内存溢出，因此推荐使用同步下载方式。</p>\n<p>最近刚好在内网遇到一个类似下载的场景。今日前端早读课文章由@Xianhuii授权分享。</p>\n<p>正文从这开始~~</p>\n<h4>应用场景</h4>\n<p>在实际项目中，通常存在用户手动选择下载多个文件的情况。</p>\n<p>常规的做法（服务器打包下载）是，后端从文件服务器（比如华为云OBS）读取文件，将这些文件进行打包，然后将压缩包字节流返回给前端，由前端下载到用户本地文件系统。</p>\n<p>服务器打包下载存在以下问题：</p>\n<ul>\n<li><p>文件传输链路：文件服务器→应用服务器，应用服务器→浏览器，消耗传输时间和服务器的流量。</p>\n</li>\n<li><p>服务器打包，消耗性能。</p>\n</li>\n<li><p>大文件下载和打包，通常会连接超时。</p>\n</li>\n</ul>\n<p>另一种做法（浏览器打包下载）是，后端生成多个文件服务临时访问地址，前端直接从文件服务器下载文件，将这些文件进行打包，然后下载到用户本地文件系统。</p>\n<p>浏览器打包下载有以下优点：</p>\n<ul>\n<li><p>文件传输链路：文件服务器 → 浏览器，明显缩短传输时间，减少服务器的流量和性能消耗。</p>\n</li>\n<li><p>将大请求分解成一个个小请求，避免了请求超时的问题。</p>\n</li>\n<li><p>文件服务器通常不会设置请求超时时间。</p>\n</li>\n</ul>\n<p>但是，浏览器打包下载也存在以下缺点：</p>\n<ul>\n<li><p>前端通过AJAX请求文件服务器，需要文件服务器支持跨域。</p>\n</li>\n<li><p>前端下载文件消耗浏览器内存，可能会造成OOM（Out of Memory）。</p>\n</li>\n</ul>\n<p>对于第一个缺点，文件服务器通常可以在管理页面进行跨域配置，因此一般都可以解决。</p>\n<p>对于第二个缺点，以往思路是先将文件下载到浏览器内存，然后再对每个文件进行压缩操作。这种方法对下载文件大小有限制。</p>\n<p>StreamSaver.js可以对数据进行流式处理，结合zip-stream.js可以做到实时将文件流进行压缩，直接保存到用户本地文件系统。因此，除了下载速度&gt;压缩速度那一部分缓存，可以大大减小浏览器内存的占用。</p>\n<h4>使用</h4>\n<p>StreamSaver.js + zip-stream.js流式下载&amp;压缩文件的使用方式很简单。</p>\n<h5>引入js文件</h5>\n<p>由于某些浏览器不支持流式处理，可以按需要引入：</p>\n<pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/web-streams-polyfill@3.2.1/dist/ponyfill.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/eligrey/Blob.js/Blob.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>然后引入StreamSaver.js和zip-stream.js（可以根据以下链接直接下载到本地）：</p>\n<pre><code>&lt;script src=&quot;https://jimmywarting.github.io/StreamSaver.js/examples/zip-stream.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/streamsaver@2.0.3/StreamSaver.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h5>定义打包下载函数</h5>\n<p>定义同步打包下载函数<code>zipFiles()</code>：</p>\n<pre><code>/**   * 同步下载打包【推荐】  * @param zipName 压缩包文件名   * @param files 文件列表，格式：[{&quot;name&quot;:&quot;文件名&quot;, &quot;url&quot;:&quot;文件下载地址&quot;},……]   */ function zipFiles(zipName, files) {      console.log(&quot;同步下载打包开始时间：&quot; + new Date());      // 创建压缩文件输出流      const zipFileOutputStream = streamSaver.createWriteStream(zipName);      // 创建下载文件流      const fileIterator = files.values();      const readableZipStream = new ZIP({          async pull(ctrl) {              const fileInfo = fileIterator.next();              if (fileInfo.done) {//迭代终止                  ctrl.close();              } else {                  const {name, url} = fileInfo.value;                  return fetch(url).then(res =&gt; {                      ctrl.enqueue({                          name,                          stream: () =&gt; res.body                      });                  })              }        }    });      if (window.WritableStream &amp;&amp; readableZipStream.pipeTo) {          // 开始下载          readableZipStream              .pipeTo(zipFileOutputStream)              .then(() =&gt; console.log(&quot;同步下载打包结束时间：&quot; + new Date()));      }  }\n</code></pre>\n<p>需要注意的是，浏览器只会使用一个Service Worker线程进行压缩，整体打包下载速度取决于压缩速度。因此对于多个文件，异步下载的加速效果没有那么明显，反而可能会使浏览器内存占用过多，造成浏览器内存溢出。</p>\n<p>以下是异步下载打包的方法，但不推荐使用：</p>\n<pre><code>/**   * 异步下载打包【不推荐，超大文件时可能会造成浏览器内存溢出】    * @param zipName  压缩包文件名 * @param files 文件列表，格式：[{&quot;name&quot;:&quot;name&quot;, &quot;url&quot;:&quot;url&quot;},……]  */  function asyncZipFiles(zipName, files) {      console.log(&quot;异步下载打包开始时间：&quot; + new Date());      // 创建压缩文件      const zipFileOutputStream = streamSaver.createWriteStream(zipName);      // 创建下载文件流      const readableZipStream = new ZIP({          async pull(ctrl) {              // promise任务              const promise = el =&gt; {                  let name = el.name                  return new Promise(resolve =&gt; {                      fetch(el.url).then(resp =&gt; {                          if (resp.status === 200) {                              return () =&gt; resp.body;                          }                          return null;                      }).then(stream =&gt; {                          resolve({name: name, stream: stream});                      })                  })            }            // promise任务队列              let arr = [];              files.forEach(el =&gt; {                  arr.push(promise(el));              })              // 异步下载              await Promise.all(arr).then(res =&gt; {                  let nameMapList = []                  res.forEach(item =&gt; {                      const name = item.name;                      const stream = item.stream;                      // 加入打包队列                      if (stream) {                          let file = {name, stream};                          ctrl.enqueue(file);                      }                  })            })            ctrl.close();          }      });      if (window.WritableStream &amp;&amp; readableZipStream.pipeTo) {          // 开始下载          readableZipStream              .pipeTo(zipFileOutputStream)              .then(() =&gt; console.log(&quot;异步下载打包结束时间：&quot; + new Date()))      }}\n</code></pre>\n<h5>调用函数进行下载</h5>\n<p>当用户选择好要下载的文件，点击下载按钮时，可以构造打包下载的参数进行下载：</p>\n<pre><code>let zipName = &#39;压缩包.zip&#39;;  let files = [      {   &quot;name&quot;: &#39;2022102801.mp4&#39;,          &quot;url&quot;: &#39;http://localhost:8080/file3&#39;      },     {          &quot;name&quot;: &#39;文件夹1/2022102802.mp4&#39;,          &quot;url&quot;: &#39;http://localhost:8080/file4&#39;      },      {          &quot;name&quot;: &#39;文件夹1/2022102803.mp4&#39;,          &quot;url&quot;: &#39;http://localhost:8080/file5&#39;      },      {          &quot;name&quot;: &#39;文件夹3/文件夹3/文件夹3/2022102804.mp4&#39;,          &quot;url&quot;: &#39;http://localhost:8080/file1?fileUrl=http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4&#39;      }  ];  zipFiles(zipName, files);\n</code></pre>\n<p>压缩包内文件夹以<code>/</code>分隔，可以自定义需要的压缩包层级关系。</p>\n<p>一个能让前端优雅下载大文件的工具：StreamSaver.js：<a href=\"https://github.com/jimmywarting/StreamSaver.js\">https://github.com/jimmywarting/StreamSaver.js</a></p>\n<p>关于本文<br>作者：@Xianhuii<br>原文：<a href=\"https://www.cnblogs.com/Xianhuii/p/16843884.html\">https://www.cnblogs.com/Xianhuii/p/16843884.html</a></p>\n<p>![图片](<a href=\"https://mp.weixin.qq.com/s/data:image/svg+xml,%3C%3Fxml\">https://mp.weixin.qq.com/s/data:image/svg+xml,%3C%3Fxml</a> version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>这期前端早读课<br>对你有帮助，帮” 赞 “一下，<br>期待下一期，帮” 在看” 一下 。</p>\n"},{"fileName":"MIME TYPE.md","content":"<p>在网页下载excel/doc时，一定要正确设置response头中的content-type；即设置正确的mime type,具体设置如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Ext</strong></td>\n<td><strong>MIME Type</strong></td>\n</tr>\n<tr>\n<td>.doc</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>.dot</td>\n<td>application/msword</td>\n</tr>\n<tr>\n<td>.docx</td>\n<td>application/vnd.openxmlformats-officedocument.wordprocessingml.document</td>\n</tr>\n<tr>\n<td>.dotx</td>\n<td>application/vnd.openxmlformats-officedocument.wordprocessingml.template</td>\n</tr>\n<tr>\n<td>.docm</td>\n<td>application/vnd.ms-word.document.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.dotm</td>\n<td>application/vnd.ms-word.template.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.xls</td>\n<td>application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td>.xlt</td>\n<td>application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td>.xla</td>\n<td>application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td>.xlsx</td>\n<td>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</td>\n</tr>\n<tr>\n<td>.xltx</td>\n<td>application/vnd.openxmlformats-officedocument.spreadsheetml.template</td>\n</tr>\n<tr>\n<td>.xlsm</td>\n<td>application/vnd.ms-excel.sheet.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.xltm</td>\n<td>application/vnd.ms-excel.template.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.xlam</td>\n<td>application/vnd.ms-excel.addin.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.xlsb</td>\n<td>application/vnd.ms-excel.sheet.binary.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.ppt</td>\n<td>application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td>.pot</td>\n<td>application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td>.pps</td>\n<td>application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td>.ppa</td>\n<td>application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td>.pptx</td>\n<td>application/vnd.openxmlformats-officedocument.presentationml.presentation</td>\n</tr>\n<tr>\n<td>.potx</td>\n<td>application/vnd.openxmlformats-officedocument.presentationml.template</td>\n</tr>\n<tr>\n<td>.ppsx</td>\n<td>application/vnd.openxmlformats-officedocument.presentationml.slideshow</td>\n</tr>\n<tr>\n<td>.ppam</td>\n<td>application/vnd.ms-powerpoint.addin.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.pptm</td>\n<td>application/vnd.ms-powerpoint.presentation.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.potm</td>\n<td>application/vnd.ms-powerpoint.presentation.macroEnabled.12</td>\n</tr>\n<tr>\n<td>.ppsm</td>\n<td>application/vnd.ms-powerpoint.slideshow.macroEnabled.12</td>\n</tr>\n</tbody></table>\n<p>一般来说导出excel时</p>\n<p>如果是excel97~2003,那么content-type应该设置为：application/vnd.ms-excel，</p>\n<p>如果是excel2007以后的，那么content-type应该设置为：application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</p>\n"},{"fileName":"Mac打开应用提示已损坏的解决办法.md","content":"<p>Mac打开应用提示已损坏的解决办法：</p>\n<p>　　一、10.15及以上新系统出现应用提示损坏打不开的解决方法：</p>\n<p>　　打开终端(屏幕下方Dock栏中的的小火箭图标“启动台”——“其他”——打开“终端”)，在终端中粘贴下面命令：</p>\n<p>　　sudo xattr -r -d com.apple.quarantine </p>\n<p>　　(注意quarantine后面有个空格，复制上面命令的时候注意一定不要漏了)</p>\n<p>　　打开屏幕下方的“访达(笑脸图标)”—选择左侧边栏的“应用程序”，再找到你需要处理的软件拖拽到命令后面，按回车后输入密码执行，举个例子，比如需要打开sketch应用的命令是：</p>\n<p>　　sudo xattr -r -d com.apple.quarantine /Applications/sketch.app/</p>\n<p><img src=\"https://img2023.cnblogs.com/blog/2483371/202306/2483371-20230619103446364-2030216450.png\" alt=\"\"></p>\n"},{"fileName":"Node.js 使用 officecrypto-tool 读取加密的 Excel 和 Word 文档, 支持 xlsx 和 docx 文件的加密.md","content":"<p>Node.js 使用 <code>officecrypto-tool</code> 读取加密的 Excel (xls, xlsx) 和 Word( docx)文档, 还支持 xlsx 和 docx 文件的加密（具体使用看文档）。暂时不支持 doc 文件的解密</p>\n<p>传送门：<a href=\"https://www.npmjs.com/package/officecrypto-tool\">officecrypto-tool</a></p>\n<p>读取加密的 Excel 示例</p>\n<pre><code>一：xlsx-populate \n// 只支持 xlsx ，xlsx-populate  自带了解密功能，\n// 不过只支持 ecma376 agile 模式，也就是 Office 生成的加密的 docx ，\n// WPS 的就不行，WPS 用的是 ecma376 standard 模式\nconst XlsxPopulate = require(&#39;xlsx-populate&#39;);\n(async ()=&gt;{\n    const input = await fs.readFile(`pass_test.xlsx`);\n    const output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    const workbook = await XlsxPopulate.fromDataAsync(output);\n\n    // 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    }\n    const workbook = await XlsxPopulate.fromDataAsync(output);\n })()\n\n\n二：@zurmokeeper/exceljs https://www.npmjs.com/package/@zurmokeeper/exceljs\n\n// 只支持 xlsx @zurmokeeper/exceljs 直接内置了解密功能，完全兼容 exceljs v4.3.0\nconst Excel = require(&#39;@zurmokeeper/exceljs&#39;);\n(async ()=&gt;{\n    // 从文件读取, 解密使用密码加密的 excel 文件\n    const workbook = new Excel.Workbook();\n    await workbook.xlsx.readFile(filename, {password:&#39;123456&#39;});\n\n    // 从流读取, 解密使用密码加密的 excel 文件\n    const workbook = new Excel.Workbook();\n    await workbook.xlsx.read(stream, {password:&#39;123456&#39;});\n\n    // 从 buffer 加载, 解密使用密码加密的 excel 文件\n    const workbook = new Excel.Workbook();\n    await workbook.xlsx.load(data, {password:&#39;123456&#39;});\n})()\n\n三：xlsx\n// xlsx 支持 xls 和 xlsx\nconst XLSX = require(&#39;xlsx&#39;);\n(async ()=&gt;{\n    const input = await fs.readFile(`pass_test.xlsx`);\n    // const input = await fs.readFile(`pass_test.xls`); // 或者 xls\n    const output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    const workbook = XLSX.read(output);\n\n    // 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    }\n    const workbook = XLSX.read(output);\n})()\n\n四：node-xlsx\n// 其实 node-xlsx 只是对 xlsx 进行了封装，里面还是调用 xlsx 去解析的\nconst nodeXlsx = require(&#39;node-xlsx&#39;);\n(async ()=&gt;{\n    const input = await fs.readFile(`pass_test.xlsx`);\n    // const input = await fs.readFile(`pass_test.xls`); // 或者 xls\n    const output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    const workbook = nodeXlsx.parse(output);\n\n    // 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    }\n    const workbook = nodeXlsx.parse(output);\n})()\n</code></pre>\n<p>读取加密的 Word 示例</p>\n<p>使用：<a href=\"https://www.npmjs.com/package/mammoth\">mammoth</a> <a href=\"https://www.npmjs.com/package/officecrypto-tool\">officecrypto-tool</a></p>\n<pre><code>const officeCrypto = require(&#39;officecrypto-tool&#39;);\nconst fs = require(&#39;fs&#39;).promises;\nconst mammoth = require(&#39;mammoth&#39;);\n(async ()=&gt;{\n    const input = await fs.readFile(`pass_test.xlsx`);\n    const output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    await mammoth.convertToHtml({buffer: output});\n\n    // 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#39;123456&#39;});\n    }\n    await mammoth.convertToHtml({buffer: output});\n})()\n</code></pre>\n<p>使用其他的 word 读取库也是一样的道理，先使用 officecrypto-tool 解密以后再用对应的库去处理</p>\n"},{"fileName":"Vue 中实现全局引入 scss 变量.md","content":"<h2>导读</h2>\n<p>最终实现的效果是：在 vue 文件的 style 标签中以及其它 scss 文件中都可以直接使用全局配置的 scss 变量，不需要再导入对应的 scss 文件。</p>\n<h2>目录结构</h2>\n<pre><code class=\"language-bash\">src\n│  App.vue\n│  main.js\n│\n├─assets\n│  └─styles\n│          index.scss\n│          variables.scss\n</code></pre>\n<h2>配置</h2>\n<pre><code class=\"language-js\">// vue.config.js\nmodule.exports = {\n// ... other config\n  css: {\n    loaderOptions: {\n      scss: {\n        additionalData: `@import &quot;~@/assets/styles/variables.scss&quot;;`,\n      },\n    },\n  },\n  // ... other config\n}\n</code></pre>\n<h2>使用</h2>\n<pre><code class=\"language-css\">// variables.scss 文件\n\n//  主题色\n$themeColor: #0dbc5c; // 一级主题色\n$subThemeColor: #51ec97; // 二级主题色\n\n// 字体\n$fontColor: #d15656;\n\n// 长度\n$w200: 200px;\n</code></pre>\n<pre><code class=\"language-js\">&lt;template&gt;\n  &lt;!-- App.vue --&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;h2&gt;配置全局 scss 变量&lt;/h2&gt;\n    &lt;div class=&quot;box1&quot;&gt;哈哈哈&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;App&#39;,\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n.box1 {\n  // 👇 直接使用 scss 变量\n  width: $w200;\n  height: $w200;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: $themeColor;\n  color: $fontColor;\n}\n&lt;/style&gt;\n```≈\n</code></pre>\n"},{"fileName":"commonjs规范 require 函数解析.md","content":"<pre><code>function require(modulePath) {\n    //1.根据传入的模块路径 得到模块完整的绝对路径\n    const moduleId = getModuleId(modulePath)\n    //2.判断缓存\n    if (cache[moduleId]) {\n        return cache[moduleId]\n    }\n    //3.真正运行代码模块的辅助函数\n    function _require(exports, require, module, __filename, __dirname) {\n        //目标模块的代码在这里执行\n    }\n    //4.准备并运行辅助函数\n    const module = {\n        exports:{}\n    }\n    const exports = module.exports\n    //得到模块文件的绝对路径\n    const __filename = moduleId\n    const __dirname = getDirname(__filename)\n    _require.call(exports, exports, require, module, __filename, __dirname)\n    //5.缓存module.exports\n    cache[moduleId] = module.exports\n    //6.返回module.exports\n    return module.exports\n}\n</code></pre>\n<p><strong>getModuleId、getDirname实现细节不必过多关注</strong></p>\n<p>###模块内代码会放在_require函数内执行，所以可以在代码内直接打印arguments</p>\n<pre><code class=\"language-test.js\">console.log(argument)\n</code></pre>\n<p>直接执行<code>node test.js</code>  会有以下输出</p>\n<pre><code>arguments [Arguments] {\n  &#39;0&#39;: {},\n  &#39;1&#39;: [Function: require] {\n    resolve: [Function: resolve] { paths: [Function: paths] },\n    main: Module {\n      id: &#39;.&#39;,\n      path: &#39;/Users/whh/Documents/webpack5&#39;,\n      exports: {},\n      filename: &#39;/Users/whh/Documents/webpack5/test.js&#39;,\n      loaded: false,\n      children: [],\n      paths: [Array]\n    },\n    extensions: [Object: null prototype] {\n      &#39;.js&#39;: [Function (anonymous)],\n      &#39;.json&#39;: [Function (anonymous)],\n      &#39;.node&#39;: [Function (anonymous)]\n    },\n    cache: [Object: null prototype] {\n      &#39;/Users/whh/Documents/webpack5/test.js&#39;: [Module]\n    }\n  },\n  &#39;2&#39;: Module {\n    id: &#39;.&#39;,\n    path: &#39;/Users/whh/Documents/webpack5&#39;,\n    exports: {},\n    filename: &#39;/Users/whh/Documents/webpack5/test.js&#39;,\n    loaded: false,\n    children: [],\n    paths: [\n      &#39;/Users/whh/Documents/webpack5/node_modules&#39;,\n      &#39;/Users/whh/Documents/node_modules&#39;,\n      &#39;/Users/whh/node_modules&#39;,\n      &#39;/Users/node_modules&#39;,\n      &#39;/node_modules&#39;\n    ]\n  },\n  &#39;3&#39;: &#39;/Users/whh/Documents/webpack5/test.js&#39;,\n  &#39;4&#39;: &#39;/Users/whh/Documents/webpack5&#39;\n}\n</code></pre>\n<p>###_require函数接受exports, require, module, __filename, __dirname参数</p>\n<p>所以在commonJS规范下 模块内可直接使用<code>require</code>,<code> module.exports</code>,<code>exports</code>,<code>filename</code>,<code>dirname</code></p>\n<p>###_require辅助函数通过<code>.call</code>执行绑定<code>this</code>指向<code>exports</code></p>\n<p>所以在模块加载执行前 <code>this</code>,<code>exports</code>,<code>module.exports</code>是相等的</p>\n<pre><code class=\"language-test.js\">console.log(this === exports,this === module.exports)\n</code></pre>\n<p>直接执行<code>node test.js</code>上面的代码会打印 true true</p>\n<p>###最终返回的是<code>module.exports</code></p>\n<p>所以有一下代码test.js</p>\n<pre><code>this.a = 1\nexports.b = 2\nexport = {\n    c:3\n}\nmodule.exports = {\n    d:4\n}\nexports.e = 5\nthis.f = 6\n\n\n/**\n解析 初始 this = exports = module.exports\n执行后：\n\nthis,\n{a:1,b:2,f:6}\n\nexport,\n{c:3,e:5}\n\nmodule.exports,\n{d:4}\n*/\n</code></pre>\n<p>最终在别的模块内引入</p>\n<pre><code>const test = require(./test.js)\nconsole.log(test)\n</code></pre>\n<p>输出</p>\n<pre><code>{d:4}\n</code></pre>\n"},{"fileName":"computed计算属性传参.md","content":"<h3>computed计算属性传参</h3>\n<p><code>使用闭包函数进行穿参</code></p>\n<pre><code>//根据渲染项的不同渲染不同的列数\n&lt;div v-for=&quot;(item, index) in formConfig[i.value]&quot; :key=&quot;item.key&quot;&gt;\n    &lt;el-col  :span=&quot;computeSpace(formConfig[i.value], item, index)&quot;&gt;\n    &lt;/el-col&gt;\n&lt;/div&gt;\n\ncomputed: {\n    computeSpace() {\n      return this.computeSpaceHandle\n    }\n},\n\n\nmethods: {\n    computeSpaceHandle(arr, item, index) {\n      if (index + 1 &lt; arr.length) {\n        // 判断如果当前项或者下一项是subform\n        if (arr[index + 1].type === &#39;subform&#39; || item.type === &#39;subform&#39;) {\n          return 24\n        } else {\n          return 12\n        }\n      } else {\n        if (item.type === &#39;subform&#39;) {\n          return 24\n        } else {\n          return 12\n        }\n      }\n    }\n}\n</code></pre>\n"},{"fileName":"css attr()函数.md","content":"<h1>css attr()函数</h1>\n<blockquote>\n<p> <code>attr()</code> 理论上能用于所有的 CSS 属性但目前支持的仅有伪元素的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/content\"><code>content</code></a> 属性，其他的属性和高级特性目前是实验性的</p>\n</blockquote>\n<p>CSS 表达式 <code>attr()</code> 用来获取选择到的元素的某一 HTML 属性值，并用于其样式。它也可以用于伪元素，属性值采用伪元素所依附的元素。</p>\n<h2>语法</h2>\n<pre><code class=\"language-css\">attr( attribute-name &lt;type-or-unit&gt;? [, &lt;fallback&gt; ]? )\n</code></pre>\n<ul>\n<li>attribute-name 是 CSS 所引用的 HTML 属性名称。</li>\n</ul>\n<h2>示例</h2>\n<pre><code class=\"language-css\">p:before {\n    content:attr(data-foo) &quot; &quot;;\n}\n</code></pre>\n<pre><code class=\"language-html\">&lt;p data-foo=&quot;hello&quot;&gt;world&lt;/p&gt;\n</code></pre>\n<h2>结果</h2>\n<p>hello world</p>\n"},{"fileName":"css变量实现换肤.md","content":"<h2>css变量</h2>\n<p>语法：<code>var( &lt;自定义属性名&gt; [, &lt;默认值 ]? )</code>\n如果我们使用的变量没有定义（注意，仅限于没有定义），则使用后面的值作为元素的属性值</p>\n<ul>\n<li>变量命名 不能包含$，[，^，(，%等字符，普通字符局限在只要是“数字[0-9]”“字母[a-zA-Z]”“下划线_”和“短横线-”这些组合，但是可以是中文，日文或者韩文，</li>\n<li>只能在声明块{}</li>\n<li>变量也是跟着CSS选择器走的，如果变量所在的选择器和使用变量的元素没有交集，是没有效果的。</li>\n<li>当存在多个同样名称的变量时候，变量的覆盖规则由CSS选择器的权重决定的，但并无!important这种用法，因为没有必要，!important设计初衷是干掉JS的style设置，但对于变量的定义则没有这样的需求。</li>\n</ul>\n<h2>使用方式</h2>\n<ol>\n<li>直接在标签上绑定style</li>\n</ol>\n<pre><code>// 实现进度条\n&lt;div class=&quot;bar&quot; style=&quot;--percent: 60;&quot;&gt;&lt;/div&gt;\n.bar::before {\n    display: block;\n    counter-reset: progress var(--percent);\n    content: counter(progress) &#39;%\\2002&#39;;\n    width: calc(1% * var(--percent));\n    color: #fff;\n    background-color: #2486ff;\n    text-align: right;\n    white-space: nowrap;\n    overflow: hidden;\n}\n</code></pre>\n<ol start=\"2\">\n<li>JS中设置CSS变量</li>\n</ol>\n<pre><code>&lt;div id=&quot;box&quot;&gt;\n    &lt;img src=&quot;mm.jpg&quot; style=&quot;border: 10px solid var(--color);&quot;&gt;\n&lt;/div&gt;\n\nbox.style.setProperty(&#39;--color&#39;, &#39;#cd0000&#39;);\n</code></pre>\n<ol start=\"3\">\n<li>JS中获取CSS变量</li>\n</ol>\n<pre><code>// 获取 --color CSS 变量值\nvar cssVarColor = getComputedStyle(box).getPropertyValue(&#39;--color&#39;); \n\n// 输出cssVarColor\n// 输出变量值是：#cd0000 \nconsole.log(cssVarColor);\n</code></pre>\n<h2>实现换肤</h2>\n<p>首先定义变量skinVariablescss</p>\n<pre><code>body[data-theme=&#39;dark&#39;] {\n    --bgColor: #353535;\n\n    --navFontColor: #adb7be;\n\n    --mainFontColor: #fff;\n\n    --mainColor: #3db96d;\n\n    --mainHoverColor: #2aa461;\n\n    --btnBgColor1: #3db96d;\n\n    --btnBgColor2: #1b904e;\n\n    --selectBgColor: #212121;\n\n    --selectOpColor: #afafaf;\n\n    --selectActiveColor: #fff\n}\n\nbody[data-theme=&#39;light&#39;] {\n\n    --bgColor: #f4f5f5;\n\n    --navFontColor: #515767;\n\n    --mainFontColor: #212121;\n\n    --mainColor: #1e80ff;\n\n    --mainHoverColor: #508cf7;\n\n    --btnBgColor1: #1d7dfa;\n\n    --btnBgColor2: #1e80ff;\n\n    --selectBgColor: #fff;\n\n    --selectOpColor: #afafaf;\n\n    --selectActiveColor: #fff\n}\n</code></pre>\n<p>vue项目在app.vue根组件中为body设置自定义属性</p>\n<pre><code>      const body = document.body\n      body.setAttribute(&#39;data-theme&#39;,&#39;dark&#39;)\n</code></pre>\n<p>body下所有元素即可使用变量</p>\n"},{"fileName":"css改变元素显示顺序.md","content":"<h3>通过改变order值来改变div的前后顺序，值越低越靠前（沿着主轴方向算，越接近起点），反之亦然，可以设置负值</h3>\n<p><code>父元素开启dispaly:flex  子元素order在没有设置的情况下，其默认值为零</code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        .box{\n            width: 500px;\n            height: 500px;\n            background-color: steelblue;\n            border: 1px solid black;\n            box-sizing: border-box;\n            margin: auto;\n            display: flex;\n            flex-direction: column;\n        }\n        .box div{\n            width: 100px;\n            height: 100px;\n            border: 1px dashed brown;\n            box-sizing: border-box;\n        }\n        .div1{\n            order: 4;\n        }\n        .div2{\n            order: 3;\n        }\n        .div3{\n            order: 2;\n        }\n        .div4{\n            order: 1;\n            /* order在没有设置的情况下，其默认值为零\n            通过改变order值来改变div的前后顺序，值越低越靠前（沿着主轴方向算，越接近起点），反之亦然，可以设置负值\n            */\n        }\n        .div5{\n            /* order:-1; */\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;div1&quot;&gt;111&lt;/div&gt;\n        &lt;div class=&quot;div2&quot;&gt;222&lt;/div&gt;\n        &lt;div class=&quot;div3&quot;&gt;333&lt;/div&gt;\n        &lt;div class=&quot;div4&quot;&gt;444&lt;/div&gt;\n        &lt;div class=&quot;div5&quot;&gt;555&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"fileName":"css滚动条修改.md","content":"<pre><code>.tablecontainer {\n  //滚动条的滑块\n  &amp;::-webkit-scrollbar {\n    /*滚动条整体样式*/\n    width: 6px; /*高宽分别对应横竖滚动条的尺寸*/\n    height: 6px;\n    background-color: transparent;\n  }\n\n  &amp;::-webkit-scrollbar-thumb {\n    /*滚动条里面小方块*/\n    background-color: #ededed;\n    border-radius: 4px;\n  }\n\n  &amp;:hover::-webkit-scrollbar-thumb {\n    background: hsla(0, 0%, 53%, 0.4);\n  }\n\n  &amp;:hover::-webkit-scrollbar-track {\n    /*滚动条里面轨道*/\n    background: hsla(0, 0%, 53%, 0.1);\n  }\n}\n</code></pre>\n<p>隐藏滚动条</p>\n<pre><code>chrome 和Safari\n\n.element::-webkit-scrollbar { width: 0 !important }\nIE 10+\n\n.element { -ms-overflow-style: none; }\nFirefox\n\n.element { overflow: -moz-scrollbars-none; }\n</code></pre>\n"},{"fileName":"div四角边框.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220401142944477-1913514044.png\" alt=\"\"></p>\n<pre><code>.border {\n    margin: 300px auto;\n    width: 200px;\n    height: 100px;\n    background: linear-gradient(blue, blue) left top,\n        linear-gradient(blue, blue) left top,\n        linear-gradient(blue, blue) right top,\n        linear-gradient(blue, blue) right top,\n        linear-gradient(blue, blue) left bottom,\n        linear-gradient(blue, blue) left bottom,\n        linear-gradient(blue, blue) right bottom,\n        linear-gradient(blue, blue) right bottom;\n    background-repeat: no-repeat;\n    background-size: 1px 24px, 24px 1px;\n}\n</code></pre>\n<p>这里主要是利用了一个background可以定义多个linear-gradient，且可以定义位置的原理实现。</p>\n<p>此时的linear-gradient的主要作用不再是线性渐变，所以多余的属性可以去掉，定义两个相同的颜色即可，然后接线条位置。</p>\n<p>这里总共有8条线，第一条线对应background-size为1px 24px；第二条线对应24px 1px。后续几条线重复，所以省略了。</p>\n<p>background-repeat: no-reapeat；表示每条线不需要重复。</p>\n<p>转自 <a href=\"https://blog.csdn.net/u013344993/article/details/80980555\">https://blog.csdn.net/u013344993/article/details/80980555</a></p>\n"},{"fileName":"drag & drop 拖拽与拖放.md","content":"<h1>相关重点</h1>\n<ol>\n<li>DataTransfer 对象：退拽对象用来传递的媒介，使用一般为Event.dataTransfer。</li>\n<li>draggable 属性：就是标签元素要设置draggable=true，否则不会有效果，例如：</li>\n</ol>\n<pre><code>&lt;div title=&quot;拖拽我&quot; draggable=&quot;true&quot;&gt;列表1&lt;/div&gt;\n</code></pre>\n<ol start=\"3\">\n<li>ondragstart 事件：当拖拽元素开始被拖拽的时候触发的事件，此事件作用在被拖曳元素上</li>\n<li>ondragenter 事件：当拖曳元素进入目标元素的时候触发的事件，此事件作用在目标元素上</li>\n<li>ondragover 事件：拖拽元素在目标元素上移动的时候触发的事件，此事件作用在目标元素上</li>\n<li>ondrop 事件：被拖拽的元素在目标元素上同时鼠标放开触发的事件，此事件作用在目标元素上</li>\n<li>ondragend 事件：当拖拽完成后触发的事件，此事件作用在被拖曳元素上</li>\n<li>Event.preventDefault() 方法：阻止默认的些事件方法等执行。在ondragover中一定要执行preventDefault()，否则ondrop事件不会被触发。另外，如果是从其他应用软件或是文件中拖东西进来，尤其是图片的时候，默认的动作是显示这个图片或是相关信息，并不是真的执行drop。此时需要用用document的ondragover事件把它直接干掉。</li>\n<li>Event.effectAllowed 属性：就是拖拽的效果。</li>\n</ol>\n<h1>应用</h1>\n<p>在需要拖拽的元素上监听ondragstart 在目标容器设置ondragover和 ondrop 事件。</p>\n<p>可以利用dataTransfer来传递数据</p>\n<pre><code>// 拖拽开始\n    dragstart (e) {\n      console.log(&#39;拖拽开始&#39;, e)\n      e.dataTransfer.dropEffect = &#39;copy&#39;\n      e.dataTransfer.effectAllowed = &#39;uninitialized&#39;\n     // setDate第一个format参数值有text/plain、text/html、text/uri-list等\n      e.dataTransfer.setData(&#39;text/html&#39;, e.target.innerHTML)\n    },\n    // 拖拽结束\n    dragend (e) {\n      console.log(&#39;拖拽结束&#39;, e)\n    }\n</code></pre>\n<h1>参考（转载）</h1>\n<h3>文章目录</h3>\n<ul>\n<li><a href=\"#\">一、HTML 拖放基础</a></li>\n<li><ul>\n<li><a href=\"#\">1. 如何让一个元素可拖拽</a></li>\n<li><a href=\"#\">2. 定义拖拽数据</a></li>\n<li><a href=\"#\">3. 定义拖拽图像</a></li>\n<li><a href=\"#\">4. 定义拖拽效果</a></li>\n<li><a href=\"#\">5. 定义拖拽放置区</a></li>\n<li><a href=\"#\">6. 定义放置效果</a></li>\n<li><a href=\"#\">7. 拖拽结束</a></li>\n</ul>\n</li>\n<li><a href=\"#\">二、拖放事件</a></li>\n<li><a href=\"#\">三、拖放的重点api及方法</a></li>\n<li><ul>\n<li><a href=\"#\">1. DragEvent 接口</a></li>\n<li><a href=\"#\">2. DataTransfer 接口</a></li>\n<li><a href=\"#\">3. DataTransferItem 接口</a></li>\n<li><a href=\"#\">4. DataTransferItemList 接口</a></li>\n</ul>\n</li>\n</ul>\n<h1>一、HTML 拖放基础</h1>\n<p>HTML 拖放（Drag and Drop）接口使应用程序能够在浏览器中使用拖放功能。例如，用户可使用鼠标选择可拖拽（draggable）元素，将元素拖拽到可放置（droppable）元素，并释放鼠标按钮以放置这些元素。拖拽操作期间，会有一个可拖拽元素的半透明快照跟随着鼠标指针。</p>\n<h2>1. 如何让一个元素可拖拽</h2>\n<p>让一个元素可被拖拽需要添加 draggable 属性，值为true。</p>\n<pre><code class=\"language-ts\">&lt;p id=&quot;p1&quot; draggable=&quot;true&quot;&gt;This element is draggable.&lt;/p&gt;\n\nconst element = document.getElementById(&quot;p1&quot;);\nelement.addEventListener(&quot;dragstart&quot;, (event)=&gt;{\n    event.dataTransfer.setData(&quot;text/plain&quot;, &#39;我是一条拖拽数据&#39;);\n});\n</code></pre>\n<h2>2. 定义拖拽数据</h2>\n<p>每个 drag event 都有一个dataTransfer 属性，其中保存着拖拽事件的数据。这个属性（DataTransfer 对象）也有管理拖拽数据的方法。setData() 方法为拖拽数据添加一个项</p>\n<pre><code class=\"language-ts\">element.addEventListener(&quot;dragstart&quot;, (event)=&gt;{\n  // 添加拖拽数据\n  ev.dataTransfer.setData(&quot;text/plain&quot;, ev.target.innerText);\n  ev.dataTransfer.setData(&quot;text/html&quot;, ev.target.outerHTML);\n  ev.dataTransfer.setData(&quot;text/uri-list&quot;, ev.target.ownerDocument.location.href);\n});\n</code></pre>\n<h2>3. 定义拖拽图像</h2>\n<p>拖动过程中，从拖动目标(dragstart)事件触发的元素生成半透明图像，并在拖动过程中跟随鼠标指针一起移动。可通过DataTransfer.setDragImage自定义拖拽图像。</p>\n<pre><code class=\"language-ts\">element.addEventListener(&quot;dragstart&quot;, (event)=&gt;{\n     var img = new Image();\n      img.src = &#39;example.gif&#39;; // 记得替换成真实路径\n      event.dataTransfer.setDragImage(img, 10, 10);\n});\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/5194514fe9564db38a565be3b0440ee1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGf5bCP6Jmr5YS_,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h2>4. 定义拖拽效果</h2>\n<p>拖拽过程中浏览器显示的鼠标样式可以反映出拖放操作的类型。可以通过DataTransfer.dropEffect来控制用户拖拽过程中鼠标的样式。有 3 个效果可以定义：</p>\n<ul>\n<li>copy 表明被拖拽的数据将从它原本的位置拷贝到目标的位置。</li>\n<li>move 表明被拖拽的数据将被移动。</li>\n<li>link 表明在拖拽源位置和目标位置之间将会创建一些关系表格或是连接。</li>\n</ul>\n<p>在拖拽过程中，拖拽效果也许会被修改以用于表明在具体位置上具体效果是否被允许，如果允许，在该位置则被允许放置。</p>\n<pre><code class=\"language-ts\">element.addEventListener(&#39;dragstart&#39;, event =&gt; {\n    event.dataTransfer.dropEffect = &quot;copy&quot;;\n});\n</code></pre>\n<h2>5. 定义拖拽放置区</h2>\n<p>当拖拽一个项目到 HTML 元素中时，浏览器默认不会有任何响应。想要让一个元素变成可释放区域，该元素必须设置 ondragover和 ondrop 事件。</p>\n<pre><code class=\"language-ts\">// 定义拖拽放置区（每个处理程序调用preventDefault()来阻止对这个事件的其它处理过程（如触点事件或指针事件）。\n&lt;p id=&quot;target&quot; ondrop=&quot;dropHandler(event)&quot; ondragover=&quot;dragoverHandler(event)&quot;&gt;Drop Zone&lt;/p&gt;\n\ndragoverHandler(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = &#39;move&#39;;\n}\n\ndropHandler(ev) {\n    event.preventDefault();\n    // 获取目标的 id 并将移动的元素添加到目标的 DOM\n    var data = ev.dataTransfer.getData(&#39;text/plain&#39;);\n    event.target.appendChild(document.getElementById(data));\n}\n</code></pre>\n<h2>6. 定义放置效果</h2>\n<p>drop事件的处理程序是以程序里指定的方法处理拖拽数据。一般，程序调用 getData() 方法取出拖拽项目并按一定方式处理。程序意义根据 dropEffect 的值和(或)可变更关键字的状态而不同。</p>\n<pre><code class=\"language-ts\">&lt;div id=&quot;p1&quot; draggable=&quot;true&quot; ondragstart=&quot;dragstartHandler(event)&quot; style=&quot;background-color: skyblue;&quot;&gt;\n  This element is draggable.\n&lt;/div&gt;\n\n&lt;br /&gt;&lt;br /&gt;\n\n&lt;div id=&quot;target&quot; ondragover=&quot;dragoverHandler(event)&quot; ondrop=&quot;dropHandler(event)&quot; style=&quot;width:300px;height:200px;background-color:plum;&quot;&gt;\n  Drop Zone\n&lt;/div&gt;\n\ndragstartHandler(event) {\n    // 将被拖拽元素的id添加到拖拽数据项列表中\n    event.dataTransfer.setData(&#39;application/my-app&#39;, event.target.id);\n    event.dataTransfer.dropEffect = &#39;move&#39;;\n}\n\ndragoverHandler(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = &#39;move&#39;;\n}\n\ndropHandler(event) {\n    event.preventDefault();\n    // 获取被拖拽元素的id,并将该id对应的元素添加到目标放置区中\n    var data = event.dataTransfer.getData(&#39;application/my-app&#39;);\n    event.target.appendChild(document.getElementById(data));\n}\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/b88e851542c64170bdb69d6e33cc8276.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGf5bCP6Jmr5YS_,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/4b3a9c3c34f249dbb510d6920be2b779.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGf5bCP6Jmr5YS_,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<h2>7. 拖拽结束</h2>\n<p>拖拽操作结束时，在源元素（开始拖拽时的目标元素）上触发 dragend事件。不管拖拽是完成还是被取消这个事件都会被触发。dragend事件处理程序可以检查dropEffect 属性的值来确认拖拽成功与否。</p>\n<h1>二、拖放事件</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/8ca1abbfb376429c82864fc04f59c2fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rGf5bCP6Jmr5YS_,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"drag|\"></p>\n<h1>三、拖放的重点api及方法</h1>\n<h2>1. DragEvent 接口</h2>\n<blockquote>\n<p>DragEvent 是一个表示拖、放交互的一个DOM event 接口。用户通过将指针设备（例如鼠标）放置在触摸表面上并且然后将指针拖动到新位置（诸如另一个DOM元素）来发起拖动。 应用程序可以按应用程序特定的方式自由解释拖放交互。</p>\n</blockquote>\n<pre><code class=\"language-ts\">interface DragEvent extends MouseEvent {\n    // 返回事件的 DataTransfer 对象。 \n    readonly dataTransfer: DataTransfer | null;\n}\n\ndeclare var DragEvent: {\n    prototype: DragEvent;\n    new(type: string, eventInitDict?: DragEventInit): DragEvent;\n};\n\n/**\n * 创建一个拖放事件\n * type: 拖拽事件类型 -&gt; drag、dragend、dragenter、dragleave、dragover、dragstart、drop\n * DragEventInit: 即 {dataTransfer: DataTransfer}\n*/\nevent = new DragEvent(type, DragEventInit);\n\n// 具体应用: 创建一个drop事件（当元素或选中的文本在可释放目标上被释放时触发）\nconst dataTransfer = new DataTransfer();\ndataTransfer.dropEffect = &#39;move&#39;;\nlet dragEventInit: DragEventInit = { dataTransfer: dataTransfer }\nconst dropEvent = new DragEvent(&#39;drop&#39;, dragEventInit);\nelement.dispatchEvent(dropEvent); // 触发drop事件\n</code></pre>\n<h2>2. DataTransfer 接口</h2>\n<blockquote>\n<p>DataTransfer对象用于保存在拖放操作期间被拖动的数据。 它可以保存一个或多个数据项，每个数据项都是一种或多种数据类型。</p>\n</blockquote>\n<pre><code class=\"language-ts\">interface DataTransfer {\n    // 获取当前选定的拖放操作类型或者设置的为一个新的类型。值必须为  none, copy, link 或 move。 如果操作类型不是 effectAllowed 属性允许的操作类型，则操作将失败。\n    dropEffect: &quot;none&quot; | &quot;copy&quot; | &quot;link&quot; | &quot;move&quot;;\n    \n    // 提供所有可用的操作类型。\n    effectAllowed: &quot;none&quot; | &quot;copy&quot; | &quot;copyLink&quot; | &quot;copyMove&quot; | &quot;link&quot; | &quot;linkMove&quot; | &quot;move&quot; | &quot;all&quot; | &quot;uninitialized&quot;;\n    \n    // 包含数据传输中可用的所有本地文件的列表。如果拖动操作不涉及拖动文件，则此属性为空列表。\n    readonly files: FileList;\n    \n    // 提供一个包含所有拖动数据列表的 DataTransferItemList 对象。\n    readonly items: DataTransferItemList;\n\n    // 一个提供 dragstart (en-US) 事件中设置的格式的 strings 数组。\n    readonly types: ReadonlyArray&lt;string&gt;;\n    \n    // 删除指定格式的数据。参数可选。如果格式为空或未指定，则删除所有数据。如果指定类型的数据不存在，或者 data transfer 中不包含任何数据，则该方法不会产生任何效果。\n    clearData(format?: string): void;\n \n     // 返回指定格式的数据，如果该格式的数据不存在或 data transfer不包含数据，则返回空字符串。\n    getData(format: string): string;\n   \n   // 往拖放数据中添加一条指定格式的数据。format有：text/plain、text/html、text/uri-list等。\n    setData(format: string, data: string): void;\n\n    // 设置自定义的拖动图像。使用指定元素更新拖动feedback，替换任何先前指定的feedback。\n    setDragImage(image: Element, xOffset: number, yOffset: number): void;\n}\n\ndeclare var DataTransfer: {\n    prototype: DataTransfer;\n    new(): DataTransfer; // 生成并且返回一个新的 DataTransfer 对象\n};\n</code></pre>\n<h2>3. DataTransferItem 接口</h2>\n<blockquote>\n<p>一个拖拽数据项。在一个拖拽操作中，每个 drag event 都有一个dataTransfer 属性，它包含一个存有拖拽数据的 list ，其中每项都是一个DataTransferItem。</p>\n</blockquote>\n<pre><code class=\"language-ts\">interface DataTransferItem {\n    // 拖拽项的种类，string或file。\n    readonly kind: string;\n    \n    // 该拖拽数据项的类型\n    readonly type: string;\n    \n    // Returns a File object, if the drag data item kind is File.\n    getAsFile(): File | null;\n    \n    // 使用拖拽项的字符串作为参数执行指定回调函数。\n    getAsString(callback: FunctionStringCallback | null): void;\n    // 返回一个基于 FileSystemEntry 的对象来表示文件系统中选中的项目。通常是返回一个FileSystemFileEntry 或是 FileSystemDirectoryEntry 对象.\n    webkitGetAsEntry(): FileSystemEntry | null;\n}\n</code></pre>\n<h2>4. DataTransferItemList 接口</h2>\n<blockquote>\n<p>DataTransferItemList对象表示一组被拖动项的DataTransferItem 对象的列表。在拖动操作期间，每个DragEvent 都有一个 dataTransfer 属性，该属性是 DataTransferItemList。</p>\n</blockquote>\n<pre><code class=\"language-ts\">interface DataTransferItemList {\n    // 返回列表中拖动项的数量\n    readonly length: number;\n\n    // 将一个string类型的数据项添加到拖动项列表中。 数据是纯文本，必须提供类型。\n    add(data: string, type: string): DataTransferItem | null;\n    \n    // 将一个File类型的数据项添加到拖动项列表中。\n    add(data: File): DataTransferItem | null;\n\n    // 清空拖动项列表\n    clear(): void;\n\n    // 根据索引删除拖动项列表中的数据。\n    remove(index: number): void;\n    \n    // 根据索引获取指定拖拽项\n    [index: number]: DataTransferItem;\n}\n</code></pre>\n<p>参考资料<br>MDN的HTML 拖放 API：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API</a></p>\n"},{"fileName":"echarts全局渐变色盘.md","content":"<pre><code>  var color = [\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#ff960e&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#f9d12f&#39;,\n      },\n    ]),\n\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#47b6ea&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#00ffcf&#39;,\n      },\n    ]),\n\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#5f7ff2&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#7ba6ff&#39;,\n      },\n    ]),\n\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#fb6666&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#ff960e&#39;,\n      },\n    ]),\n  ]\n</code></pre>\n"},{"fileName":"echarts加载完成后鼠标首次触发tooltip盒子会发生抖动、出现滚动条.md","content":"<blockquote>\n<p>echarts加载完成后鼠标首次触发tooltip盒子会发生抖动、出现滚动条</p>\n</blockquote>\n<p>原因：</p>\n<p>在echarts图表中出现tooltip时，画布的父标签（即：echarts.init()的标签）的有时宽高都会发生变化，导致相对布局的div可能大小发生变化（画布大小却不变），导致页面闪动。</p>\n<p>解决方法 ：</p>\n<ol>\n<li>在该画布的父标签（即：echarts.init()的标签）外层套一个div，设置overflow:hidden；然后，设置tooltip的confine：true;(设置tooltip不超出图表)。</li>\n<li>tooltip：{ transitionDuration: 0, }//加上这个可以防止抖动</li>\n</ol>\n"},{"fileName":"echarts区域缩放.md","content":"<pre><code>// 区域缩放\n        dataZoom: [\n          {\n            type: &quot;slider&quot;,\n            filterMode: &quot;weakFilter&quot;,\n            xAxisIndex: [0, 1],\n            showDataShadow: false,\n            height: 10,\n            bottom: 10,\n            borderColor: &quot;transparent&quot;,\n            backgroundColor: &quot;#e2e2e2&quot;,\n            handleIcon:\n              &quot;M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z&quot;, // jshint ignore:line\n            handleSize: 20,\n            handleStyle: {\n              shadowBlur: 6,\n              shadowOffsetX: 1,\n              shadowOffsetY: 2,\n              shadowColor: &quot;#aaa&quot;\n            },\n            labelFormatter: &quot;&quot;\n          },\n          {\n            type: &#39;slider&#39;,\n            yAxisIndex: 0,\n            filterMode: &#39;weakFilter&#39;,\n            showDataShadow: false,\n            width: 10,\n            left: 55,\n            borderColor: &quot;transparent&quot;,\n            backgroundColor: &quot;#e2e2e2&quot;,\n            handleIcon:\n              &quot;M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z&quot;, // jshint ignore:line\n            handleSize: 20,\n            handleStyle: {\n              shadowBlur: 6,\n              shadowOffsetX: 1,\n              shadowOffsetY: 2,\n              shadowColor: &quot;#aaa&quot;\n            },\n            labelFormatter: &quot;&quot;\n          }\n        ],\n</code></pre>\n<pre><code> dataZoom: [\n          // 给x轴设置滚动条\n          {\n            startValue: 1,\n            endValue: this.dimension === &#39;roadCode&#39; ? 8 : 6,\n            type: &#39;slider&#39;,\n            show: true,\n            xAxisIndex: [0],\n            handleSize: 0, // 滑动条的 左右2个滑动条的大小\n            height: 8, // 组件高度\n            left: 50, // 左边的距离\n            right: 40, // 右边的距离\n            bottom: 10, // 右边的距离\n            handleColor: &#39;#EFEFEF&#39;, // h滑动图标的颜色\n            handleStyle: {\n              borderColor: &#39;#409EFF&#39;,\n              borderWidth: &#39;1&#39;,\n              shadowBlur: 2,\n              background: &#39;#EFEFEF&#39;,\n              shadowColor: &#39;#EFEFEF&#39;\n            },\n            fillerColor: new echarts.graphic.LinearGradient(1, 0, 0, 0, [\n              {\n                // 给颜色设置渐变色 前面4个参数，给第一个设置1，第四个设置0 ，就是水平渐变\n                // 给第一个设置0，第四个设置1，就是垂直渐变\n                offset: 0,\n                color: &#39;#409EFF&#39;\n              },\n              {\n                offset: 1,\n                color: &#39;#409EFF&#39;\n              }\n            ]),\n            backgroundColor: &#39;#EFEFEF&#39;, // 两边未选中的滑动条区域的颜色\n            showDataShadow: false, // 是否显示数据阴影 默认auto\n            showDetail: false, // 即拖拽时候是否显示详细数值信息 默认true\n            handleIcon:\n              &#39;M-292,322.2c-3.2,0-6.4-0.6-9.3-1.9c-2.9-1.2-5.4-2.9-7.6-5.1s-3.9-4.8-5.1-7.6c-1.3-3-1.9-6.1-1.9-9.3c0-3.2,0.6-6.4,1.9-9.3c1.2-2.9,2.9-5.4,5.1-7.6s4.8-3.9,7.6-5.1c3-1.3,6.1-1.9,9.3-1.9c3.2,0,6.4,0.6,9.3,1.9c2.9,1.2,5.4,2.9,7.6,5.1s3.9,4.8,5.1,7.6c1.3,3,1.9,6.1,1.9,9.3c0,3.2-0.6,6.4-1.9,9.3c-1.2,2.9-2.9,5.4-5.1,7.6s-4.8,3.9-7.6,5.1C-285.6,321.5-288.8,322.2-292,322.2z&#39;,\n            filterMode: &#39;filter&#39;\n          },\n          // 下面这个属性是里面拖到\n          {\n            type: &#39;inside&#39;,\n            show: true,\n            xAxisIndex: [0],\n            startValue: 1,\n            endValue: this.dimension === &#39;roadCode&#39; ? 8 : 6,\n            zoomLock: true\n          }\n        ],\n</code></pre>\n"},{"fileName":"echarts图例点击事件.md","content":"<pre><code>myChart.on(&#39;legendselectchanged&#39;,(obj) =&gt; {\n   if(obj.name == &#39;Rainfall&#39;) {\n    if(obj.selected.Rainfall == false) {\n        myChart.dispatchAction({\n              type:&#39;legendSelect&#39;,\n              name:&#39;Rainfall&#39;\n        })\n    }\n  }else if(obj.name == &#39;Evaporation&#39;) {\n      if(obj.selected.Evaporation == false) {\n           myChart.dispatchAction({\n              type:&#39;legendSelect&#39;,\n              name:&#39;Evaporation&#39;\n          })\n      }\n          \n  }\n})\n \n</code></pre>\n"},{"fileName":"echarts堆叠柱状图.md","content":"<h1>最近写了一个echarts堆叠柱状图页面，因为经验不是很多，写个博客记录一下</h1>\n<p><img src=\"https://img2020.cnblogs.com/blog/2483371/202109/2483371-20210907223234893-728469707.png\" alt=\"\"></p>\n<h3>先贴代码</h3>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;container-box&quot;&gt;\n    &lt;div class=&quot;item-box&quot;&gt;\n      &lt;div class=&quot;box&quot; ref=&quot;clintBox&quot;&gt;\n        &lt;div :id=&quot;chartsCode&quot; :style=&quot;`width: ${width}px; height:400px;`&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;tablebox&quot;&gt;\n          &lt;table border=&quot;1px solid #000&quot; class=&quot;mytable&quot;&gt;\n            &lt;tr v-for=&quot;(item,index) in tableData&quot; :key=&quot;index&quot;&gt;\n              &lt;td width=&quot;100px&quot; class=&quot;header&quot; v-if=&quot;index === 0&quot;&gt;\n                &lt;i class=&quot;poinit&quot; style=&quot;background-color: #ffbb00&quot;&gt;&lt;/i&gt;\n                {{&#39;&gt;&#39; + &#39;3年&#39;}}\n              &lt;/td&gt;\n              &lt;td width=&quot;100px&quot; class=&quot;header&quot; v-if=&quot;index == 1&quot;&gt;\n                &lt;i class=&quot;poinit&quot; style=&quot;background-color: #a5a5a5&quot;&gt;&lt;/i&gt;\n                {{&#39;2-3年&#39;}}\n              &lt;/td&gt;\n              &lt;td width=&quot;100px&quot; class=&quot;header&quot; v-if=&quot;index == 2&quot;&gt;\n                &lt;i class=&quot;poinit&quot; style=&quot;background-color: #ed7d31&quot;&gt;&lt;/i&gt;\n                {{&#39;1-2年&#39;}}\n              &lt;/td&gt;\n              &lt;td width=&quot;100px&quot; class=&quot;header&quot; v-if=&quot;index == 3&quot;&gt;\n                &lt;i class=&quot;poinit&quot; style=&quot;background-color: #5b9bd5&quot;&gt;&lt;/i&gt;\n                {{&#39;0-1年&#39;}}\n              &lt;/td&gt;\n              &lt;td v-for=&quot;(t) in item&quot; :key=&quot;t&quot; :width=&quot;filterWidth&quot; class=&quot;mytd&quot;&gt;{{t}}&lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;chartsCard&#39;,\n  components: {\n  },\n  data () {\n    return {\n      option: [],\n      roadNameList: [],\n      tableData: [],\n      width: 0,\n    }\n  },\n  props: {\n    data: {\n      required: true,\n    },\n    code: {\n      required: true,\n    }\n  },\n  computed: {\n    // 过滤路线名称\n    filterRoadName () {\n      let arr = []\n      this.data.forEach(item =&gt; {\n        arr.push(item.roadCode)\n      })\n      this.roadNameList = arr\n      return this.roadNameList\n    },\n    // 根据传过来的数据长度动态计算表格的宽的\n    filterWidth () {\n      return (this.width - 300) / this.filterRoadName.length\n    },\n    // 获取图表容器的宽度\n    chartsWith () {\n      return this.$refs.clintBox.clientWidth\n    },\n\n    // 动态图表id\n    chartsCode () {\n      return &#39;chart&#39; + this.code\n    }\n  },\n  watch: {\n    data: function () {\n      this.init()\n    }\n  },\n  created () {\n  },\n  mounted () {\n    this.$nextTick(() =&gt; {\n      this.width = this.chartsWith\n      setTimeout(() =&gt; {\n        this.init()\n      }, 200)\n    })\n\n  },\n  methods: {\n\n    init () {\n      this.initChart()\n      this.initTableData()\n\n    },\n\n    // 初始化echatrs\n    initChart () {\n      this.option = {\n        tooltip: {\n          trigger: &quot;axis&quot;,\n          formatter: &#39;{b0}&lt;br /&gt;{a0} : {c0}%&lt;br/&gt;{a1} : {c1}%&lt;br/&gt;{a2} : {c2}%&lt;br/&gt;{a3} : {c3}%&#39;,\n        },\n        grid: {\n          // width: this.chartsWith * 0.8 + &#39;px&#39;,\n          left: &#39;150px&#39;,\n          right: &#39;150px&#39;,\n          bottom: &#39;25px&#39;,\n        },\n        xAxis: {\n          show: true,\n          data: this.filterRoadName,\n\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            show:true,\n            length: 25, // 竖线的长度\n            // interval:0\n\n          }\n        },\n        yAxis: {\n          max: 100,// 设置最大值是多少\n          splitNumber: 10,// 设置分几段显示\n          splitLine: {\n            show: true,\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            interval: &#39;auto&#39;,\n            formatter: &#39;{value} %&#39;,\n          },\n\n        },\n        series: [{\n          name: &#39;0-1年&#39;,\n          type: &#39;bar&#39;,\n          stack: &#39;使用情况&#39;,//相同的stack开启堆叠\n          // data: [60, 20, 36, 10, 10, 20],\n          data: this.initData(&#39;year01Length&#39;),\n          barWidth: 50,//柱子宽度\n          barGap: &#39;0%&#39;,/*多个并排柱子设置柱子之间的间距*/\n          barCategoryGap: &#39;0%&#39;,/*多个并排柱子设置柱子之间的间距*/\n          itemStyle: {\n            normal: { color: &quot;#009587&quot; },\n          }\n        }, {\n          name: &#39;1-2年&#39;,\n          type: &#39;bar&#39;,\n          stack: &#39;使用情况&#39;,//相同的stack开启堆叠\n          data: this.initData(&#39;year12Length&#39;),\n          barWidth: 50,//柱子宽度\n          itemStyle: {\n            normal: { color: &quot;#2196f3&quot; },\n          }\n        }, {\n          name: &#39;2-3年&#39;,\n          type: &#39;bar&#39;,\n          stack: &#39;使用情况&#39;,//相同的stack开启堆叠\n          data: this.initData(&#39;year23Length&#39;),\n          barWidth: 50,//柱子宽度\n          itemStyle: {\n            normal: { color: &quot;#ffeb3b&quot; },\n          }\n        }, {\n          name: &#39;3-4年&#39;,\n          type: &#39;bar&#39;,\n          stack: &#39;使用情况&#39;,//相同的stack开启堆叠\n          data: this.initData(&#39;year34Length&#39;),\n          barWidth: 50,//柱子宽度\n          itemStyle: {\n            normal: { color: &quot;#9c27b0&quot; },\n          }\n        }]\n      }\n      // 基于准备好的dom，初始化echarts实例\n      let myChart = this.$echarts.init(document.getElementById(this.chartsCode))\n      // 使用刚指定的配置项和数据显示图表。\n      myChart.setOption(this.option, true)\n      // myChart.resize()\n    },\n\n    // 初始化柱状图数据 计算每一个val在数据中和totalLength的百分比\n    initData (val) {\n      var serie = []\n      this.data.forEach((item, index) =&gt; {\n        let num = item[val]\n        let total = 0\n        let arr = [item.year01Length, item.year12Length, item.year23Length, item.year34Length]\n        let arr1 = arr.filter(item =&gt; {\n          if (item !== &#39;null&#39;) {\n            return item\n          }\n        })\n        arr1.forEach(item =&gt; {\n          total += parseFloat(item)\n        })\n        //   // 计算占比\n        var numcount = this.Percentage(num, parseFloat(total.toFixed(3)))\n        serie.push(numcount)\n      })\n      return serie\n    },\n\n    //计算两者占比方法\n    Percentage (num, total) {\n      return (Math.round(num / total * 10000) / 100.00)// 小数点后两位百分比\n    },\n\n    // 初始化表格数据\n    initTableData () {\n      let tableArr = []\n      console.log(this.data)\n      for (let i = 0; i &lt;= 3; i++) {\n        let arr = []\n        let str = (&#39;year&#39; + i) + (i + 1 + &#39;Length&#39;)\n        this.data.forEach((item, index) =&gt; {\n          arr.push(item[str])\n        })\n        tableArr.unshift(arr)\n      }\n      this.tableData = tableArr\n    },\n\n  },\n}\n\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.el-carousel__item h3 {\n  color: #475669;\n  font-size: 18px;\n  opacity: 0.75;\n  line-height: 400px;\n  margin: 0;\n}\n.el-carousel__item:nth-child(2n) {\n  background-color: #f5f7fa;\n}\n.el-carousel__item:nth-child(2n + 1) {\n  background-color: #f5f7fa;\n}\n.item-box {\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  justify-content: center;\n  align-items: start;\n}\n.box {\n  width: 100%;\n  position: relative;\n}\n.tablebox {\n  width: 100%;\n  height: 300px;\n}\n\n.mytable {\n  border-collapse: collapse;\n  margin-left: 50px;\n}\n.mytable td {\n  padding: 5px 10px;\n  text-align: center;\n}\n.mytable .header {\n  text-align: left;\n}\n.mytd {\n  height: 25px !important;\n}\n.poinit {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  vertical-align: middle;\n  margin-right: 5px;\n}\n&lt;/style&gt;\n</code></pre>\n<h2>在echarts里option中的series的数组数据中我们可以通过stack属性控制是否堆叠，当我们的两个数据需要堆叠显示时，我们只需要给他两个的stack设置相同名称就可以了！</h2>\n<pre><code>实现等高的堆叠图，需要对数据进行处理\n</code></pre>\n<ul>\n<li>参考 <a href=\"https://blog.csdn.net/qq_16416993/article/details/108118443\">https://blog.csdn.net/qq_16416993/article/details/108118443</a> \n  this.initData(&#39;year12Length&#39;) 返回一个数组 里面的每个元素是数据里每个对象的year12Length的值相对于&gt;3年以下总和的百分比</li>\n</ul>\n<h2>修改 tooltip 显示百分比</h2>\n<p>echarts提示框显示百分比  数据已经转换好了 只需在后面加%号</p>\n<pre><code>tooltip: {\n          trigger: &quot;axis&quot;,\n          formatter: &#39;{b0}&lt;br /&gt;{a0} : {c0}%&lt;br/&gt;{a1} : {c1}%&lt;br/&gt;{a2} : {c2}%&lt;br/&gt;{a3} : {c3}%&#39;,\n        },\n</code></pre>\n<h2>实现底部表格参考</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/731d6b88f7ca\">https://www.jianshu.com/p/731d6b88f7ca</a></li>\n</ul>\n<p>  因为实现起来难度较大 所以采用的是elementui的table组件 通过给定option配置项grid:{left:&#39;100px&#39;,right:&#39;100px&#39;}此时图表距离canvas画布左右均有100px的空间\ncanvas的宽度是100% 所以我们等通过this.$refs.fatherBox.clientWidth的方式获取到canvas父盒子的宽度 然后减去左右空白距离（200）除以柱子个数计算属性动态的计算出x轴分隔的宽度同时指定给表格的宽度结合定位调整表格的位置，大体上能实现这种效果</p>\n<p>  因为element-ui的表格不好实现 所以手写的table表格 表格顶部与图表对齐实现方式：图表配置项里 grid：{left：&#39;100px&#39;,right：&#39;100px&#39;,bottom：&#39;25px&#39;}指定的是图表相对于canvas的上下左右的距离 底部25px为x轴竖线的长度 表格的父容器和图表的父容器宽度都是100% 给表格和图表相同的左边距即可\n  td的宽度通过计算属性拿到图表父容器的宽度 然后（父宽度  - 图表的左右边距）/ 柱状图的个数</p>\n<h3>碰到的小坑</h3>\n<p> 子组件渲染echarts时父组件还没有获取到数据就渲染了子组件 这是传过来的是空值 子组件也就无法显示\n<code>解决方法</code>：v-if=&quot;tableData.length !== 0&quot; 判断一下</p>\n<p>watch里面调用methods方法不能使用箭头函数 否则会报错</p>\n"},{"fileName":"echarts山东地图.md","content":"<p>地图JSON数据：<a href=\"\">https://datav.aliyun.com/portal/school/atlas/area_selector#&amp;lat=22.65267050733856&amp;lng=114.18983459472656&amp;zoom=10</a></p>\n<h3>echarts 山东地图</h3>\n<pre><code class=\"language-.js\">data () {\n    return {\n      myChart: null,\n      mapJson: JSON.stringify(mapJson),\n    }\n  },\n  methods: {\n    // 地图初始化\n    mapInit () {\n      //  获取dom\n      this.myChart = this.$echarts.init(document.getElementById(&#39;map&#39;))\n      let nameMap = &#39;山东省&#39;\n      this.loadMap(this.mapJson, nameMap) //初始化全省地图\n    },\n    // /**\n    //  获取对应的json地图数据，然后向echarts注册该区域的地图，最后加载地图信息\n    //  @params {String} mapCode:json数据的地址\n    //  @params {String} name: 地图名称\n    //  */\n    //  注册地图\n    loadMap (mapCode, name) {\n      //各省份的数据\n      let allData = [\n        { name: &#39;济南市&#39;, value: 396 },\n        { name: &#39;青岛市&#39;, value: 66 },\n        { name: &#39;烟台市&#39;, value: 222 },\n        { name: &#39;潍坊市&#39;, value: 688 },\n        { name: &#39;菏泽市&#39;, value: 75 },\n        { name: &#39;日照市&#39;, value: 121 },\n        { name: &#39;威海市&#39;, value: 91 },\n        { name: &#39;枣庄市&#39;, value: 479 },\n        { name: &#39;临沂市&#39;, value: 34 },\n        { name: &#39;滨州市&#39;, value: 631 },\n        { name: &#39;东营市&#39;, value: 1203 },\n        { name: &#39;淄博市&#39;, value: 988 },\n        { name: &#39;泰安市&#39;, value: 693 },\n        { name: &#39;聊城市&#39;, value: 934 },\n        { name: &#39;济宁市&#39;, value: 748 },\n        { name: &#39;德州市&#39;, value: 1267 },\n      ]\n      // 散点数据\n      let markCity = {\n        &#39;济南市&#39;: [117.119999, 36.651216],\n        &#39;临沂市&#39;: [118.356448, 35.104672],\n        &#39;淄博市&#39;: [118.054927, 36.813487],\n        &#39;威海市&#39;: [122.120419, 37.513068]\n      }\n      // 初始化散点数据\n      function convertData () {\n        var res = []\n        for (var i = 0; i &lt; allData.length; i++) {\n          var city = markCity[allData[i].name]\n          if (city) {\n            res.push({\n              name: allData[i].name,\n              value: city.concat(allData[i].value)\n            })\n          }\n        }\n        return res\n      }\n      this.$echarts.registerMap(name, mapCode)\n      let option = {\n        geo: {\n          map: name,\n          zoom: 1.5, //当前视角的缩放比例\n          aspectScale: 0.85,\n          layoutCenter: [&#39;50%&#39;, &#39;50%&#39;], //地图位置\n          layoutSize: &#39;100%&#39;,\n          roam: false,\n          itemStyle: {\n            normal: {\n              borderColor: &#39;rgba(192,245,249,.8)&#39;,\n              shadowColor: &#39;#6FFDFF&#39;,\n              // shadowColor: &#39;rgba(128, 217, 248, 1)&#39;,\n              borderWidth: 3,\n              shadowOffsetX: 0,\n              shadowOffsetY: 0,\n              shadowBlur: 10,\n              //   areaColor: &#39;rgba(29,85,139,.6)&#39;,\n            },\n            emphasis: {\n              areaColor: &#39;#389BB7&#39;,\n              borderWidth: 0,\n            },\n          },\n        },\n        tooltip: {\n          show: true,\n          formatter: (params) =&gt; {\n            if (params.data)\n              return (\n                &#39;&lt;span style=&quot;width:195px;height:35px;line-height:28px;float:left;&quot;&gt;&amp;nbsp;&amp;nbsp;&#39; +\n                params.name +\n                &#39;&lt;/span&gt;&lt;/br&gt;&lt;span style=&quot;float:left;magin-top:50px;width:195px;height:35px;line-height:25px;&quot;&gt;&amp;nbsp;&amp;nbsp;面积：&#39; +\n                params.data[&#39;value&#39;] +\n                &#39;万亩&lt;/span&gt;&#39;\n              )\n          },\n          extraCssText:\n            &quot;background:url(&#39;/asset/get/s/data-1630478118371-aR5gezvxy.png&#39;) 100% 100% repeat;width:195px;height:142px;&quot;,\n        },\n        series: [\n          {\n            name: &#39;Map&#39;,\n            type: &#39;map&#39;,\n            mapType: name,\n            selectedMode: &#39;false&#39;, //是否允许选中多个区域\n            aspectScale: 0.85,\n            layoutCenter: [&#39;50%&#39;, &#39;50%&#39;], //地图位置\n            layoutSize: &#39;100%&#39;,\n            roam: true,\n            zoom: 1.5, //当前视角的缩放比例\n            roam: false, //是否开启平游或缩放\n            scaleLimit: {\n              //滚轮缩放的极限控制\n              min: 1,\n              max: 2,\n            },\n            label: {\n              show: true,\n              textStyle: {\n                color: &#39;#fff&#39;\n              },\n              formatter: (params) =&gt; {\n                return params.name.slice(0, 2)\n              }\n            },\n            itemStyle: {\n              normal: {\n                areaColor: {\n                  type: &#39;linear-gradient&#39;,\n                  x: 0,\n                  y: 500,\n                  x2: 0,\n                  y2: 0,\n                  colorStops: [{\n                    offset: 0,\n                    color: &#39;RGBA(47,145,236,1)&#39; // 0% 处的颜色\n                  }, {\n                    offset: 1,\n                    color: &#39;RGBA(2,43,89,1)&#39; // 50% 处的颜色\n                  }],\n                  global: true // 缺省为 false\n                },\n                borderColor: &#39;#2793d3&#39;,\n                borderWidth: 1,\n              },\n              emphasis: {\n                borderColor: &#39;#2793d3&#39;,\n                borderWidth: 2,\n                shadowColor: &#39;rgba(255, 255, 255, 0.2)&#39;,\n                shadowBlur: 5,\n                label: {\n                  show: true,\n                  textStyle: {\n                    color: &#39;#FFF&#39;,\n                    fontSize: 16,\n                  },\n                },\n                areaColor: {\n                  type: &#39;radial&#39;,\n                  x: 0.5,\n                  y: 0.5,\n                  r: 2,\n                  colorStops: [\n                    {\n                      offset: 0,\n                      color: &#39;rgba(26, 96, 166, 1)&#39;, // 0% 处的颜色\n                    },\n                    {\n                      offset: 1,\n                      color: &#39;rgba(26, 96, 166, 0.1)&#39;, // 100% 处的颜色\n                    },\n                  ],\n                  globalCoord: false, // 缺省为 false\n                },\n              },\n            },\n            data: allData,\n          }, {\n            name: &#39;散点&#39;,\n            type: &#39;effectScatter&#39;,\n            coordinateSystem: &#39;geo&#39;,\n            data: convertData(),\n            symbolSize: 15,//标记大小\n            symbol: &#39;circle&#39;,\n            // \t\t\tsymbolSize: function (val) {\n            // \t\t\t\treturn val[2];\n            // \t\t\t},\n            label: {\n              normal: {\n                show: false\n              },\n              emphasis: {\n                show: false\n              }\n            },\n            showEffectOn: &#39;render&#39;,\n            itemStyle: {\n              normal: {\n                color: {\n                  type: &#39;radial&#39;,\n                  x: 0.5,\n                  y: 0.5,\n                  r: 0.5,\n                  colorStops: [{\n                    offset: 0,\n                    color: &#39;rgba(14,245,209,0.2)&#39;\n                  }, {\n                    offset: 0.8,\n                    color: &#39;rgba(14,245,209,0.2)&#39;\n                  }, {\n                    offset: 1,\n                    color: &#39;rgba(14,245,209,1)&#39;\n                  }],\n                  global: false // 缺省为 false\n                },\n              }\n\n            },\n\n          },\n        ],\n      }\n      this.myChart.setOption(option)\n    },\n  }\n}\n</code></pre>\n"},{"fileName":"echarts总结.md","content":"<h1>echarts总结</h1>\n<blockquote>\n<ol>\n<li>echarts 初始化必须指定容器的宽高</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>options配置项</li>\n</ol>\n</blockquote>\n<h3>图表grid与canvas的距离</h3>\n<pre><code class=\"language-js\"> grid: {\n          left: &#39;300px&#39;,\n          right: &#39;150px&#39;,\n          bottom: &#39;25px&#39;\n        },\n</code></pre>\n<h3>提示框</h3>\n<pre><code class=\"language-js\"> tooltip: {\n          trigger: &quot;axis&quot;,\n          formatter: &#39;{b0}&lt;br /&gt;{a0} : {c0}%&lt;br/&gt;{a1} : {c1}%&lt;br/&gt;{a2} : {c2}%&lt;br/&gt;{a3} : {c3}%&#39;,\n        },\n</code></pre>\n<h3>x轴竖线的长度</h3>\n<pre><code class=\"language-js\">xAxis: {\n          show: true,\n          data: this.filterRoadName,\n\n          splitLine: {\n            show: false,\n          },\n          axisTick: {\n            // show:false,\n            length: 25 // 竖线的长度\n          }\n        },\n</code></pre>\n<h3>柱状图柱子宽度</h3>\n<pre><code class=\"language-js\"> series: [\n          {\n            name: &#39;Ⅰ级热熔型&#39;,\n            type: &#39;bar&#39;,\n            stack: &#39;使用情况&#39;,//相同的stack开启堆叠\n            // data: [60, 20, 36, 10, 10, 20],\n            data: this.initData(&#39;grade1Material1Length&#39;),\n            barWidth: 50,//柱子宽度\n            barGap: &#39;0%&#39;,/*多个并排柱子设置柱子之间的间距*/\n            barCategoryGap: &#39;0%&#39;,/*多个并排柱子设置柱子之间的间距*/\n            itemStyle: {\n                normal: { color: &quot;#00b050&quot; },//柱子颜色\n              },\n            itemStyle: {\n                 normal: {\n                     color: (params) =&gt; {\n                         return this.initColor(this.sortData(val))[params.dataIndex] //动态颜色\n                     }\n                 }\n            },\n          },\n        ]\n</code></pre>\n<h3>x轴标签旋转</h3>\n<pre><code class=\"language-js\">xAxis: {\n          type: &#39;category&#39;,\n          data: this.filterRoadName,\n          axisLabel: {\n            rotate: this.rotate,//旋转度数\n          }\n        },\n</code></pre>\n<h3>丢弃上次配置</h3>\n<pre><code class=\"language-js\">myChart.setOption(this.option, true)//第二个参数设置为true丢弃上次的配置 重新渲染\n</code></pre>\n<pre><code>### 饼图标签居中显示\n\n```js\nlabel: {\n              normal: {\n                show: true,\n                position: &#39;right&#39;,\n                formatter: &#39;{a|{b}}\\n{p|{c}}&#39;,\n                textStyle: {\n                  color: &#39;#727272&#39;,\n                },\n                rich: {\n                  p: {\n                    align: &#39;center&#39;\n                  }\n                }\n              },\n              emphasis: {\n                show: true,\n              }\n            },\n</code></pre>\n<pre><code>\n</code></pre>\n<h3>平均值线</h3>\n<pre><code class=\"language-js\">markLine: {\n              symbol: &#39;none&#39;,//取消开始结束标记（不显示箭头）\n              data: [\n                { //支持 average，min，max\n                  type: &#39;average&#39;,\n                  name: &#39;平均值&#39;,\n                  label: {\n                    normal: {\n                      color: &#39;#dd8146&#39;,\n                      fontSize: 15,\n                      padding: [-13, -40, 15, -90],\n                      formatter: function (params) {\n                        return &#39;均值&#39; + params.value\n                      },\n                      // formatter: this.average(val),\n                    }\n                  },\n                  lineStyle: {\n                    normal: {\n                      color: &#39;#dd8146&#39;,\n                      width: 2,\n                      type: &#39;solid&#39;\n                    }\n                  }\n                },\n              ]\n            },\n</code></pre>\n<pre><code>\n</code></pre>\n<h3>y轴百分比显示</h3>\n<pre><code class=\"language-js\"> yAxis: {\n          type: &#39;value&#39;,\n          axisLabel: {\n            show: true,\n            interval: &#39;auto&#39;,//居中显示\n            formatter: val === &#39;完整性&#39; ? &#39;{value} %&#39;:&#39;{value}&#39;,//以百分比显示\n          },\n          splitLine: {\n            show: false,\n          },\n          max: this.yMax()\n        },\n</code></pre>\n<blockquote>\n</blockquote>\n<pre><code>\n</code></pre>\n<h3>柱状图不同颜色</h3>\n<pre><code class=\"language-js\">   series: [\n          {\n            name: &#39;标线长度&#39;,\n            type: &#39;bar&#39;,\n            data: this.initCharts2Data(&#39;bar&#39;),\n            barWidth: 40,//柱子宽度\n            itemStyle: {\n              normal: {\n                color: (params) =&gt; {\n                  return this.color[params.dataIndex]\n                },\n                label: {\n                  show: true,\n                  position: &#39;top&#39;,\n                  fontSize: 15,\n                  color: &#39;#000&#39;\n                }\n              },\n\n            },\n            label: {\n              show: true,\n            },\n          }\n        ]\n</code></pre>\n<pre><code>\n</code></pre>\n<h3>饼图标签和引导线</h3>\n<pre><code class=\"language-js\">labelLine:{  \n     normal:{  \n          length:5,  // 改变标示线的长度\n          lineStyle: {\n             color: &quot;red&quot;  // 改变标示线的颜色\n          }\n     },\n},\nlabel: {\n     normal: {\n          textStyle: {\n                color: &#39;red&#39;  // 改变标示文字的颜色\n          }\n     }\n</code></pre>\n<pre><code>\n</code></pre>\n<h3>eharts下载图表</h3>\n<pre><code class=\"language-js\">toolbox: {\n          show: true,\n          left: &#39;0&#39;,\n          feature: {\n            mark: { show: true },\n            restore: { show: false },\n            saveAsImage: {\n              show: true,\n              pixelRatio: 1,\n              title: &#39;保存为图片&#39;,\n              type: &#39;png&#39;,\n              lang: [&#39;点击保存&#39;]\n            }\n          }\n        },\n</code></pre>\n<pre><code>\n</code></pre>\n"},{"fileName":"echarts渐变色盘.md","content":"<pre><code>var color = [\n\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#ff960e&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#f9d12f&#39;,\n      },\n    ]),\n\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#47b6ea&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#00ffcf&#39;,\n      },\n    ]),\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#5f7ff2&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#7ba6ff&#39;,\n      },\n    ]),\n\n\n    new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n      {\n        offset: 0,\n        color: &#39;#fb6666&#39;,\n      },\n      {\n        offset: 1,\n        color: &#39;#ff960e&#39;,\n      },\n    ]),\n  ]\n</code></pre>\n"},{"fileName":"echarts自定义tooltip提示框.md","content":"<h3>echarts自定义tooltip提示框</h3>\n<blockquote>\n<p>系列名</p>\n<p>数据名 + &#39;:&#39; + 数据值 + &#39;单位&#39;</p>\n</blockquote>\n<br>\n\n\n<pre><code class=\"language-js\"> tooltip: {\n          trigger: &quot;axis&quot;,\n          formatter: function (params) {\n            var relVal = params[0].name\n            for (var i = 0, l = params.length; i &lt; l; i++) {\n              relVal += &#39;&lt;br/&gt;&#39; + params[i].marker + params[i].seriesName + &#39; : &#39; + params[i].value + &#39; % &#39;\n            }\n            return relVal\n          }\n        },\n</code></pre>\n<br>\n\n<blockquote>\n<p>数据值为空或者0的不显示（只显示有值的）</p>\n</blockquote>\n<br>\n\n<pre><code class=\"language-js\"> tooltip: {\n          trigger: &quot;axis&quot;,\n          formatter: function (params) {\n            //x轴的名称\n            var htmlStr = params[0].name + &#39;&lt;br/&gt;&#39;\n            for (var i = 0; i &lt; params.length; i++) {\n              var param = params[i]\n              if (param.value &gt; 0) {\n                htmlStr += &#39;&lt;div&gt;&#39;\n                //为了保证和原来的效果一样，复制的是：param.marker的源码，圆点样式：param.color\n                htmlStr += &#39;&lt;span style=&quot;display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:&#39; + \t\t\t\t\t\tparam.color + &#39;;&quot;&gt;&lt;/span&gt;&#39;\n                // 名称颜色设置\n                // htmlStr += &#39;&lt;span style=&quot;color:&#39;+param.color+&#39;&quot;&gt;&#39;;\n                //圆点后面显示的名称\n                htmlStr += param.seriesName + &#39;:&#39; + param.value + &#39;%&#39;\n                // htmlStr += &#39;&lt;/span&gt;&#39;;\n                htmlStr += &#39;&lt;/div&gt;&#39;\n              }\n            }\n            return htmlStr\n          }\n\n        },\n</code></pre>\n"},{"fileName":"echarts自定义平均线样式.md","content":"<h3>echarts自定义平均线样式</h3>\n<blockquote>\n<p>自定义平均线样式</p>\n</blockquote>\n<p>效果：\n<img src=\"https://img2020.cnblogs.com/blog/2483371/202109/2483371-20210917145636891-912309203.png\" alt=\"\"></p>\n<p>代码：</p>\n<pre><code class=\"language-js\">series: [\n          {\n            name: val,\n            type: &#39;bar&#39;,\n            barWidth: 40,//柱子宽度\n            label: {\n              show: true\n            },\n            data: this.sortData(val),\n            markLine: {\n              \n              symbol: &#39;none&#39;,//取消开始结束标记（不显示箭头）\n              data: [\n                { //支持 average，min，max\n                  type: &#39;average&#39;,\n                  name: &#39;平均值&#39;,\n                  label:{  //自定义显示标签\n                    normal: {\n                      color:&#39;#000&#39;,\n                      formatter: function(params) {\n                        return &#39;平均值&#39; + params.value\n                      },\n                    }\n                  },\n                  lineStyle: {\n                    normal: {\n                      color: &#39;#d87d40&#39;,\n                      width: 2,\n                      type: &#39;solid&#39;\n                    }\n                  }\n                },\n              ]\n            },\n          }\n        ]\n</code></pre>\n"},{"fileName":"echarts自定义系列.md","content":"<h2>echarts自定义系列</h2>\n<p>首先上效果图，最近接触了没做过的echarts自定义,记录一下解决方案</p>\n<blockquote>\n<p>tooltip提示重叠的所有数据</p>\n</blockquote>\n<p>在tooltip里设置trigger为axios、axiosPointer设置type为cross之后再label的formatter里面触发会打印两个params、一个有当前鼠标位置对应在x轴的数值，另一个是当前的所有数据</p>\n<p>拿到这两个数据后保存起来，在tooltip的formatter进行使用</p>\n<blockquote>\n<p>图列换行</p>\n</blockquote>\n<p>在legend中，legend.data是显示图例的数组</p>\n<ol>\n<li>在所需换行的地方插入空的字符串 “” 或者是 “/n”</li>\n</ol>\n<pre><code class=\"language-js\">let legendsData = [&quot;银时&quot;, &quot;银时5&quot;, &quot;王二小&quot;, &quot;猹&quot;, &quot;↵&quot;, &quot;ink&quot;, &quot;i123nk&quot;, &quot;321&quot;, &quot;qqq&quot;, &quot;↵&quot;, &quot;oso&quot;, &quot;V&quot;];\nor\nlet legendsData = [&quot;银时&quot;, &quot;银时5&quot;, &quot;王二小&quot;, &quot;猹&quot;, &quot;&quot;, &quot;ink&quot;, &quot;i123nk&quot;, &quot;321&quot;, &quot;qqq&quot;, &quot;&quot;, &quot;oso&quot;, &quot;V&quot;];\n//将数组放入legend中\n</code></pre>\n<ol start=\"2\">\n<li><p>还有一种就是给 legend的width 设值legend.width是显示图例的区域的宽度 宽度不够自动换行</p>\n</li>\n<li><p>第三种办法是用 formatter进行设值</p>\n</li>\n</ol>\n<blockquote>\n<p>最后贴上核心代码</p>\n</blockquote>\n<pre><code class=\"language-js\">// 加载报表内容\n    initEchart () {\n      var t = window.devicePixelRatio\n      this.$refs[this.chartRef].style.zoom = t\n\n      var fontSize = this.$diffDevice()\n      var titlefontsize = 18\n      if (window.devicePixelRatio &gt; 1.25) {\n        titlefontsize = 14\n      }\n      const that = this\n      this.barChart = echarts.init(this.$refs[this.chartRef])\n      let data = this.echart.dataList\n      let categories = this.echart.laneList\n\n\n      let types = []\n      let colors = Color.getPieChartColor()\n      this.echart.maintainProjectList.forEach((item, index) =&gt; {\n        let newObj = {\n          name: item,\n          color: colors.length &gt;= index + 1 ? colors[index] : &quot;&quot;\n        }\n        types.push(newObj)\n      })\n      let newSeries = []\n      data.forEach((item, index) =&gt; {\n        // 过滤item颜色\n        let type = {}\n        types.forEach((item1, index1) =&gt; {\n          if (item.name == &#39;&#39;) {\n            type = {\n              name: &#39;&#39;,\n              color: &#39;#fff&#39;,\n            }\n          } else if (item.name == item1.name) {\n            type = item1\n          }\n        })\n        item.itemStyle = {\n          normal: {\n            color: type.color\n          }\n        }\n        // 配置newSeries\n        let newSeriesData = {\n          type: &quot;custom&quot;,\n          renderItem,\n          itemStyle: {\n            opacity: 0.8,\n            color: type.color,\n            fontSize: fontSize\n          },\n          name: item.name,\n          label: {\n            show: true,\n            //图形上显示数字\n            formatter: (params) =&gt; {\n              return params.value[3] &gt; 2 ? params.data.year : &#39;&#39;\n            }\n          },\n          encode: {\n            x: [1, 2],\n            y: 0\n          },\n          data: [item]\n        }\n        // push\n        newSeries.push(newSeriesData)\n      })\n      function renderItem (params, api) {\n        let categoryIndex = api.value(0)\n        // 这里使用 api.coord(...) 将数值在当前坐标系中转换成为屏幕上的点的像素值。\n        let start = api.coord([api.value(1), categoryIndex])\n        let end = api.coord([api.value(2), categoryIndex])\n        // 这里使用 api.size(...) 获得 Y 轴上数值范围为 1 的一段所对应的像素长度。\n        let height = api.size([0, 1])[1] * 0.9\n        // shape 属性描述了这个矩形的像素位置和大小。\n        // 其中特殊得用到了 echarts.graphic.clipRectByRect，意思是，\n        // 如果矩形超出了当前坐标系的包围盒，则剪裁这个矩形。\n        // 如果矩形完全被剪掉，会返回 undefined.\n        let rectShape = echarts.graphic.clipRectByRect(\n          {\n            // 矩形的位置和大小。\n            x: start[0],\n            y: start[1] - height / 2,\n            width: end[0] - start[0],\n            height: height\n          },\n          {\n            // 当前坐标系的包围盒。\n            x: params.coordSys.x,\n            y: params.coordSys.y,\n            width: params.coordSys.width,\n            height: params.coordSys.height\n          }\n        )\n        // 这里返回为这个 dataItem 构建的图形元素定义\n        return (\n          rectShape &amp;&amp; {\n            // 表示这个图形元素是矩形。还可以是 &#39;circle&#39;, &#39;sector&#39;, &#39;polygon&#39; 等等。\n            type: &quot;rect&quot;,\n            shape: rectShape,\n            // 用 api.style(...) 得到默认的样式设置。这个样式设置包含了\n            // option 中 itemStyle 的配置和视觉映射得到的颜色。\n            style: api.style()\n          }\n        )\n      }\n      let currentSeriesData = []\n      let mouseCurrent = 0\n      let option = {\n        color:[&#39;#fff&#39;],\n        tooltip: {\n          trigger: &#39;axis&#39;,\n          axisPointer: {\n            type: &#39;cross&#39;,\n            label: {\n              show: false,\n              formatter: function (params) {\n                if (params.seriesData.length !== 0) {\n                  currentSeriesData = params.seriesData\n                }\n                if (params.seriesData.length === 0) {\n                  mouseCurrent = params.value\n                }\n              }\n            }\n          },\n          formatter: function (params) {\n            let tipArr = []\n            currentSeriesData.forEach((item, index) =&gt; {\n              if (item.value[1] &lt;= mouseCurrent &amp;&amp; item.value[2] &gt;= mouseCurrent) {\n                tipArr.push(item)\n              }\n            })\n            let str = &#39;&#39;\n            tipArr.forEach((item, index) =&gt; {\n              if (!item.data.name) {\n                return\n              }\n              str += item.marker + item.data.year + &#39;&amp;nbsp&#39; + (item.data.name || item.data.data_laneName) + &#39;&amp;nbsp&#39; + &#39;桩号&#39; + item.value[1] + &#39;-&#39; + item.value[2] + &#39;&amp;nbsp&#39; + item.value[3] + &#39;公里&#39; + &#39;&lt;br/&gt;&#39;\n            })\n            return str\n          }\n        },\n        title: {\n          text: &quot;历年养护方案&quot;,\n          left: &quot;center&quot;,\n          textStyle: {\n            fontSize: titlefontsize\n          }\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {\n              pixelRatio: window.devicePixelRatio\n            }\n          }\n        },\n        legend: {\n          top: 20,\n          data: this.echart.maintainProjectList,\n          itemHeight: 10,\n          textStyle: {\n            fontSize: fontSize\n          },\n          left: &#39;center&#39;,\n          width: &#39;80%&#39;,\n\n        },\n        // 区域缩放\n        dataZoom: [\n          {\n            type: &quot;slider&quot;,\n            filterMode: &quot;weakFilter&quot;,\n            xAxisIndex: [0, 1],\n            showDataShadow: false,\n            height: 10,\n            bottom: 10,\n            borderColor: &quot;transparent&quot;,\n            backgroundColor: &quot;#e2e2e2&quot;,\n            handleIcon:\n              &quot;M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z&quot;, // jshint ignore:line\n            handleSize: 20,\n            handleStyle: {\n              shadowBlur: 6,\n              shadowOffsetX: 1,\n              shadowOffsetY: 2,\n              shadowColor: &quot;#aaa&quot;\n            },\n            labelFormatter: &quot;&quot;\n          },\n          {\n            type: &#39;slider&#39;,\n            yAxisIndex: 0,\n            filterMode: &#39;weakFilter&#39;,\n            showDataShadow: false,\n            width: 10,\n            left: 55,\n            borderColor: &quot;transparent&quot;,\n            backgroundColor: &quot;#e2e2e2&quot;,\n            handleIcon:\n              &quot;M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z&quot;, // jshint ignore:line\n            handleSize: 20,\n            handleStyle: {\n              shadowBlur: 6,\n              shadowOffsetX: 1,\n              shadowOffsetY: 2,\n              shadowColor: &quot;#aaa&quot;\n            },\n            labelFormatter: &quot;&quot;\n          }\n        ],\n        grid: {\n          height: &quot;auto&quot;,\n          // top: 70\n          top: this.echart.maintainProjectList.length &gt; 7 ? 80 : 60,\n          bottom:50,\n        },\n        xAxis: [\n          {\n            min: Math.floor(this.echart.minPile),\n            max: Math.floor(this.echart.maxPile),\n            // 间隔最小范围\n            minInterval: 0.5,\n            // 不显示0\n            scale: true,\n            // 分割段数\n            splitNumber: 30,\n            name: &#39;上行线&#39;,\n            nameLocation: &#39;start&#39;,\n            nameTextStyle: {\n              color: &#39;#000&#39;,\n              fontSize: fontSize,\n              padding: [25, 0, 0, 0]\n            },\n            splitLine: {\n              show: false,\n            },\n            axisLine: {\n              lineStyle: {\n                color: &quot;#ccc&quot;\n              }\n            },\n            axisTick: {\n              length: 0,\n            },\n            axisLabel: {\n              color: &#39;#000&#39;,\n              fontSize: fontSize,\n              showMaxLabel: true,\n              showMinLabel: true,\n            }\n          }, {\n            min: Math.floor(this.echart.minPile),\n            max: Math.floor(this.echart.maxPile),\n            minInterval: 0.5,\n            scale: true,\n            splitNumber: 30,\n            name: &#39;下行线&#39;,\n            nameLocation: &#39;start&#39;,\n            nameTextStyle: {\n              color: &#39;#000&#39;,\n              fontSize: fontSize,\n              padding: [0, 0, 25, 0]\n            },\n            splitLine: {\n              show: false,\n            },\n            axisLine: {\n              lineStyle: {\n                color: &quot;#ccc&quot;\n              }\n            },\n            axisTick: {\n              length: 0,\n            },\n            axisLabel: {\n              color: &#39;#000&#39;,\n              fontSize: fontSize,\n              showMaxLabel: true,\n              showMinLabel: true,\n            }\n          }\n        ],\n        yAxis: {\n          data: categories,\n          axisLabel: {\n            color: &#39;#000&#39;,\n            fontSize: fontSize,\n            // align: &#39;left&#39;\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: &quot;#ccc&quot;\n            }\n          },\n          axisTick: {\n            length: 50,\n            margin: 10,\n            lineStyle: {\n              // color: &quot;#d4d4d4&quot;\n              color: &#39;#ccc&#39;\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: &quot;#ccc&quot;\n            }\n          }\n        },\n        series: newSeries\n      }\n      this.barChart.setOption(option, true)\n    },\n\n    // 图表刷新\n    resizeChart () {\n      if (this.barChart &amp;&amp; this.barChart[&#39;resize&#39;]) {\n        this.barChart.resize()\n      }\n    },\n</code></pre>\n"},{"fileName":"echarts轮播效果 结合elementui跑马灯.md","content":"<blockquote>\n<p>echarts轮播效果 结合elementui跑马灯\n<img src=\"https://img2020.cnblogs.com/blog/2483371/202109/2483371-20210907223109296-356337396.png\" alt=\"\"></p>\n</blockquote>\n<p>首先考虑的时将跑马灯和echarts封装到一个组件里 但是组件内部渲染数据的时候需要对数据进行处理</p>\n<ul>\n<li>数据需要分割 例如一个echarts（柱状图）最大只能显示11条数据</li>\n<li>底部表格数据也需要分割处理</li>\n<li>echarts初始化init有问题</li>\n</ul>\n<p>上面的方案没有实现后，将echarts和表格封为组件，跑马灯抽取到父组件里面，整体思路如下：</p>\n<ul>\n<li>父组件对数据进行处理一个echarts显示不开的时候对数据的分割 根据分割的段数（length）渲染跑马灯卡片</li>\n<li>父组件将分割好的数据的第n个传到第n个卡片的echarts组件里</li>\n<li>echarts组件再对传进来的数据进行处理</li>\n</ul>\n<p>底部纵向表格实现</p>\n<ul>\n<li>element-ui只提供横向表格 渲染出来每一行是一个数据对象</li>\n<li>需要的数据进行单独的处理</li>\n</ul>\n"},{"fileName":"echarts颜色渐变.md","content":"<p>itemStyle: {\n              normal: {\n                color: new this.$echarts.graphic.LinearGradient(1, 0, 0, 0, [{\n                  offset: 0,\n                  color:&#39;#1794e4&#39;\n                },{\n                  offset: 0.6,\n                  color: &#39;#1794e42d&#39;\n                }, {\n                  offset: 1,\n                  color: &#39;#1794e40a&#39;\n                }], false)\n              }\n            },</p>\n"},{"fileName":"echarts饼图.15878389.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202202/2483371-20220210113255428-240871411.png\" alt=\"\"></p>\n<pre><code>let option = {\n        toolbox: {\n          show: true,\n          right: &#39;0&#39;,\n          feature: {\n            mark: { show: true },\n            restore: { show: false },\n            saveAsImage: {\n              show: true,\n              pixelRatio: 1,\n              title: &#39;保存为图片&#39;,\n              type: &#39;png&#39;,\n              lang: [&#39;点击保存&#39;]\n            }\n          }\n        },\n        title: {\n          text: &#39;总里程\\n&#39; + totalLength,\n          top: &#39;45%&#39;,\n          textAlign: &quot;center&quot;,\n          left: &quot;49%&quot;,\n          textStyle: {\n            color: &#39;#666&#39;,\n            fontSize: 14,\n            fontWeight: &#39;400&#39;\n          }\n        },\n        tooltip: {\n          show: true,\n          transitionDuration: 0,\n          formatter: (params) =&gt; {\n            return params.marker + &#39; &#39; + params.name + &#39;: &#39; + params.value + &#39; 公里&#39;\n          }\n        },\n        series: [{\n          itemStyle: {\n            normal: {\n              color: function (params) {\n                return colorList[params.dataIndex]\n              }\n            }\n          },\n          type: &#39;pie&#39;,\n          radius: [&#39;30%&#39;, &#39;60%&#39;],\n          center: [&quot;50%&quot;, &quot;50%&quot;],\n          label: {\n            show: false,\n          },\n          data: seriesData\n        }, {\n          itemStyle: {\n            normal: {\n              color: function (params) {\n                return colorList[params.dataIndex]\n              }\n            }\n          },\n          type: &#39;pie&#39;,\n          silent: true, //取消高亮\n          radius: [&#39;30%&#39;, &#39;60%&#39;],\n          center: [&quot;50%&quot;, &quot;50%&quot;],\n          labelLine: {\n            normal: {\n              length: 30,\n              length2: 0,\n              lineStyle: {\n                color: &#39;transparent&#39;\n              }\n            }\n          },\n          label: {\n            normal: {\n              formatter: params =&gt; {\n                return &#39;{name|&#39; + params.name + &#39;:&#39; + params.percent + &#39;%&#39; + &#39;}&#39; + &#39;\\n{hr|}\\n&#39; + &#39;{value|&#39; + params.value + &#39; 公里&#39; + &#39;}&#39;\n              },\n              rich: rich,\n              padding: [2, 25, 0, 25]\n            }\n          },\n          data: seriesData,\n          z: -1\n        }, {\n          itemStyle: {\n            normal: {\n              color: function (params) {\n                return colorList[params.dataIndex]\n              }\n            }\n          },\n          type: &#39;pie&#39;,\n          silent: true, //取消高亮\n          radius: [&#39;30%&#39;, &#39;60%&#39;],\n          center: [&quot;50%&quot;, &quot;50%&quot;],\n          labelLine: {\n            normal: {\n              length: 30,\n              length2: 0,\n              lineStyle: {\n                color: &#39;transparent&#39;\n              }\n            }\n          },\n          label: {\n            normal: {\n              formatter: params =&gt; {\n                return &#39;\\n{cir|●}\\n&#39;\n              },\n              rich: rich,\n            }\n          },\n          data: seriesData,\n          z: -1\n        }, {\n          itemStyle: {\n            normal: {\n              color: &#39;#F2F9F7&#39;\n            }\n          },\n          type: &#39;pie&#39;,\n          silent: true, //取消高亮\n          radius: [&#39;30%&#39;, &#39;67%&#39;],\n          center: [&quot;50%&quot;, &quot;50%&quot;],\n          hoverAnimation: false, //取消动画效果\n          data: seriesData,\n          label: {\n            normal: {\n              show: false,\n              position: &#39;inner&#39;,\n              formatter: params =&gt; {\n                return (\n                  &#39;{percent|&#39; + params.percent + &#39;%}&#39;\n                )\n              },\n              rich: rich,\n            }\n          },\n          z: -1\n        }]\n      }\n\n</code></pre>\n"},{"fileName":"echarts饼图.md","content":"<p>效果图\n<img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220408105212906-1751678062.png\" alt=\"\"></p>\n<pre><code>import * as echarts from &#39;echarts&#39;\nexport default function buildOption (arr) {\n  let color = [&#39;#ffd546&#39;, &#39;#18c6ce&#39;, &#39;#1c9bf6&#39;, &#39;#fb6666&#39;]\n\n  // var color = [\n\n  //   new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n  //     {\n  //       offset: 0,\n  //       color: &#39;#ff960e&#39;,\n  //     },\n  //     {\n  //       offset: 1,\n  //       color: &#39;#f9d12f&#39;,\n  //     },\n  //   ]),\n\n  //   new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n  //     {\n  //       offset: 0,\n  //       color: &#39;#47b6ea&#39;,\n  //     },\n  //     {\n  //       offset: 1,\n  //       color: &#39;#00ffcf&#39;,\n  //     },\n  //   ]),\n  //   new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n  //     {\n  //       offset: 0,\n  //       color: &#39;#5f7ff2&#39;,\n  //     },\n  //     {\n  //       offset: 1,\n  //       color: &#39;#7ba6ff&#39;,\n  //     },\n  //   ]),\n\n\n  //   new echarts.graphic.LinearGradient(0, 0, 1, 0, [\n  //     {\n  //       offset: 0,\n  //       color: &#39;#fb6666&#39;,\n  //     },\n  //     {\n  //       offset: 1,\n  //       color: &#39;#ff960e&#39;,\n  //     },\n  //   ]),\n  // ]\n  if (arr.length &gt; 4) {\n    color.unshift(&#39;#5f7ff2&#39;)\n  }\n  let option = {\n    backgroundColor: &#39;transparent&#39;,\n    grid: {\n      left: &#39;17%&#39;,\n      top: &#39;30%&#39;,\n      bottom: &#39;20%&#39;,\n      width: &#39;65%&#39;\n    },\n    // tooltip: {\n    //   show: true,\n    //   confine: true,\n    //   formatter: (params =&gt; {\n    //     return params.marker + params.name + &quot;: &quot; + params.value + &quot; &quot; + params.percent + &#39;%&#39;\n    //   })\n    // },\n    legend: {\n      show: false,\n      color: &quot;#C7DDFF&quot;,\n      orient: &quot;vertical&quot;,\n      right: &quot;20%&quot;,\n      top: &quot;30%&quot;,\n      animation: true,\n    },\n    series: [\n      {\n        color: color,\n        type: &quot;pie&quot;,\n        radius: [&quot;35&quot;, &quot;50&quot;],\n        center: [&quot;50%&quot;, &quot;50%&quot;],\n        label: {\n          show: false,\n        },\n        itemStyle: {\n          borderWidth: 2,\n          borderColor: &#39;rgba(0,0,0,0)&#39;,\n        },\n        data: arr,\n      },\n      {\n        color: [&#39;#5d92e1&#39;, &#39;rgba(0,0,0,0)&#39;, &#39;#5d92e1&#39;, &#39;rgba(0,0,0,0)&#39;,],\n        type: &quot;pie&quot;,\n        radius: [&quot;59&quot;, &quot;60&quot;],\n        center: [&quot;50%&quot;, &quot;50%&quot;],\n        label: {\n          show: false,\n        },\n        select: {\n          display: false,\n        },\n        hoverAnimation: false,\n        tooltip: {\n          show: false,\n        },\n        data: [25, 25, 25, 25],\n      },\n      {\n        type: &#39;pie&#39;,\n        name: &#39;内层细圆环&#39;,\n        radius: [&#39;0%&#39;, &#39;45%&#39;],\n        hoverAnimation: false,\n        clockWise: false,\n        itemStyle: {\n          normal: {\n            color: &#39;#13386a&#39;,\n          },\n        },\n        label: {\n          show: false,\n        },\n        data: [100],\n      },\n      {\n        type: &#39;pie&#39;,\n        name: &#39;内层细圆环&#39;,\n        radius: [&#39;45%&#39;, &#39;47%&#39;],\n        hoverAnimation: false,\n        clockWise: false,\n        itemStyle: {\n          normal: {\n            color: &#39;#326cb8&#39;,\n          },\n        },\n        label: {\n          show: false,\n        },\n        data: [100],\n      }],\n  }\n  return option\n}\n</code></pre>\n<pre><code> &lt;el-row style=&quot;width:100%;height:calc(100% - 69px)&quot;&gt;\n      &lt;el-col :span=&quot;12&quot; style=&quot;width:50%;height:100%;position: relative&quot;&gt;\n        &lt;chart-container id=&quot;distribute&quot; ref=&quot;distribute&quot; @chartClick=&quot;chartClick&quot; @mouseover=&quot;mouseover&quot;&gt;&lt;/chart-container&gt;\n        &lt;!--为ECharts新增一个DOM空间--&gt;\n        &lt;div class=&quot;info&quot;&gt;\n          &lt;p class=&quot;name&quot;&gt;{{info.name}}&lt;/p&gt;\n          &lt;p class=&quot;value&quot;&gt;{{info.value}}&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/el-col&gt;\n      &lt;el-col :span=&quot;12&quot; style=&quot;width:50%;height:100%&quot;&gt;\n        &lt;div class=&quot;box&quot;&gt;\n          &lt;div class=&quot;row&quot; v-for=&quot;(item,index) in data&quot; :key=&quot;index&quot; :style=&quot;{&#39;height&#39;:rowHeight}&quot; @click=&quot;chartClick(&#39;&#39;,{&#39;dataIndex&#39;:index})&quot;&gt;\n            &lt;el-col :span=&quot;3&quot; class=&quot;marker&quot; :style=&quot;{&#39;background-color&#39;:color[index],&#39;color&#39;:color[index]}&quot;&gt;&lt;/el-col&gt;\n            &lt;el-col :span=&quot;7&quot; class=&quot;name&quot;&gt;{{item.spanTypeName + &#39;:&#39;}}&lt;/el-col&gt;\n            &lt;el-col :span=&quot;5&quot; class=&quot;count&quot; :style=&quot;{&#39;color&#39;:color[index]}&quot;&gt;{{item.count}}&lt;/el-col&gt;\n            &lt;el-col :span=&quot;9&quot; class=&quot;perent&quot; :style=&quot;{&#39;color&#39;:color[index]}&quot;&gt;{{(item.ratio ? item.ratio : 0) + &#39;%&#39;}}&lt;/el-col&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/el-col&gt;\n    &lt;/el-row&gt;\n</code></pre>\n<pre><code>.box {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: start;\n  flex-direction: column;\n}\n.marker {\n  border-radius: 50%;\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  margin: 0 10px;\n}\n.name {\n  font-size: 0.8571rem;\n  font-family: &quot;Microsoft YaHei&quot;;\n  color: #d9eaff;\n}\n.count,\n.perent {\n  font-size: 1.1429rem;\n  font-family: &quot;DIN&quot;;\n  font-weight: bold;\n}\n.perent {\n  text-align: right;\n}\n\n.row {\n  width: 100%;\n  height: 3.5rem;\n  margin: 2px 0;\n  border-radius: 4px;\n  background-color: rgba(8, 29, 60, 0.3);\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n.row span {\n  margin-right: 5px;\n}\n.info {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n  p {\n    text-align: center;\n  }\n  .name {\n    font-size: 0.8571rem;\n    font-family: &quot;Microsoft YaHei&quot;;\n    color: #e2e6ec;\n  }\n  .value {\n    font-size: 1.7143rem;\n    font-family: &quot;DIN&quot;;\n    color: #e2e6ec;\n    font-weight: bold;\n    line-height: 1;\n  }\n}\n</code></pre>\n"},{"fileName":"el-date-picker图标靠右.md","content":"<pre><code>::v-deep.date-picker  .el-input__inner {\n  padding: 0 15px; // 这个15是el-input组件默认的值\n}\n::v-deep.date-picker  .el-input__prefix{\n  right: 5px;\n  left: unset;\n}\n</code></pre>\n"},{"fileName":"el-date-picker实现可选“至今”，“无.md","content":"<p>因为案例实现是动态表单，实际需根据自己的需求进行更改</p>\n<p>当点击“至今”、“无”时与后台约定一个固定的是时间值，例如：<code>2100-01-01</code>,时间格式需根据当前<code>valueFormat</code></p>\n<p>实现：当选择“至今”、“无”时使用<code>input</code>遮盖<code>el-date-picker</code>，但点击<code>input</code>时清空值，打开<code>datePicker</code></p>\n<p>Html</p>\n<pre><code class=\"language-html\">  &lt;div class=&quot;date_input_box&quot;&gt;\n    &lt;el-input v-if=&quot;tillNow&quot; :class=&quot;outline&quot; :value=&quot;placeholder&quot; class=&quot;mask_input&quot; readonly suffix-icon=&quot;el-icon-date&quot; @click.native=&quot;reselect&quot; /&gt;\n    &lt;el-date-picker\n      :ref=&quot;&#39;dataPick&#39; + item.key&quot;\n      :disabled=&quot;item.disabled === true&quot;\n      :format=&quot;item.format&quot;\n      :picker-options=&quot;item.pickerOptions&quot;\n      :placeholder=&quot;item.hasTips ? item.formTips : &#39;&#39;&quot;\n      :type=&quot;datePickType&quot;\n      :value=&quot;value&quot;\n      :value-format=&quot;item.valueFormat&quot;\n      class=&quot;real_date_picker&quot;\n      prefix-icon=&quot;date_picker_prefix_icon&quot;\n      style=&quot;width: 100%&quot;\n      @blur=&quot;setStyle(&#39;&#39;)&quot;\n      @focus=&quot;setStyle(&#39;outline&#39;)&quot;\n      v-on=&quot;$listeners&quot;\n    /&gt;\n  &lt;/div&gt;\n</code></pre>\n<p><code>picker.$emit</code>赋值是不用对时间格式进行判断，<code>el-date-picker</code>会转成对应的格式</p>\n<pre><code class=\"language-js\">// 因为是动态表单 此处根据配置判断是否可选“至今”，“无”  picker.$emit赋值是不用对时间格式进行判断，el-date-picker会转成对应的format\ncheckSpecialDate (format) {\n      if (format === null || format === undefined) {\n        return {}\n      }\n      let obj = {\n        shortcuts: []\n      }\n      if (format &amp;&amp; format.includes(&#39;至今&#39;)) {\n        obj.shortcuts.push({\n          text: &#39;至今&#39;,\n          onClick (picker) {\n            picker.$emit(&#39;pick&#39;, &#39;2100-01-01 01:01:01&#39;)\n          }\n        })\n      }\n      if (format &amp;&amp; format.includes(&#39;无&#39;)) {\n        obj.shortcuts.push({\n          text: &#39;无&#39;,\n          onClick (picker) {\n            picker.$emit(&#39;pick&#39;, &#39;2200-02-02 02:02:02&#39;)\n          }\n        })\n      }\n      return obj\n    },\n</code></pre>\n<pre><code class=\"language-js\">computed:{\n        tillNow () {\n      // 至今和无 与后台约定好的\n      return this.value.startsWith(&#39;2200&#39;) || this.value.startsWith(&#39;2100&#39;)\n    },\n    placeholder () {\n      if (this.value.startsWith(&#39;2200&#39;)) {\n        return &#39;无&#39;\n      } else if (this.value.startsWith(&#39;2100&#39;)) {\n        return &#39;至今&#39;\n      } else {\n        return &#39;&#39;\n      }\n    },\n    datePickType () {\n      if (this.item.format === &#39;yyyy-MM&#39;) {\n        return &#39;month&#39;\n      } else if (this.item.format === &#39;yyyy-MM-dd&#39;) {\n        return &#39;date&#39;\n      } else if (this.item.format === &#39;yyyy-MM-dd HH:mm:ss&#39;) {\n        return &#39;datetime&#39;\n      } else {\n        return &#39;date&#39;\n      }\n    }\n},\n  methods: {\n    reselect () {\n      // 清空选择的时间让picker定位到当前年月\n      this.clearValue()\n      this.$refs[&#39;dataPick&#39; + this.item.key].focus()\n    },\n    clearValue () {\n        // 此处清空value值\n    },\n    // 给遮盖的input设置聚焦样式\n    setStyle (str) {\n      this.outline = str\n    }\n  }\n</code></pre>\n<pre><code class=\"language-css\">.date_input_box {\n  position: relative;\n}\n\n.real_date_picker {\n  z-index: 100;\n}\n\n.mask_input {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 110;\n  border: none;\n}\n\n::v-deep.outline input {\n  border-color: #409efe;\n}\n</code></pre>\n<p>组件完整代码：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;date_input_box&quot;&gt;\n    &lt;el-input v-if=&quot;tillNow&quot; :class=&quot;outline&quot; :value=&quot;placeholder&quot; class=&quot;mask_input&quot; readonly suffix-icon=&quot;el-icon-date&quot; @click.native=&quot;reselect&quot; /&gt;\n    &lt;el-date-picker\n      :ref=&quot;&#39;dataPick&#39; + item.key&quot;\n      :disabled=&quot;item.disabled === true&quot;\n      :format=&quot;item.format&quot;\n      :picker-options=&quot;item.pickerOptions&quot;\n      :placeholder=&quot;item.hasTips ? item.formTips : &#39;&#39;&quot;\n      :type=&quot;datePickType&quot;\n      :value=&quot;value&quot;\n      :value-format=&quot;item.valueFormat&quot;\n      class=&quot;real_date_picker&quot;\n      prefix-icon=&quot;date_picker_prefix_icon&quot;\n      style=&quot;width: 100%&quot;\n      @blur=&quot;setStyle(&#39;&#39;)&quot;\n      @focus=&quot;setStyle(&#39;outline&#39;)&quot;\n      v-on=&quot;$listeners&quot;\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;ItemDateTime&#39;,\n  inject: [&#39;reportParent&#39;],\n  props: {\n    item: {\n      type: Object,\n      default () {\n        return {\n          format: &#39;&#39;,\n          valueFormat: &#39;&#39;,\n          hasTips: &#39;&#39;,\n          formTips: &#39;&#39;,\n          pickerOptions: {}\n        }\n      }\n    },\n    value: {\n      type: String,\n      default: &#39;&#39;\n    },\n    index: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      outline: &#39;&#39;\n    }\n  },\n  computed: {\n    tillNow () {\n      // 至今和无 与后台约定好的\n      return this.value.startsWith(&#39;2200&#39;) || this.value.startsWith(&#39;2100&#39;)\n      // return [&#39;2100-01-01&#39;, &#39;2200-02-02&#39;].includes(this.value)\n    },\n    placeholder () {\n      if (this.value.startsWith(&#39;2200&#39;)) {\n        return &#39;无&#39;\n      } else if (this.value.startsWith(&#39;2100&#39;)) {\n        return &#39;至今&#39;\n      } else {\n        return &#39;&#39;\n      }\n    },\n    datePickType () {\n      if (this.item.format === &#39;yyyy-MM&#39;) {\n        return &#39;month&#39;\n      } else if (this.item.format === &#39;yyyy-MM-dd&#39;) {\n        return &#39;date&#39;\n      } else if (this.item.format === &#39;yyyy-MM-dd HH:mm:ss&#39;) {\n        return &#39;datetime&#39;\n      } else {\n        return &#39;date&#39;\n      }\n    }\n  },\n  methods: {\n    reselect () {\n      // 清空选择的时间让picker定位到当前年月\n      this.clearValue()\n      this.$refs[&#39;dataPick&#39; + this.item.key].focus()\n    },\n    clearValue () {\n      // 如果有parentName则为子表单\n      if (Object.hasOwn(this.item, &#39;parentName&#39;)) {\n        this.reportParent.form[this.item.parentName][this.index][this.item.key] = &#39;&#39;\n      } else {\n        this.reportParent.form[this.item.key] = &#39;&#39;\n      }\n    },\n    // 给遮盖的input设置聚焦样式\n    setStyle (str) {\n      this.outline = str\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n.my_date_picker_prefix_icon {\n  display: none;\n}\n\n::v-deep.real_date_picker .el-input__inner {\n  padding: 0 15px; // 这个15是el-input组件默认的值\n}\n\n::v-deep.real_date_picker .el-input__prefix {\n  right: 5px;\n  left: unset;\n}\n\n.date_input_box {\n  position: relative;\n}\n\n.real_date_picker {\n  z-index: 100;\n}\n\n.mask_input {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 110;\n  border: none;\n}\n\n::v-deep.outline input {\n  border-color: #409efe;\n}\n\n&lt;/style&gt;\n</code></pre>\n"},{"fileName":"el-dialog拖拽.md","content":"<p>dialog组件</p>\n<pre><code>&lt;template&gt;\n        &lt;el-dialog :close-on-click-modal=&quot;false&quot;\n                    :close-on-press-escape=&quot;false&quot;\n                    v-bind=&quot;$attrs&quot;\n                    v-on=&quot;$listeners&quot;\n                    ref=&quot;dlg&quot;\n                    :modal=&quot;modal&quot;\n                    v-qz-dialog-drag\n                    :fullscreen=&quot;isFullscreen&quot;&gt;\n                &lt;div slot=&quot;title&quot; class=&quot;qzDialogTitle&quot; @dblclick=&quot;isFullscreen=!isFullscreen&quot;&gt;\n                    &lt;d2-icon-svg class=&quot;dialog-icon&quot; :name=&quot;icon&quot;&gt;&lt;/d2-icon-svg&gt;\n                    &lt;span style=&quot;line-height: 0.5&quot;&gt; {{title}} &lt;/span&gt;\n                    &lt;i @click=&quot;isFullscreen=true&quot; v-if=&quot;allowMaximize &amp;&amp; !isFullscreen&quot; class=&quot;fa fa-window-maximize qz-dialog-maximize&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                    &lt;i @click=&quot;isFullscreen=false&quot; v-if=&quot;allowMaximize &amp;&amp; isFullscreen&quot; class=&quot;fa fa-window-restore qz-dialog-maximize&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\n                &lt;/div&gt;\n                &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;\n                &lt;slot&gt;&lt;/slot&gt;\n            &lt;template slot=&quot;footer&quot;&gt;\n                &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;\n            &lt;/template&gt;\n        &lt;/el-dialog&gt;\n&lt;/template&gt;\n&lt;script&gt;\n\nexport default {\n  name: &#39;qz-dialog&#39;,\n  props: {\n    // 值\n    title: {\n      type: String,\n      required: false,\n      default: &#39;&#39;\n    },\n    allowMaximize: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    // 图标\n    icon: {\n      type: String,\n      required: false,\n      default: &#39;d2-admin&#39;\n    },\n    modal: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n  data () {\n    return {\n      isFullscreen: false\n    }\n  },\n  watch: {\n    isFullscreen (val) {\n      const dlg = this.$refs.dlg.$el.querySelector(&#39;.el-dialog&#39;)\n      if (val) {\n        this.dlgtop = getComputedStyle(dlg).top\n        this.dlgleft = getComputedStyle(dlg).left\n        dlg.style.top = &#39;0px&#39;\n        dlg.style.left = null\n      } else {\n        dlg.style.top = this.dlgtop\n        dlg.style.left = this.dlgleft\n      }\n      this.$emit(&#39;fullscreen&#39;, val)\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;css&quot;&gt;\n    .qz-dialog-maximize {\n        position: absolute;\n        right: 40px;\n        top: 15px;\n        font-size: 12px;\n        cursor: pointer;\n        color: #a2a5ad;\n    }\n&lt;/style&gt;\n</code></pre>\n<p>directive.js</p>\n<pre><code>/* eslint-disable */\nimport Vue from &#39;vue&#39;\n// v-dialogDrag: 弹窗拖拽属性\nVue.directive(&#39;qzDialogDrag&#39;, {\n  bind(el, binding, vnode, oldVnode) {\n    const dialogHeaderEl = el.querySelector(&#39;.el-dialog__header&#39;)\n    const dragDom = el.querySelector(&#39;.el-dialog&#39;)\n    /*  dragDom.onselectstart = function () {\n        return false\n      }*/\n    // dialogHeaderEl.style.cursor = &#39;move&#39;;\n    dialogHeaderEl.style.cssText += &#39;;cursor:move;&#39;\n    dragDom.style.cssText += &#39;;top:0px;&#39;\n\n    // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n    const sty = (function () {\n      if (window.document.currentStyle) {\n        return (dom, attr) =&gt; dom.currentStyle[attr]\n      } else {\n        return (dom, attr) =&gt; getComputedStyle(dom, false)[attr]\n      }\n    })()\n    dialogHeaderEl.onmousedown = (e) =&gt; {\n      // 鼠标按下，计算当前元素距离可视区的距离\n      const disX = e.clientX - dialogHeaderEl.offsetLeft\n      const disY = e.clientY - dialogHeaderEl.offsetTop\n\n      const screenWidth = document.body.clientWidth // body当前宽度\n      const screenHeight = document.documentElement.clientHeight // 可见区域高度(应为body高度，可某些环境下无法获取)\n\n      const dragDomWidth = dragDom.offsetWidth // 对话框宽度\n      const dragDomHeight = screenHeight &gt; dragDom.offsetHeight ? dragDom.offsetHeight : screenHeight// 对话框高度\n\n      const minDragDomLeft = dragDom.offsetLeft\n      const maxDragDomLeft = screenWidth - dragDom.offsetLeft - dragDomWidth\n\n      const minDragDomTop = dragDom.offsetTop\n      const maxDragDomTop = screenHeight - dragDom.offsetTop - dragDomHeight\n\n      // 获取到的值带px 正则匹配替换\n      let styL = sty(dragDom, &#39;left&#39;)\n      let styT = sty(dragDom, &#39;top&#39;)\n\n      // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n      if (styL.includes(&#39;%&#39;)) {\n        styL = +document.body.clientWidth * (+styL.replace(/\\%/g, &#39;&#39;) / 100)\n        styT = +document.body.clientHeight * (+styT.replace(/\\%/g, &#39;&#39;) / 100)\n      } else {\n        styL = +styL.replace(/\\px/g, &#39;&#39;)\n        styT = +styT.replace(/\\px/g, &#39;&#39;)\n      }\n\n      document.onselectstart = function () {\n        return false\n      }\n      document.onmousemove = function (e) {\n        // 通过事件委托，计算移动的距离\n        let left = e.clientX - disX\n        let top = e.clientY - disY\n\n        // 边界处理\n        if (-(left) &gt; minDragDomLeft) {\n          left = -(minDragDomLeft)\n        } else if (left &gt; maxDragDomLeft) {\n          left = maxDragDomLeft\n        }\n\n        if (-(top) &gt; minDragDomTop) {\n          top = -(minDragDomTop)\n        } else if (top &gt; maxDragDomTop) {\n          top = maxDragDomTop\n        }\n\n        // 移动当前元素\n        dragDom.style.cssText += `;left:${left + styL}px;top:${top + styT}px;`\n      }\n\n      document.onmouseup = function (e) {\n        document.onmousemove = null\n        document.onmouseup = null\n        document.onselectstart = null\n      }\n    }\n  }\n})\n</code></pre>\n"},{"fileName":"el-input修改.md","content":"<pre><code>.el-input &gt;&gt;&gt; .el-input__inner {\n  color: #fff;\n  background-color: transparent;\n  border: none;\n  background-image: url(~@/assets/img/bigscreen/selectbg.png);\n  background-size: 100% 100%;\n  background-position: center center;\n  background-repeat: no-repeat;\n  border-radius: 0px;\n}\n.el-input &gt;&gt;&gt; .el-input__suffix-inner {\n  color: #fff;\n}\n.el-input &gt;&gt;&gt; input::placeholder {\n  color: #fff;\n}\n.el-input &gt;&gt;&gt; .el-input__prefix {\n  color: #fff;\n}\n</code></pre>\n"},{"fileName":"el-input只能输入数字.md","content":"<pre><code class=\"language-js\">          &lt;el-input v-model=&quot;dataForm.startEntryStation&quot; oninput=&quot;value=value.replace(/^\\.+|[^\\d.]/g,&#39;&#39;)&quot; placeholder=&quot;起点入口桩号&quot; clearable&gt;&lt;/el-input&gt;\n</code></pre>\n"},{"fileName":"el-input输入框设置只能输入数字和小数点.md","content":"<p><code>οnkeyup=&quot;value=value.replace(/[^\\d]/g,&#39;&#39;)&quot;</code></p>\n<pre><code>          &lt;el-input v-model=&quot;&quot; oninput=&quot;value=value.replace(/[^\\d\\.]/g, &#39;&#39;).replace(/^\\./g, &#39;&#39;).replace(/\\.{2,}/g, &#39;.&#39;).replace(&#39;.&#39;, &#39;$#$&#39;).replace(/\\./g, &#39;&#39;).replace(&#39;$#$&#39;, &#39;.&#39;)&quot;&gt;&lt;/el-input&gt;\n</code></pre>\n"},{"fileName":"el-scrollbar 滚动条.md","content":"<blockquote>\n<p>看到这个组件是不是有点陌生，陌生就对了，因为它从来没有出现在 element 官网上（估计是性能问题），但好东西怎么能藏着掖着，来上效果图。</p>\n</blockquote>\n<pre><code>&lt;el-scrollbar&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;p v-for=&quot;item in 15&quot; :key=&quot;item&quot;&gt;欢迎使用 el-scrollbar {{item}}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/el-scrollbar&gt;\n\n&lt;style scoped&gt;\n.el-scrollbar {\n  border: 1px solid #ddd;\n  height: 200px;\n}\n.el-scrollbar ::v-deep  .el-scrollbar__wrap {\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n&lt;/style&gt;\n</code></pre>\n"},{"fileName":"el-table固定列后底部滚动条无法拖动.md","content":"<p>没有数据时fixed的区域无法触发滚动条\n/<em>解决固定列遮盖底部滚定条导致滚动条无法滚动的问题</em>/\n.el-table &gt;&gt;&gt; .el-table__body-wrapper {\n  z-index: 2;\n}</p>\n"},{"fileName":"el-table固定列后错位.md","content":"<p>解决固定列后错位的问题</p>\n<pre><code>this.$refs.table.doLayout()\n</code></pre>\n<p>doLayout 对 Table 进行重新布局。当 Table 或其祖先元素由隐藏切换为显示时，可能需要调用此方法</p>\n"},{"fileName":"el-table多级表头固定.md","content":"<p>需要固定的所有列添加fixed=&quot;left&quot; 表头宽度等于所有子级表头相加\n<img src=\"https://img2022.cnblogs.com/blog/2483371/202202/2483371-20220218162909379-736052367.png\" alt=\"\"></p>\n"},{"fileName":"el-table底部滚动条无法拖动.md","content":"<p>显示层级被覆盖</p>\n<pre><code>.el-table &gt;&gt;&gt; .el-table__body-wrapper {\n  z-index: 1;\n}\n</code></pre>\n"},{"fileName":"el-table拖动排序.md","content":"<h3>html</h3>\n<pre><code> &lt;el-table ref=&quot;multipleTable&quot; :data=&quot;tableData&quot; align=&quot;left&quot; border class=&quot;mytable&quot; row-key=&quot;id&quot;&gt;\n            &lt;el-table-column :index=&quot;indexMethod&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n            &lt;el-table-column label=&quot;字段名称&quot; prop=&quot;description&quot;&gt;&lt;/el-table-column&gt;\n            &lt;el-table-column align=&quot;center&quot; label=&quot;在表头显示&quot; prop=&quot;titleShowFlag&quot; width=&quot;210px&quot;&gt;\n                &lt;template slot-scope=&quot;scope&quot;&gt;\n                    &lt;el-switch v-model=&quot;scope.row.titleShowFlag&quot; active-color=&quot;#13ce66&quot;\n                               inactive-color=&quot;#dcdfe6&quot;&gt;&lt;/el-switch&gt;\n                &lt;/template&gt;\n            &lt;/el-table-column&gt;\n        &lt;/el-table&gt;\n</code></pre>\n<h3>js</h3>\n<pre><code>import Sortable from &#39;sortablejs&#39; // 引入插件\nmounted() {\n      this.$nextTick(() =&gt; {\n        this.rowDrop() // 行拖拽\n      })\n}\nmethods:{\n// 行拖拽\n    rowDrop () {\n      const tbody = document.querySelector(&#39;.el-table__body-wrapper tbody&#39;)\n      const _this = this\n      Sortable.create(tbody, {\n        onEnd ({ newIndex, oldIndex }) {\n          if (newIndex === oldIndex) return\n          _this.tableData.splice(newIndex, 0, _this.tableData.splice(oldIndex, 1)[0])\n          var newArray = _this.tableData.slice(0)\n          _this.tableData = []\n          _this.$nextTick(function () {\n            _this.tableData = newArray\n          })\n        }\n      })\n    }\n}\n</code></pre>\n"},{"fileName":"el-table表格合并.md","content":"<p>需要注意的是objectSpanMethod方法里外层只能包含一个 if else</p>\n<pre><code> // 表格合并 实现相同属性名的行合并\n    mergeTable () {\n      this.spanArr = [] // 清空数组，否则刷新出错\n      for (var i = 0; i &lt; this.dataList.length; i++) {\n        if (i === 0) {\n          this.spanArr.push(1)\n          this.pos = 0\n        } else {\n          // 判断当前元素与上一个元素是否相同\n          if (this.dataList[i].positionName === this.dataList[i - 1].positionName) {\n            this.spanArr[this.pos] += 1\n            this.spanArr.push(0)\n          } else {\n            this.spanArr.push(1)\n            this.pos = i\n          }\n        }\n      }\n    },\n    objectSpanMethod ({ row, column, rowIndex, columnIndex }) {\n      // 如果spanArr下标===x 就合并\n    if (rowIndex !== this.length) {\n      if (columnIndex === 0 || columnIndex === 5) {\n        const _row = this.spanArr[rowIndex]\n        const _col = _row &gt; 0 ? 1 : 0\n        return {\n          rowspan: _row,\n          colspan: _col\n        }\n      }\n  //合并指定的列\n   } else {\n         if (columnIndex === 0) {\n           return [1, 4]\n\n        } else if (columnIndex === 1 || columnIndex === 2 || columnIndex === 3) {\n           return [0, 0]\n         }\n       }\n    }\n</code></pre>\n"},{"fileName":"el-tabs禁止点击.md","content":"<pre><code>.myTabs &gt;&gt;&gt; .el-tabs__item {\n  pointer-events: none !important;\n}\n</code></pre>\n"},{"fileName":"el-tree自定义树节点.md","content":"<h1>el-tree自定义树节点</h1>\n<h2>需求：</h2>\n<p>在选择字典值的弹窗中，如果没有满足用户的值，可以让用户自定义，经理要求在二级之后的节点添加一个其他节点，点击其他时由用户输入</p>\n<h2>实现：</h2>\n<p>通过el-tre的<code>render-content</code>属性自定义节点渲染内容，此处使用jsx，<a href=\"https://github.com/vuejs/jsx-vue2#installation\">细节语法点我</a></p>\n<p>详细代码：</p>\n<pre><code class=\"language-js\">    // 渲染树节点\n    renderContent (h, { node, data, store }) {\n      let custom = null\n      if (data.other) {\n        // 绑定click事件时需通过阻止冒泡阻止触发树节点nodeClick\n        custom = (\n          &lt;span style={{ display: data.showInput ? &#39;inline-block&#39; : &#39;none&#39; }}&gt;\n            &lt;el-input\n              size=&#39;mini&#39;\n              style={{ width: &#39;200px&#39;, marginRight: &#39;10px&#39; }}\n              vModel={this.customTreeItem}\n            /&gt;\n            &lt;el-button\n              size=&#39;mini&#39;\n              type=&#39;text&#39;\n              vOn:click_stop={() =&gt; this.cancel(data)}\n            &gt;\n              取消\n            &lt;/el-button&gt;\n            &lt;el-button\n              size=&#39;mini&#39;\n              type=&#39;text&#39;\n              vOn:click_stop={() =&gt; this.apply(data, node)}\n            &gt;\n              确定\n            &lt;/el-button&gt;\n          &lt;/span&gt;\n        )\n      }\n      return (\n        &lt;span class=&#39;custom-tree-node&#39;&gt;\n          &lt;span&gt;{node.label}&lt;/span&gt;\n          {custom}\n        &lt;/span&gt;\n      )\n    },\n</code></pre>\n<p>需要注意的一点是 因为自定义内容中添加了button，点击是会冒泡触发树节点的<code>node-click</code>事件，导致重复调用点击的后续逻辑</p>\n<p>动态绑定属性与在template中不太一样，通过<code>style={{width:10px}}</code>这种形式绑定</p>\n<p>注意<code>vModel</code>,<code>vOn</code>以及阻止冒泡<code>click_stop</code>、阻止默认事件<code>click_prevent</code>写法\t\t</p>\n"},{"fileName":"el-tree默认选中并高亮.md","content":"<pre><code>        &lt;el-tree ref=&quot;myTree&quot; :accordion=&quot;true&quot; :data=&quot;treeData&quot; :default-expanded-keys=&quot;[defaultTreeKeys]&quot; :current-node-key=&quot;defaultTreeKeys&quot; children=&quot;bridgePositionName&quot; node-key=&quot;code&quot; :props=&quot;defaultProps&quot; @node-click=&quot;handleNodeClick&quot; highlight-current&gt;&lt;/el-tree&gt;\ndata () {\n    return {\n treeData: [],\n      defaultTreeKeys: &#39;&#39;,\n      defaultProps: {\n        children: &#39;children&#39;,\n        label: &#39;name&#39;\n      },\n    }\n}\n\n\n this.defaultTreeKeys = data[0].children[0].children[0].code\n this.$nextTick(() =&gt; {\n    this.$refs.myTree.setCurrentKey(this.defaultTreeKeys)\n })\n</code></pre>\n"},{"fileName":"el-upload拖动排序.md","content":"<pre><code> 1 &lt;template&gt;\n 2   &lt;!-- 省略其他配置 --&gt;\n 3   &lt;el-upload ref=&quot;upload&quot; :file-list.sync=&quot;fileList&quot;&gt;&lt;/el-upload&gt;\n 4 &lt;/template&gt;\n 5 &lt;script&gt;\n 6 import Sortable from &#39;sortablejs&#39;;\n 7 export default {\n 8   data() {\n 9     return {\n10       fileList: []\n11     };\n12   },\n13   mounted() {\n14     this.initDragSort();\n15   },\n16   methods: {\n17     initDragSort() {\n18       // 支持拖拽排序\n19       const el = this.$refs.upload.$el.querySelectorAll(&#39;.el-upload-list&#39;)[0];\n20       Sortable.create(el, {\n21         onEnd: ({ oldIndex, newIndex }) =&gt; {\n22           // 交换位置\n23           const arr = this.fileList;\n24           const page = arr[oldIndex];\n25           arr.splice(oldIndex, 1);\n26           arr.splice(newIndex, 0, page);\n27         }\n28       });\n29     }\n30   }\n31 };\n32 &lt;/script&gt;\n</code></pre>\n"},{"fileName":"electron渲染进程与主进程之间通信.md","content":"<h4>首先main.js中通过preload进行预加载脚本 __dirname字符串指向当前正在执行的脚本的路径</h4>\n<pre><code>const { app, BrowserWindow } = require(&#39;electron&#39;);//引入electron\nconst path = require(&#39;path&#39;);\nlet win;\nlet windowConfig = {\n  width: 300,\n  height: 600,\n  minWidth: 300,\n  webPreferences: {\n    nodeIntegration: true,// 是否集成 Nodejs\n    preload: path.join(__dirname,&#39;preload.js&#39;)\n  },\n  transparent: true,\n  frame: false,\n  // alwaysOnTop: true,\n  resizable: true,//可否缩放\n  movable: true//可否移动\n};//窗口配置程序运行窗口的大小\nfunction createWindow() {\n  win = new BrowserWindow(windowConfig);//创建一个窗口\n  win.loadURL(`file://${__dirname}/web/dist/index.html`);//在窗口内要展示的内容index.html 就是打包生成的index.html\n  win.webContents.openDevTools();  //开启调试工具\n  win.on(&#39;close&#39;, () =&gt; {\n    //回收BrowserWindow对象\n    win = null;\n  });\n  win.show()\n\n}\napp.on(&#39;ready&#39;, createWindow);\napp.on(&#39;window-all-closed&#39;, () =&gt; {\n  app.quit();\n});\n\napp.on(&#39;activate&#39;, () =&gt; {\n  if (win == null) {\n    createWindow();\n  }\n});\n\nconst ipcMain = require(&#39;electron&#39;).ipcMain;\nipcMain.on(&#39;closeApp&#39;, function () {\n  app.quit();\n});\nipcMain.on(&#39;window-min&#39;, function () {\n  win.minimize();\n});\n</code></pre>\n<h4>preload.js</h4>\n<pre><code>const { contextBridge, ipcRenderer } = require(&#39;electron&#39;)\n\ncontextBridge.exposeInMainWorld(&#39;electronAPI&#39;, {\n    minApp: () =&gt; ipcRenderer.send(&#39;window-min&#39;),\n    closeApp:() =&gt; ipcRenderer.send(&#39;closeApp&#39;)\n})\n</code></pre>\n<h4>然后页面中通过<code>window.electronAPI</code>访问定义的方法即可</h4>\n"},{"fileName":"element下拉树.md","content":"<pre><code>&lt;el-form-item label=&quot;任务：&quot;&gt;\n        &lt;el-popover ref=&quot;taskListPopover&quot; placement=&quot;bottom-start&quot; trigger=&quot;hover&quot;&gt;\n          &lt;el-input placeholder=&quot;输入关键字进行过滤&quot; size=&quot;small&quot; clearable v-model=&quot;taskfilterText&quot;&gt;&lt;/el-input&gt;\n          &lt;el-tree\n            class=&quot;task&quot;\n            style=&quot;max-height: 27vh;overflow: auto;margin-top: 10px;&quot;\n            show-checkbox\n            :data=&quot;taskTreeList&quot;\n            :props=&quot;taskListTreeProps&quot;\n            :node-key=&quot;taskNodeKey&quot;\n            ref=&quot;taskListTree&quot;\n            :check-strictly=&quot;false&quot;\n            @check-change=&quot;taskListTreeCurrentChangeHandle&quot;\n            :highlight-current=&quot;true&quot;\n            :expand-on-click-node=&quot;false&quot;\n            :default-expand-all=&quot;false&quot;\n            :check-on-click-node=&quot;false&quot;\n            :filter-node-method=&quot;taskfilterNode&quot;\n          &gt;&lt;/el-tree&gt;\n        &lt;/el-popover&gt;\n        &lt;el-input v-model=&quot;taskListStr&quot; :title=&quot;taskListStr&quot; v-popover:taskListPopover :readonly=&quot;true&quot; placeholder=&quot;请选择&quot;&gt;\n          &lt;i v-show=&quot;taskListStr&quot; class=&quot;el-input__icon el-icon-circle-close el-input__clear&quot; slot=&quot;suffix&quot; @click.stop=&quot;clearTaskTreeData&quot;&gt;&lt;/i&gt;\n        &lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n</code></pre>\n<pre><code>data () {\n    return {\n      taskfilterText: &#39;&#39;//树形下拉框====,  \n      taskTreeList: [],\n      taskListTreeProps: {\n        label: &#39;label&#39;,\n        children: &#39;children&#39;,\n      },     \n      taskNodeKey: &#39;value&#39;,     \n      taskListStr: &#39;&#39;,    \n    }\n  },\n</code></pre>\n<pre><code> watch: {\n    taskfilterText (val) {\n      this.$refs.taskListTree.filter(val)\n    }\n  },\n</code></pre>\n<pre><code>    // 获取下拉列表\n    getTaskList () {\n      api.getTaskTree({}).then((data) =&gt; {\n      })\n    },\n  //下拉树处理\n    taskfilterNode (value, data) {\n      if (!value) return true\n      return data.label.indexOf(value) !== -1\n    },    \n  //清空查询条件\n    clearTaskTreeData () {\n      this.$refs.taskListTree.setCheckedKeys([])\n      this.taskListStr = &#39;&#39;\n    },\n  // 树选中\n    taskListTreeCurrentChangeHandle () {\n      this.taskListStr = this.$refs.taskListTree\n        .getCheckedNodes()\n        .map((p) =&gt; {\n          return p.label\n        })\n        .join(&#39;,&#39;)\n      this.dataForm.subTaskId = this.$refs.taskListTree.getCheckedKeys().join(&#39;,&#39;)\n    },\n</code></pre>\n<pre><code>//一级不显示复选框\n.task\n  &gt;&gt;&gt; .el-tree-node\n  &gt; .el-tree-node__content\n  &gt; .el-checkbox\n  .el-checkbox__inner {\n  display: none;\n}\n\n.task\n  &gt;&gt;&gt; .el-tree-node\n  .el-tree-node__children\n  .el-checkbox\n  .el-checkbox__inner {\n  display: inline-block !important;\n}\n</code></pre>\n"},{"fileName":"element表格表单.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202205/2483371-20220511110800913-1756692138.png\" alt=\"\"></p>\n<pre><code>&lt;!-- 报名信息填报 --&gt;\n&lt;template&gt;\n  &lt;div class=&quot;container-box&quot;&gt;\n    &lt;el-form ref=&quot;form&quot; :rules=&quot;rules&quot; show-message :inline-message=&quot;true&quot; :model=&quot;form&quot; label-width=&quot;250px&quot; class=&quot;form&quot; size=&quot;mini&quot;&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;姓名:&quot; prop=&quot;name&quot;&gt;\n            &lt;el-input v-model=&quot;form.name&quot; placeholder=&quot;请输入姓名&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;证件类型:&quot;&gt;\n            &lt;el-select v-model=&quot;form.paperWorkType&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option v-for=&quot;item in paperWorkOptions&quot; :key=&quot;item.value&quot; :label=&quot;item.label&quot; :value=&quot;item.value&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;证件号码：&quot;&gt;\n            &lt;el-input v-model=&quot;form.idCard&quot; placeholder=&quot;请输入证件号码&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;性别：&quot;&gt;\n            &lt;el-select v-model=&quot;form.sex&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option key=&quot;0&quot; label=&quot;女&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n              &lt;el-option key=&quot;1&quot; label=&quot;男&quot; value=&quot;1&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;出生日期：&quot;&gt;\n            &lt;el-date-picker v-model=&quot;form.birthDay&quot; value-format=&quot;yyyy-mm-dd&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot; :picker-options=&quot;pickerOptions&quot; @change=&quot;birthDayChoose&quot;&gt;&lt;/el-date-picker&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;年龄：&quot;&gt;\n            &lt;el-input v-model=&quot;form.age&quot; disabled&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;报考级别：&quot;&gt;\n            &lt;el-select v-model=&quot;form.applyLevel&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option key=&quot;0&quot; label=&quot;初级&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n              &lt;el-option key=&quot;1&quot; label=&quot;中级&quot; value=&quot;1&quot;&gt;&lt;/el-option&gt;\n              &lt;el-option key=&quot;2&quot; label=&quot;高级&quot; value=&quot;1&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;报考资格：&quot;&gt;\n            &lt;el-select v-model=&quot;form.applyQualifications&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option key=&quot;0&quot; label=&quot;软件设计师&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;报考科目：&quot;&gt;\n            &lt;el-select v-model=&quot;form.applySubject&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option key=&quot;0&quot; label=&quot;基础知识应用技术&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;现有职称（资格）：&quot;&gt;\n            &lt;el-input v-model=&quot;form.jobTitle&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;24&quot;&gt;\n          &lt;el-form-item label=&quot;取得职称（资格）时间：&quot;&gt;\n            &lt;el-date-picker v-model=&quot;form.jobTitleTime&quot; value-format=&quot;yyyy-mm-dd&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot; :picker-options=&quot;pickerOptions&quot;&gt;&lt;/el-date-picker&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;24&quot;&gt;\n          &lt;el-form-item label=&quot;在职情况：&quot;&gt;\n            &lt;el-input v-model=&quot;form.onWork&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;工作单位：&quot;&gt;\n            &lt;el-input v-model=&quot;form.workUnit&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;参加工作时间：&quot;&gt;\n            &lt;el-date-picker v-model=&quot;form.onWorkTime&quot; value-format=&quot;yyyy-mm-dd&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot; :picker-options=&quot;pickerOptions&quot;&gt;&lt;/el-date-picker&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;24&quot;&gt;\n          &lt;el-form-item label=&quot;本专业工作时间：&quot;&gt;\n            &lt;el-date-picker v-model=&quot;form.majorWorkTime&quot; value-format=&quot;yyyy-mm-dd&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot; :picker-options=&quot;pickerOptions&quot;&gt;&lt;/el-date-picker&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;所在学校：&quot;&gt;\n            &lt;el-input v-model=&quot;form.currentSchool&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;所学专业：&quot;&gt;\n            &lt;el-input v-model=&quot;form.discipline&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;毕业时间：&quot;&gt;\n            &lt;el-date-picker v-model=&quot;form.graduationTime&quot; value-format=&quot;yyyy-mm-dd&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot; :picker-options=&quot;pickerOptions&quot;&gt;&lt;/el-date-picker&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;专业名称：&quot;&gt;\n            &lt;el-input v-model=&quot;form.disciplineName&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;在学/已有学历：&quot;&gt;\n            &lt;el-select v-model=&quot;form.education&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option key=&quot;0&quot; label=&quot;本科&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;学制：&quot;&gt;\n            &lt;el-select v-model=&quot;form.educationalType&quot; placeholder=&quot;请选择&quot;&gt;\n              &lt;el-option key=&quot;0&quot; label=&quot;四年&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;24&quot;&gt;\n          &lt;el-form-item label=&quot;学位：&quot;&gt;\n            &lt;el-input v-model=&quot;form.educationalLevel&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;24&quot;&gt;\n          &lt;el-form-item label=&quot;通讯地址：&quot;&gt;\n            &lt;el-input v-model=&quot;form.address&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;邮箱：&quot;&gt;\n            &lt;el-input v-model=&quot;form.email&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;手机号码：&quot;&gt;\n            &lt;el-input v-model=&quot;form.phone&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;固定电话：&quot;&gt;\n            &lt;el-input v-model=&quot;form.fixedTelephone&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;12&quot;&gt;\n          &lt;el-form-item label=&quot;邮政编码：&quot;&gt;\n            &lt;el-input v-model=&quot;form.zipCode&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n    &lt;/el-form&gt;\n    &lt;el-row type=&quot;flex&quot; justify=&quot;center&quot;&gt;\n      &lt;button class=&quot;submitButton btn&quot; @click=&quot;submit()&quot;&gt;提交&lt;/button&gt;\n      &lt;button class=&quot;resetButton btn&quot; @click=&quot;reset()&quot;&gt;重置&lt;/button&gt;\n    &lt;/el-row&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;informationFill&#39;,\n  components: {\n  },\n  data () {\n    return {\n      form: {\n        name: &#39;&#39;,//姓名\n        paperWorkType: &#39;&#39;,//证件类型\n        idCard: &#39;&#39;,//证件号码\n        birthDay: &#39;&#39;,//出生日期\n        age: &#39;&#39;,//年龄\n        applyLevel: &#39;&#39;,//报考级别\n        applyQualifications: &#39;&#39;,//报考资格\n        applySubject: &#39;&#39;,//报考科目\n        jobTitle: &#39;&#39;,//现有职称（资格）\n        jobTitleTime: &#39;&#39;,//取得职称（资格）时间\n        onWork: &#39;&#39;,//在职情况\n        workUnit: &#39;&#39;,//工作单位\n        onWorkTime: &#39;&#39;,//参加工作时间\n        majorWorkTime: &#39;&#39;,//本专业工作时间\n        currentSchool: &#39;&#39;,//所在学校\n        discipline: &#39;&#39;,//所学专业\n        graduationTime: &#39;&#39;,//毕业时间\n        disciplineName: &#39;&#39;,//专业名称\n        education: &#39;&#39;,//在学/已有学历\n        educationalType: &#39;&#39;,//学制\n        educationalLevel: &#39;&#39;,//学位\n        address: &#39;&#39;,//通讯地址\n        email: &#39;&#39;,//邮箱\n        phone: &#39;&#39;,//手机号\n        fixedTelephone: &#39;&#39;,//固定电话\n        zipCode: &#39;&#39;,//邮政编码\n      },\n      paperWorkOptions: [{\n        value: &#39;1&#39;,\n        label: &#39;居民身份证/社保卡&#39;\n      },],\n      pickerOptions: {\n        disabledDate (time) {\n          // 设置禁用状态，参数为当前日期，要求返回 Boolean\n          return time.getTime() &gt; Date.now()\n        }\n      },\n      rules: {\n        name: [{ required: true, message: &#39;请输入姓名&#39;, trigger: &#39;blur&#39; }]\n\n      }\n\n    }\n  },\n  props: {},\n  computed: {},\n  watch: {},\n  created () { },\n  mounted () { },\n  methods: {\n    birthDayChoose (val) {\n      if (val) {\n        this.form.age = Number(new Date().getFullYear()) - Number(val.substring(0, 4))\n      } else {\n        this.form.age = &#39;&#39;\n      }\n    },\n    submit () {\n      this.$refs.form.validate((valid) =&gt; {\n        if (valid) {\n          this.$message({\n            type: &#39;success&#39;,\n            message: &#39;提交成功!&#39;\n          })\n        } else {\n          console.log(&#39;error submit!!&#39;)\n          return false\n        }\n      })\n\n    },\n    reset () {\n      this.$confirm(&#39;此操作将会重置所有信息, 是否继续?&#39;, &#39;提示&#39;, {\n        confirmButtonText: &#39;确定&#39;,\n        cancelButtonText: &#39;取消&#39;,\n        type: &#39;warning&#39;\n      }).then(() =&gt; {\n        this.$message({\n          type: &#39;success&#39;,\n          message: &#39;重置成功!&#39;\n        })\n        this.$refs.form.resetFields()\n      }).catch(() =&gt; {\n        this.$message({\n          type: &#39;info&#39;,\n          message: &#39;已取消重置&#39;\n        })\n      })\n    }\n\n  },\n}\n\n&lt;/script&gt;\n\n&lt;style lang=&#39;scss&#39; scoped&gt;\n.btn {\n  margin-top: 30px;\n  width: 120px;\n  height: 40px;\n  border-radius: 24px;\n  font-size: 16px;\n  color: #fff;\n  border: none;\n  line-height: 40px;\n  cursor: pointer;\n}\n.submitButton {\n  background-color: #00d2a4;\n  margin-right: 10px;\n}\n.resetButton {\n  background-color: #feb434;\n  margin-left: 10px;\n}\n::v-deep.container-box .form {\n  border-left: 1px solid #ccc;\n  border-right: 1px solid #ccc;\n  border-top: 1px solid #ccc;\n  border-bottom: 1px solid #ccc;\n}\n//去除组件下边距，设置为0\n::v-deep.container-box .el-form-item {\n  margin: 0;\n  height: 40px;\n  border-right: 1px solid #ccc;\n  border-top: 1px solid #ccc;\n}\n::v-deep.container-box .el-input {\n  width: 200px;\n}\n::v-deep.container-box .el-input__inner {\n  border: #fff;\n}\n//label文字居中，背景色灰色，文字颜色黑色，右边框浅灰色\n::v-deep.container-box .el-form-item__label {\n  //   background: #f0f0f0;\n  color: black;\n  height: 40px;\n  line-height: 40px;\n  border-right: 1px solid #ccc;\n}\n::v-deep.container-box .el-form-item__content {\n  height: 40px;\n  line-height: 40px;\n}\n//改变input框中文字 居中，在禁用时背景色使用白色，文字颜色黑色\n::v-deep.container-box .el-input.is-disabled .el-input__inner {\n  background: #fff;\n  color: black;\n}\n// //改变input框中文字 居中，在不禁用时背景色使用白色，文字颜色黑色\n// ::v-deep.container-box .el-input .el-input__inner {\n//   text-align: center;\n//   background: #fff;\n//   color: black;\n// }\n&lt;/style&gt;\n</code></pre>\n"},{"fileName":"element走马灯样式修改.md","content":"<pre><code>  .el-carousel {\n    height: 100% !important;\n  }\n  .el-carousel &gt;&gt;&gt; .el-carousel__container {\n    height: 100% !important;\n  }\n  .el-carousel &gt;&gt;&gt; .el-carousel__button {\n    background-color: #004f80;\n    width: 15px;\n    height: 4px;\n    border-radius: 3px;\n  }\n  .el-carousel &gt;&gt;&gt; .el-carousel__arrow {\n    width: 26px !important;\n    height: 26px !important;\n  }\n  .el-carousel &gt;&gt;&gt; .el-carousel__arrow--left {\n    left: 0px !important;\n  }\n  .el-carousel &gt;&gt;&gt; .el-carousel__arrow--right {\n    right: 0px !important;\n  }\n  .el-carousel &gt;&gt;&gt; .is-active {\n    .el-carousel__button {\n      background-color: #35b1ff;\n    }\n  }\n</code></pre>\n"},{"fileName":"grid实现自适应布局demo.md","content":"<ul>\n<li>grid-area 属性可以用于为网格项分配名称。然后，可以通过网格容器的 grid-template-areas 属性引用命名的网格项目</li>\n<li>grid-template-areas 属性在网格布局中规定区域</li>\n<li>grid-gap 属性定义网格布局中行与列之间间隙的尺寸</li>\n<li>grid-template-columns 属性规定网格布局中的列数（和宽度）</li>\n</ul>\n<p>采用grid加栅格布局的方式，方便pc和移动端的转换，同时每个块之间的间距为10，添加上对应的样式，同时给每个区块加上对应的名字、颜色和高度（模拟内容的填充），小屏幕上不显示slider的内容, 当屏幕的尺寸大于500的时候，展示出来slider的内容,当屏幕的尺寸大于800的时候，改变整个布局方式</p>\n<p>其实最本质的内容就是对不同的屏幕加载不同的css样式，你也可以使用媒体查询的方式加载css样式</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (min-device-width: 500px)&quot; href=&quot;tinyScreen.css&quot; /&gt;\n</code></pre>\n<p>或者@import的方式</p>\n<pre><code>@import url(&quot;tinyScreen.css&quot;) (min-width: 500px);\n</code></pre>\n<p><img src=\"https://img2023.cnblogs.com/blog/2483371/202306/2483371-20230614160012991-400872074.png\" alt=\"\">\n<img src=\"https://img2023.cnblogs.com/blog/2483371/202306/2483371-20230614160031526-1572883667.png\" alt=\"\">\n<img src=\"https://img2023.cnblogs.com/blog/2483371/202306/2483371-20230614160043092-168936583.png\" alt=\"\"></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        .container {\n            display: grid;\n            grid-template-columns: repeat(12, 1fr);\n            grid-gap: 10px;\n            grid-template-areas: &quot;h h h h h h h h h h h h&quot;\n                &quot;c c c c c c c c c c c c&quot;\n                &quot;f f f f f f f f f f f f&quot;;\n        }\n\n        .header {\n            grid-area: h;\n            background: rgb(236, 167, 77);\n            height: 60px;\n        }\n\n        .footer {\n            grid-area: f;\n            background: rgb(39, 200, 147);\n            height: 160px;\n        }\n\n        .content {\n            grid-area: c;\n            background: rgb(30, 59, 30);\n            height: 500px;\n        }\n\n        .slider {\n            display: none;\n            background: rgb(44, 125, 231);\n            height: 60px;\n        }\n    &lt;/style&gt;\n    &lt;style&gt;\n        @media screen and (min-width: 500px) {\n            .container {\n                grid-template-areas:\n                    &quot;h h h h h h s s s s s s&quot;\n                    &quot;c c c c c c c c c c c c&quot;\n                    &quot;f f f f f f f f f f f f&quot;;\n            }\n\n            .slider {\n                display: block;\n                grid-area: s;\n            }\n        }\n\n        @media screen and (min-width: 800px) {\n            .container {\n                grid-template-areas:\n                    &quot;h h h h h h h h h h h h&quot;\n                    &quot;s s s s c c c c c c c c&quot;\n                    &quot;f f f f f f f f f f f f&quot;;\n            }\n\n            .slider {\n                display: block;\n                grid-area: s;\n                height: 500px;\n            }\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;header&quot;&gt;Header&lt;/div&gt;\n        &lt;div class=&quot;slider&quot;&gt;Slider&lt;/div&gt;\n        &lt;div class=&quot;content&quot;&gt;Content&lt;/div&gt;\n        &lt;div class=&quot;footer&quot;&gt;Footer&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n"},{"fileName":"img图片显示比例.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202209/2483371-20220922140737136-324525154.png\" alt=\"\"></p>\n"},{"fileName":"index.html在webpack打包时动态生成index模板.md","content":"<p>通过<code>&lt;%= BASE_URL %&gt;</code>包裹环境变量</p>\n<p>通过<code>&lt;% if (process.env.NODE_ENV === &#39;production&#39; ) { %&gt;  &lt;% } %&gt;</code>包裹条件判断</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;/&gt;\n  &lt;meta content=&quot;IE=edge,chrome=1&quot; http-equiv=&quot;X-UA-Compatible&quot;/&gt;\n  &lt;meta content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot; name=&quot;viewport&quot;/&gt;\n  &lt;link href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot; rel=&quot;icon&quot;/&gt;\n  &lt;title&gt;&lt;%= VUE_APP_TITLE %&gt;&lt;/title&gt;\n  &lt;!--  用于动态控制打印方向--&gt;\n  &lt;style id=&quot;printStyle&quot;&gt;\n    @media print {\n      @page {\n        size: portrait//portrait 纵向 landscape 横向\n      }\n    }\n  &lt;/style&gt;\n  &lt;% if (process.env.NODE_ENV === &#39;production&#39; ) { %&gt;\n  &lt;script src=&quot;config.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    document.title = window.SITE_CONFIG.appTitle\n  &lt;/script&gt;\n  &lt;script&gt;\n    // 生产环境下引入百度统计\n    var _hmt = _hmt || [];\n    (function () {\n      var hm = document.createElement(&quot;script&quot;);\n      hm.src = &quot;https://hm.baidu.com/hm.js?f3469347be30afe72d0f0c0169c6ddb6&amp;quot&quot;\n      var s = document.getElementsByTagName(&quot;script&quot;)[0];\n      s.parentNode.insertBefore(hm, s);\n    })();\n  &lt;/script&gt;\n  &lt;% } %&gt;\n  &lt;!--    其他环境读取环境变量--&gt;\n  &lt;% if (process.env.NODE_ENV !== &#39;production&#39; ) { %&gt;\n  &lt;script&gt;\n    window.SITE_CONFIG = {};\n    window.SITE_CONFIG[&#39;appTitle&#39;] = &#39;&lt;%= process.env.VUE_APP_TITLE %&gt;&#39;;\n    window.SITE_CONFIG[&#39;version&#39;] = &#39;&lt;%= process.env.VUE_APP_VERSION %&gt;&#39;;\n    window.SITE_CONFIG[&#39;apiURL&#39;] = &#39;&lt;%= process.env.VUE_APP_API %&gt;&#39;;\n    window.SITE_CONFIG[&#39;websocketURL&#39;] = &#39;&lt;%= process.env.VUE_APP_API_WEBSOCKET %&gt;&#39;\n    window.SITE_CONFIG[&#39;VUE_APP_API_REPORT&#39;] = &#39;&lt;%= process.env.VUE_APP_API_REPORT %&gt;&#39;\n  &lt;/script&gt;\n  &lt;% } %&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\n  // session实现多标签页共享\n  ;(function () {\n    // 判断当前sessionStorage中是否存在数据\n    if (!sessionStorage.length) {\n      // 随便存储一个数据触发storage监听\n      localStorage.setItem(&#39;getSessionStorageData&#39;, Date.now())\n    }\n    window.addEventListener(&#39;storage&#39;, function (event) {\n      if (event.key === &#39;getSessionStorageData&#39;) {\n        // 通过localStorage暂时共享数据\n        localStorage.setItem(&#39;sessionStorageData&#39;, JSON.stringify(window.sessionStorage))\n        localStorage.removeItem(&#39;sessionStorageData&#39;)\n      }\n      if (event.key === &#39;sessionStorageData&#39; &amp;&amp; !sessionStorage.length) {\n        const data = JSON.parse(event.newValue)\n        for (key in data) {\n          window.sessionStorage.setItem(key, data[key])\n        }\n      }\n      if (event.key === &#39;clearSessionStorageData&#39;) {\n        sessionStorage.clear()\n        location.reload()\n      }\n      if (event.key === &#39;loginSessionStorageData&#39;) {\n        const data = JSON.parse(event.newValue)\n        for (key in data) {\n          window.sessionStorage.setItem(key, data[key])\n        }\n        location.reload()\n      }\n    })\n  })()\n  // 浏览器url不包含hash值 基于hash模式的vueRouter在hash值改变后不会影响url,页面不会进行刷新\n  // 监听hash值改变后重新刷新浏览器\n  window.onhashchange = function () {\n    if (window.location.hash.includes(&#39;guidePage&#39;)) {\n      window.location.reload()\n    }\n  }\n&lt;/script&gt;\n&lt;noscript&gt;\n  &lt;strong&gt;We&#39;re sorry but &lt;%= webpackConfig.name %&gt; doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;\n&lt;/noscript&gt;\n&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;!-- built files will be auto injected --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"fileName":"javascript 判断比较当天24小时的时间大小.md","content":"<pre><code>function CompareDate(t1,t2)\n{\nvar date = new Date();\nvar a = t1.split(&quot;:&quot;);\nvar b = t2.split(&quot;:&quot;);\nreturn date.setHours(a[0],a[1]) &gt; date.setHours(b[0],b[1]);\n}\n\nconsole.log(CompareDate(&quot;11:16&quot;,&quot;11:15&quot;) )\n</code></pre>\n"},{"fileName":"js static静态类方法.md","content":"<p>static 类方法是在类本身上定义的。</p>\n<blockquote>\n<p>静态方法调用直接在类上进行，不能在类的实例上调用。</p>\n</blockquote>\n<pre><code>class Car {\n  constructor(name) {\n    this.name = name;\n  }\n  static hello() {\n    return &quot;Hello!!&quot;;\n  }\n}\n\nlet myCar = new Car(&quot;Ford&quot;);\n\n// 您可以在 Car 类上调用 &#39;hello()&#39; ：\ndocument.getElementById(&quot;demo&quot;).innerHTML = Car.hello();\n\n// 但不能在 Car 对象上调用：\n// document.getElementById(&quot;demo&quot;).innerHTML = myCar.hello();\n// 此举将引发错误。\n</code></pre>\n<blockquote>\n<p>具有静态成员的类，可以被子类化。</p>\n</blockquote>\n<pre><code>class Tripple {\n  static tripple(n = 1) {\n    return n * 3;\n  }\n}\n\n\nclass BiggerTripple extends Tripple {\n  static tripple(n) {\n    return super.tripple(n) * super.tripple(n);\n  }\n}\n\n\nconsole.log(Tripple.tripple());// 3\nconsole.log(Tripple.tripple(6));// 18\n</code></pre>\n"},{"fileName":"js 深拷贝函数.md","content":"<pre><code>function clone(obj) {\n    if (typeof obj == &quot;object&quot;) {\n        if (Array.isArray(obj)) {\n            let arr = [];\n            for (let item of obj) {\n                arr.push(Object.assign(clone(item)));\n            }\n            return arr;\n        } else if (obj == null) {\n            return null;\n        } else {\n            let obj1 = {};\n            for (let index in obj) {\n                obj1[index] = clone((obj[index]));\n            }\n            return obj1;\n        }\n    } else if (typeof obj == &quot;function&quot;) {\n        return Object.assign(obj);\n    } else if (typeof obj == undefined) {\n        return undefined;\n    } else {\n        return obj;\n    }\n}\n\nexport default clone\n</code></pre>\n<pre><code>//自定义一个深拷贝递归函数\n function deepClone(obj){\n        let clone = Array.isArray(s)?[]:{};\n        for (const key in obj) {\n            let item = obj[key];\n            if(item){\n                //实现方法的克隆\n                if(item instanceof Function){\n                    clone[key] = new Function(&#39;return &#39;+item.toString())()\n                }\n                else if(item instanceof Object ){\n                    clone[key] = deepClone(item);\n                }\n                else {\n                    clone[key] = item;\n                }\n            }\n        }\n        return clone;\n    }\n</code></pre>\n<pre><code>// 可遍历的类型\nconst mapTag = &#39;[object Map]&#39;;\nconst setTag = &#39;[object Set]&#39;;\nconst arrayTag = &#39;[object Array]&#39;;\nconst objectTag = &#39;[object Object]&#39;;\n\n// 不可遍历类型\nconst symbolTag = &#39;[object Symbol]&#39;;\nconst regexpTag = &#39;[object RegExp]&#39;;\nconst funcTag = &#39;[object Function]&#39;;\n\n// 将可遍历类型存在一个数组里\nconst canForArr = [&#39;[object Map]&#39;, &#39;[object Set]&#39;,\n                   &#39;[object Array]&#39;, &#39;[object Object]&#39;]\n\n// 将不可遍历类型存在一个数组\nconst noForArr = [&#39;[object Symbol]&#39;, &#39;[object RegExp]&#39;, &#39;[object Function]&#39;]\n\n// 判断类型的函数\nfunction checkType(target) {\n    return Object.prototype.toString.call(target)\n}\n\n// 判断引用类型的temp\nfunction checkTemp(target) {\n    const c = target.constructor\n    return new c()\n}\n// 拷贝Function的方法\nfunction cloneFunction(func) {\n    const bodyReg = /(?&lt;={)(.|\\n)+(?=})/m;\n    const paramReg = /(?&lt;=\\().+(?=\\)\\s+{)/;\n    const funcString = func.toString();\n    if (func.prototype) {\n        const param = paramReg.exec(funcString);\n        const body = bodyReg.exec(funcString);\n        if (body) {\n            if (param) {\n                const paramArr = param[0].split(&#39;,&#39;);\n                return new Function(...paramArr, body[0]);\n            } else {\n                return new Function(body[0]);\n            }\n        } else {\n            return null;\n        }\n    } else {\n        return eval(funcString);\n    }\n}\n\n// 拷贝Symbol的方法\nfunction cloneSymbol(targe) {\n    return Object(Symbol.prototype.valueOf.call(targe));\n}\n\n// 拷贝RegExp的方法\nfunction cloneReg(targe) {\n    const reFlags = /\\w*$/;\n    const result = new targe.constructor(targe.source, reFlags.exec(targe));\n    result.lastIndex = targe.lastIndex;\n    return result;\n}\n\nfunction deepClone(target, map = new Map()) {\n\n    // 获取类型\n    const type = checkType(target)\n\n\n    // 基本数据类型直接返回\n    if (!canForArr.concat(noForArr).includes(type)) return target\n\n\n    // 判断Function，RegExp，Symbol\n  +  if (type === funcTag) return cloneFunction(target)\n  +  if (type === regexpTag) return cloneReg(target)\n  +  if (type === symbolTag) return cloneSymbol(target)\n\n    // 引用数据类型特殊处理\n    const temp = checkTemp(target)\n\n    if (map.get(target)) {\n        // 已存在则直接返回\n        return map.get(target)\n    }\n    // 不存在则第一次设置\n    map.set(target, temp)\n\n    // 处理Map类型\n    if (type === mapTag) {\n        target.forEach((value, key) =&gt; {\n            temp.set(key, deepClone(value, map))\n        })\n\n        return temp\n    }\n\n    // 处理Set类型\n    if (type === setTag) {\n        target.forEach(value =&gt; {\n            temp.add(deepClone(value, map))\n        })\n\n        return temp\n    }\n\n    // 处理数据和对象\n    for (const key in target) {\n        // 递归\n        temp[key] = deepClone(target[key], map)\n    }\n    return temp\n}\n\n\nconst a = {\n    name: &#39;sunshine_lin&#39;,\n    age: 23,\n    hobbies: { sports: &#39;篮球&#39;, tv: &#39;雍正王朝&#39; },\n    works: [&#39;2020&#39;, &#39;2021&#39;],\n    map: new Map([[&#39;haha&#39;, 111], [&#39;xixi&#39;, 222]]),\n    set: new Set([1, 2, 3]),\n    func: (name, age) =&gt; `${name}今年${age}岁啦！！！`,\n    sym: Symbol(123),\n    reg: new RegExp(/haha/g),\n}\na.key = a // 环引用\n\nconst b = deepClone(a)\nconsole.log(b)\n// {\n//     name: &#39;sunshine_lin&#39;,\n//     age: 23,\n//     hobbies: { sports: &#39;篮球&#39;, tv: &#39;雍正王朝&#39; },\n//     works: [ &#39;2020&#39;, &#39;2021&#39; ],\n//     map: Map { &#39;haha&#39; =&gt; 111, &#39;xixi&#39; =&gt; 222 },\n//     set: Set { 1, 2, 3 },\n//     func: [Function],\n//     sym: [Symbol: Symbol(123)],\n//     reg: /haha/g,\n//     key: [Circular]\n// }\nconsole.log(b === a) // false\n</code></pre>\n"},{"fileName":"js判断是否是空对象.md","content":"<blockquote>\n<p>1.将json对象转化为json字符串，再判断该字符串是否为&quot;{}&quot;</p>\n</blockquote>\n<pre><code>var data = {};\nvar b = (JSON.stringify(data) == &quot;{}&quot;);\nalert(b);//true\n</code></pre>\n<blockquote>\n<p>2.for in 循环判断</p>\n</blockquote>\n<pre><code>var obj = {};\nvar b = function() {\n    for(var key in obj) {\n        return false;\n    }\n    return true;\n}\nalert(b());//true\n</code></pre>\n<blockquote>\n<p>3.Object.getOwnPropertyNames()方法</p>\n</blockquote>\n<pre><code>var data = {};\nvar arr = Object.getOwnPropertyNames(data);\nalert(arr.length == 0);//true\n</code></pre>\n<blockquote>\n<p>4.使用ES6的Object.keys()方法</p>\n</blockquote>\n<pre><code>var data = {};\nvar arr = Object.keys(data);\nalert(arr.length == 0);//true\n</code></pre>\n"},{"fileName":"js合并数组.md","content":"<p>1、concat()\na=[];\na.concat([1,2,3,4]);\n 此时a还是为[]，返回的结果为合并后的值。因为concat()方法不会改变原来的数组，只会返回合并后新的数组，所以如果a想要得到合并的值，就必须将返回的值赋值给a：\na = a.concat([1,2,3,4]);</p>\n<p>2.、for循环 + push() 或者用ES6的扩展运算符…\nfor( var t in [1,2,3,4]){\n     a.push(t);\n}\n或者\na.push(...[1,2,3,4]);</p>\n<p>3、push.apply()\nb=[];\nb.push.apply(b,[1,2,3,4]);\npush()和push.apply()的区别：\n如：\na.push([1,2,3,4]);\nb.push.apply(b,[1,2,3,4]);\n结果为：\na：\n[Array(4)]\n    0: (4) [1, 2, 3, 4]\n    length: 1\n此时b：\n[1, 2, 3, 4]\n也就是说a[0]与b相同。\n当然也可以用扩展运算符：</p>\n<p>a.push(...[1,2,3,4]); \n推荐使用Array.prototype.push.apply()，因为这个方法的效率更高，但其实它与push.apply()方法的本质是一样的。</p>\n<p>原文链接：<a href=\"https://blog.csdn.net/qq_42314621/java/article/details/89483811\">https://blog.csdn.net/qq_42314621/java/article/details/89483811</a></p>\n"},{"fileName":"js图片URL转base64.md","content":"<pre><code>export default function imgUrlToBase64 (url, callback, outputFormat) {\n  var canvas = document.createElement(&#39;CANVAS&#39;)\n  var ctx = canvas.getContext(&#39;2d&#39;)\n  var img = new Image()\n  img.crossOrigin = &#39;Anonymous&#39;\n  img.onload = function () {\n    canvas.height = img.height\n    canvas.width = img.width\n    ctx.drawImage(img, 0, 0)\n    var dataURL = canvas.toDataURL(outputFormat || &#39;image/png&#39;)\n    //回调函数传递转换完成的base64编码\n    callback.call(this, dataURL)\n    canvas = null\n  }\n  img.src = url\n}\n</code></pre>\n"},{"fileName":"js小技巧.md","content":"<h3>1. 声明和初始化数组</h3>\n<pre><code>const array = Array(5).fill(&#39;&#39;); \n// 输出\n(5) [&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\n\nconst matrix = Array(5).fill(0).map(()=&gt;Array(5).fill(0)); \n// 输出\n(5) [Array(5), Array(5), Array(5), Array(5), Array(5)]\n0: (5) [0, 0, 0, 0, 0]\n1: (5) [0, 0, 0, 0, 0]\n2: (5) [0, 0, 0, 0, 0]\n3: (5) [0, 0, 0, 0, 0]\n4: (5) [0, 0, 0, 0, 0]\nlength: 5\n</code></pre>\n<h3>2. 找出总和、最小值和最大值</h3>\n<pre><code>const array  = [5,4,7,8,9,2];\n</code></pre>\n<ul>\n<li>和</li>\n</ul>\n<pre><code>array.reduce((a,b) =&gt; a&gt;b?a:b);\n// 输出: 9\n</code></pre>\n<ul>\n<li>最大值</li>\n</ul>\n<pre><code>array.reduce((a,b) =&gt; a&gt;b?a:b);\n// 输出: 9\n</code></pre>\n<ul>\n<li>最小值</li>\n</ul>\n<pre><code>array.reduce((a,b) =&gt; a&lt;b?a:b);\n// 输出: 2\n</code></pre>\n<h3>3. 对字符串、数字或对象数组进行排序</h3>\n<ul>\n<li>排序字符串数组</li>\n</ul>\n<pre><code>const stringArr = [&quot;Joe&quot;, &quot;Kapil&quot;, &quot;Steve&quot;, &quot;Musk&quot;]\nstringArr.sort();\n// 输出\n(4) [&quot;Joe&quot;, &quot;Kapil&quot;, &quot;Musk&quot;, &quot;Steve&quot;]\n\nstringArr.reverse();\n// 输出\n(4) [&quot;Steve&quot;, &quot;Musk&quot;, &quot;Kapil&quot;, &quot;Joe&quot;]\n</code></pre>\n<ul>\n<li>排序数字数组</li>\n</ul>\n<pre><code>const array  = [40, 100, 1, 5, 25, 10];\narray.sort((a,b) =&gt; a-b);\n// 输出\n(6) [1, 5, 10, 25, 40, 100]\n\narray.sort((a,b) =&gt; b-a);\n// 输出\n(6) [100, 40, 25, 10, 5, 1]\n</code></pre>\n<ul>\n<li>对象数组排序</li>\n</ul>\n<pre><code>const objectArr = [     { first_name: &#39;Lazslo&#39;, last_name: &#39;Jamf&#39;     },    { first_name: &#39;Pig&#39;,    last_name: &#39;Bodine&#39;   },    { first_name: &#39;Pirate&#39;, last_name: &#39;Prentice&#39; }];\nobjectArr.sort((a, b) =&gt; a.last_name.localeCompare(b.last_name));\n// 输出\n(3) [{…}, {…}, {…}]\n0: {first_name: &quot;Pig&quot;, last_name: &quot;Bodine&quot;}\n1: {first_name: &quot;Lazslo&quot;, last_name: &quot;Jamf&quot;}\n2: {first_name: &quot;Pirate&quot;, last_name: &quot;Prentice&quot;}\nlength: 3\n</code></pre>\n<h3>4. 从数组中过滤出虚假值</h3>\n<pre><code>const array = [3, 0, 6, 7, &#39;&#39;, false];\narray.filter(Boolean);\n// 输出\n(3) [3, 6, 7]\n</code></pre>\n<h3>5. 对各种条件使用逻辑运算符</h3>\n<pre><code>function doSomething(arg1){ \n    arg1 = arg1 || 10; \n// 如果尚未设置，则将 arg1 设置为 10 作为默认值\nreturn arg1;\n}\n\nlet foo = 10;  \nfoo === 10 &amp;&amp; doSomething(); \n// is the same thing as if (foo == 10) then doSomething();\n// 输出: 10\n\nfoo === 5 || doSomething();\n// is the same thing as if (foo != 5) then doSomething();\n// 输出: 10\n</code></pre>\n<h3>6. 删除重复值</h3>\n<pre><code>const array  = [5,4,7,8,9,2,7,5];\narray.filter((item,idx,arr) =&gt; arr.indexOf(item) === idx);\n// or\nconst nonUnique = [...new Set(array)];\n// 输出: [5, 4, 7, 8, 9, 2]\n</code></pre>\n<h3>7. 创建计数器对象或映射</h3>\n<pre><code>let string = &#39;kapilalipak&#39;;\n\nconst table={}; \nfor(let char of string) {\n  table[char]=table[char]+1 || 1;\n}\n// 输出\n{k: 2, a: 3, p: 2, i: 2, l: 2}\n</code></pre>\n<pre><code>const countMap = new Map();\n  for (let i = 0; i &lt; string.length; i++) {\n    if (countMap.has(string[i])) {\n      countMap.set(string[i], countMap.get(string[i]) + 1);\n    } else {\n      countMap.set(string[i], 1);\n    }\n  }\n// 输出\nMap(5) {&quot;k&quot; =&gt; 2, &quot;a&quot; =&gt; 3, &quot;p&quot; =&gt; 2, &quot;i&quot; =&gt; 2, &quot;l&quot; =&gt; 2}\n</code></pre>\n<h3>8. 可选链</h3>\n<pre><code>undefined。\nconst user = {\n  employee: {\n    name: &quot;Kapil&quot;\n  }\n};\nuser.employee?.name;\n// 输出: &quot;Kapil&quot;\nuser.employ?.name;\n// 输出: undefined\nuser.employ.name\n// 输出: VM21616:1 Uncaught TypeError: Cannot read property &#39;name&#39; of undefined\n</code></pre>\n<h3>9. 打乱数组</h3>\n<pre><code>const list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlist.sort(() =&gt; {\n    return Math.random() - 0.5;\n});\n// 输出\n(9) [2, 5, 1, 6, 9, 8, 4, 3, 7]\n// Call it again\n(9) [4, 1, 7, 5, 3, 8, 2, 9, 6]\n</code></pre>\n<h3>10. 空合并</h3>\n<pre><code>const foo = null ?? &#39;my school&#39;;\n// 输出: &quot;my school&quot;\n\nconst baz = 0 ?? 42;\n// 输出: 0\n</code></pre>\n<h3>11. 使用解构简单交换两值</h3>\n<pre><code>let a = 5;\nlet b = 8;\n[a,b] = [b,a]\n\n[a,b]\n// 输出\n(2) [8, 5]\n</code></pre>\n"},{"fileName":"js能打印出对象访问属性却是空.md","content":"<p>打印对象都是引用的，后续有更新展开后是更新的值，要看及时值应该JSON.stringify转为字符串，打印json字符串</p>\n"},{"fileName":"js获取获取明日日期.md","content":"<pre><code>    // 获取明日日期\n    GetDateStr(AddDayCount) {\n      var dd = new Date();\n      dd.setDate(dd.getDate() + AddDayCount); //获取AddDayCount天后的日期\n      var y = dd.getFullYear();\n      var m = dd.getMonth() + 1; //获取当前月份的日期\n      var d = dd.getDate();\n      return y + &quot;/&quot; + m + &quot;/&quot; + d;\n    },\n</code></pre>\n"},{"fileName":"node模块查找策略.md","content":"<h1>Node模块查找策略</h1>\n<p>先附链接<a href=\"https://nodejs.org/api/modules.html#modules_all_together\">Node模块解析策略</a></p>\n<ul>\n<li><p>当你使用</p>\n<ul>\n<li><p><code>import * as foo from &#39;foo&#39;</code>，将会按如下顺序查找模块：</p>\n</li>\n<li><p><code>./node_modules/foo</code></p>\n</li>\n<li><p><code>../node_modules/foo</code></p>\n</li>\n<li><p><code>../../node_modules/foo</code></p>\n</li>\n<li><p>直到系统的根目录</p>\n</li>\n</ul>\n</li>\n<li><p>当你使用<code>import * as foo from &#39;something/foo&#39;</code>，将会按照如下顺序查找内容</p>\n<ul>\n<li><code>./node_modules/something/foo</code></li>\n<li><code>../node_modules/something/foo</code></li>\n<li><code>../../node_modules/something/foo</code></li>\n<li>直到系统的根目录</li>\n</ul>\n</li>\n</ul>\n"},{"fileName":"postcss.config.js.md","content":"<pre><code>// https://github.com/michael-ciniawsky/postcss-load-config\n\nmodule.exports = {\n  &#39;plugins&#39;: {\n    // to edit target browsers: use &quot;browserslist&quot; field in package.json\n    &#39;autoprefixer&#39;: {},\n    &#39;postcss-px-to-viewport&#39;: {\n      unitToConvert: &#39;px&#39;, // 需要转换的单位，默认为&quot;px&quot;\n      viewportWidth: 1920, // 设计稿的视口宽度\n      unitPrecision: 5, // 单位转换后保留的精度\n      propList: [&#39;*&#39;], // 能转化为vw的属性列表\n      viewportUnit: &#39;vw&#39;, // 希望使用的视口单位\n      fontViewportUnit: &#39;vw&#39;, // 字体使用的视口单位\n      selectorBlackList: [], // 需要忽略的CSS选择器，不会转为视口单位，使用原有的px等单位。\n      minPixelValue: 1, // 设置最小的转换数值，如果为1的话，只有大于1的值会被转换\n      mediaQuery: false, // 媒体查询里的单位是否需要转换单位\n      replace: true, //  是否直接更换属性值，而不添加备用属性\n      exclude: undefined, // 忽略某些文件夹下的文件或特定文件，例如 &#39;node_modules&#39; 下的文件\n      include: undefined, // 如果设置了include，那将只有匹配到的文件才会被转换\n      landscape: false, // 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)\n      landscapeUnit: &#39;vw&#39;, // 横屏时使用的单位\n      landscapeWidth: 1920 // 横屏时使用的视口宽度\n    }\n  }\n}\n</code></pre>\n"},{"fileName":"process.argv.md","content":"<p>process 对象是一个全局变量，提供当前 Node.js 进程的有关信息，以及控制当前 Node.js 进程。 因为是全局变量，所以无需使用 require()。</p>\n<p>process.argv 属性返回一个数组，这个数组包含了启动Node.js进程时的命令行参数，</p>\n<p>其中：</p>\n<p>数组的第一个元素process.argv[0]——返回启动Node.js进程的可执行文件所在的绝对路径</p>\n<p>第二个元素process.argv[1]——为当前执行的JavaScript文件路径</p>\n<p>剩余的元素为其他命令行参数</p>\n<p>例如：</p>\n<p>输入命令：node scripts/build.js &quot;web-runtime-cjs,web-server-renderer&quot;\n  结果：</p>\n<p>console.log(process.argv[0])   // 打印 D:\\nodeJs\\node.exe\nconsole.log(process.argv[1])   // 打印 E:\\Study_document\\vue-resource\\vue-dev\\scripts\\build.js\nconsole.log(process.argv[2])   // 打印 web-runtime-cjs,web-server-renderer</p>\n"},{"fileName":"provideinject响应性问题.md","content":"<h1>provide和inject使用以及响应性问题</h1>\n<pre><code class=\"language-js\">  data() {},\n  provide() {\n    return {\n      reportParent: this\n    }\n  },\n</code></pre>\n<pre><code class=\"language-js\">  data() {},\n  inject: [&#39;reportParent&#39;],\n</code></pre>\n<blockquote>\n<p>provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的</p>\n</blockquote>\n<p>以上引用自官网</p>\n<p>可能之所以这样设计，是为了避免数据的混乱。就如同props不能被子组件直接修改一样。</p>\n<p>从代码角度讲</p>\n<pre><code class=\"language-js\"> data() {\n    return {\n        foo: &#39;foo&#39;,\n        bar: &#39;bar&#39;\n        baz: {hello: &#39;world&#39;}\n    }\n  },\n  provide() {\n    return {\n      foo: this.foo,\n      bar: this.bar,\n    }\n  },\n</code></pre>\n<p>当我们以如上的形式书写代码的时候，其实相当于对this.foo和this.baz做了一层浅拷贝，固当子组件inject的时候已经丢失了<a href=\"https://so.csdn.net/so/search?q=%E5%93%8D%E5%BA%94%E5%BC%8F&spm=1001.2101.3001.7020\">响应式</a>功能了。但由于仅仅是浅拷贝，所以响应式对象的属性仍旧是响应式的。</p>\n<pre><code class=\"language-js\">  // 父组件\n  provide() {\n    return {\n      baz: this.baz,\n    }\n  },\n  // 子组件baz.hello仍旧是响应式的。\n  inject: [&#39;baz&#39;]\n</code></pre>\n<h2>方法一</h2>\n<p>通过函数返回响应式的数据,接收的组件直接调用该函数或者通过computed映射</p>\n<pre><code class=\"language-js\">provide() {\n    return {\n        baz:() =&gt; this.baz\n    }\n}\n</code></pre>\n<pre><code class=\"language-js\">inject:[&#39;baz&#39;],\n  \ncomputed:{\n    _baz() {\n        return this.baz()\n    }\n}\n</code></pre>\n<h2>方法二</h2>\n<p>把需要传递的参数定义成一个对象</p>\n<p>官方解释：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，<strong>如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。</strong></p>\n"},{"fileName":"quill-editor预览样式处理.md","content":"<h3>页面需要渲染富文本时遇到了返回的富文本带有class类名v-html无法渲染样式的问题</h3>\n<p>富文本编辑器使用的是Quill Editor 最终单独引入Quill Editor的预览样式解决问题</p>\n<p>引入snow.css，在需要展示的页面中用如下元素包裹即可</p>\n<pre><code>&lt;div class=&quot;ql-container ql-snow&quot;&gt;\n    &lt;div class=&quot;ql-editor&quot; v-html=&quot;content&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>打印的时候无法打印全部内容，只能打印第一页。解决方法为将样式内.ql-container 、.ql-clipboard、.ql-editor 等无关文本的样式注释掉即可</p>\n<pre><code>/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n .ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0px;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container.ql-disabled .ql-editor ul[data-checked] &gt; li::before {\n  pointer-events: none;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor &gt; * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor ul,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol,\n.ql-editor ul {\n  padding-left: 1.5em;\n}\n.ql-editor ol &gt; li,\n.ql-editor ul &gt; li {\n  list-style-type: none;\n}\n.ql-editor ul &gt; li::before {\n  content: &#39;\\2022&#39;;\n}\n.ql-editor ul[data-checked=true],\n.ql-editor ul[data-checked=false] {\n  pointer-events: none;\n}\n.ql-editor ul[data-checked=true] &gt; li *,\n.ql-editor ul[data-checked=false] &gt; li * {\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] &gt; li::before,\n.ql-editor ul[data-checked=false] &gt; li::before {\n  color: #777;\n  cursor: pointer;\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] &gt; li::before {\n  content: &#39;\\2611&#39;;\n}\n.ql-editor ul[data-checked=false] &gt; li::before {\n  content: &#39;\\2610&#39;;\n}\n.ql-editor li::before {\n  display: inline-block;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li:not(.ql-direction-rtl)::before {\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n}\n.ql-editor li.ql-direction-rtl::before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n}\n.ql-editor ol li:not(.ql-direction-rtl),\n.ql-editor ul li:not(.ql-direction-rtl) {\n  padding-left: 1.5em;\n}\n.ql-editor ol li.ql-direction-rtl,\n.ql-editor ul li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor ol li {\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  counter-increment: list-0;\n}\n.ql-editor ol li:before {\n  content: counter(list-0, decimal) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor ol li.ql-indent-1:before {\n  content: counter(list-1, lower-alpha) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor ol li.ql-indent-2:before {\n  content: counter(list-2, lower-roman) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor ol li.ql-indent-3:before {\n  content: counter(list-3, decimal) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor ol li.ql-indent-4:before {\n  content: counter(list-4, lower-alpha) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor ol li.ql-indent-5:before {\n  content: counter(list-5, lower-roman) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-reset: list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor ol li.ql-indent-6:before {\n  content: counter(list-6, decimal) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-reset: list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor ol li.ql-indent-7:before {\n  content: counter(list-7, lower-alpha) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-reset: list-8 list-9;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor ol li.ql-indent-8:before {\n  content: counter(list-8, lower-roman) &#39;. &#39;;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-reset: list-9;\n}\n.ql-editor ol li.ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor ol li.ql-indent-9:before {\n  content: counter(list-9, decimal) &#39;. &#39;;\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n/* .ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n} */\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0,0,0,0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n.ql-snow.ql-toolbar:after,\n.ql-snow .ql-toolbar:after {\n  clear: both;\n  content: &#39;&#39;;\n  display: table;\n}\n.ql-snow.ql-toolbar button,\n.ql-snow .ql-toolbar button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: inline-block;\n  float: left;\n  height: 24px;\n  padding: 3px 5px;\n  width: 28px;\n}\n.ql-snow.ql-toolbar button svg,\n.ql-snow .ql-toolbar button svg {\n  float: left;\n  height: 100%;\n}\n.ql-snow.ql-toolbar button:active:hover,\n.ql-snow .ql-toolbar button:active:hover {\n  outline: none;\n}\n.ql-snow.ql-toolbar input.ql-image[type=file],\n.ql-snow .ql-toolbar input.ql-image[type=file] {\n  display: none;\n}\n.ql-snow.ql-toolbar button:hover,\n.ql-snow .ql-toolbar button:hover,\n.ql-snow.ql-toolbar button:focus,\n.ql-snow .ql-toolbar button:focus,\n.ql-snow.ql-toolbar button.ql-active,\n.ql-snow .ql-toolbar button.ql-active,\n.ql-snow.ql-toolbar .ql-picker-label:hover,\n.ql-snow .ql-toolbar .ql-picker-label:hover,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active,\n.ql-snow.ql-toolbar .ql-picker-item:hover,\n.ql-snow .ql-toolbar .ql-picker-item:hover,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected {\n  color: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {\n  fill: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-stroke,\n.ql-snow .ql-toolbar button:hover .ql-stroke,\n.ql-snow.ql-toolbar button:focus .ql-stroke,\n.ql-snow .ql-toolbar button:focus .ql-stroke,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow.ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow .ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {\n  stroke: #06c;\n}\n@media (pointer: coarse) {\n  .ql-snow.ql-toolbar button:hover:not(.ql-active),\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) {\n    color: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {\n    fill: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {\n    stroke: #444;\n  }\n}\n.ql-snow {\n  box-sizing: border-box;\n}\n.ql-snow * {\n  box-sizing: border-box;\n}\n.ql-snow .ql-hidden {\n  display: none;\n}\n.ql-snow .ql-out-bottom,\n.ql-snow .ql-out-top {\n  visibility: hidden;\n}\n.ql-snow .ql-tooltip {\n  position: absolute;\n  transform: translateY(10px);\n}\n.ql-snow .ql-tooltip a {\n  cursor: pointer;\n  text-decoration: none;\n}\n.ql-snow .ql-tooltip.ql-flip {\n  transform: translateY(-10px);\n}\n.ql-snow .ql-formats {\n  display: inline-block;\n  vertical-align: middle;\n}\n.ql-snow .ql-formats:after {\n  clear: both;\n  content: &#39;&#39;;\n  display: table;\n}\n.ql-snow .ql-stroke {\n  fill: none;\n  stroke: #444;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 2;\n}\n.ql-snow .ql-stroke-miter {\n  fill: none;\n  stroke: #444;\n  stroke-miterlimit: 10;\n  stroke-width: 2;\n}\n.ql-snow .ql-fill,\n.ql-snow .ql-stroke.ql-fill {\n  fill: #444;\n}\n.ql-snow .ql-empty {\n  fill: none;\n}\n.ql-snow .ql-even {\n  fill-rule: evenodd;\n}\n.ql-snow .ql-thin,\n.ql-snow .ql-stroke.ql-thin {\n  stroke-width: 1;\n}\n.ql-snow .ql-transparent {\n  opacity: 0.4;\n}\n.ql-snow .ql-direction svg:last-child {\n  display: none;\n}\n.ql-snow .ql-direction.ql-active svg:last-child {\n  display: inline;\n}\n.ql-snow .ql-direction.ql-active svg:first-child {\n  display: none;\n}\n.ql-snow .ql-editor h1 {\n  font-size: 2em;\n}\n.ql-snow .ql-editor h2 {\n  font-size: 1.5em;\n}\n.ql-snow .ql-editor h3 {\n  font-size: 1.17em;\n}\n.ql-snow .ql-editor h4 {\n  font-size: 1em;\n}\n.ql-snow .ql-editor h5 {\n  font-size: 0.83em;\n}\n.ql-snow .ql-editor h6 {\n  font-size: 0.67em;\n}\n.ql-snow .ql-editor a {\n  text-decoration: underline;\n}\n.ql-snow .ql-editor blockquote {\n  border-left: 4px solid #ccc;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding-left: 16px;\n}\n.ql-snow .ql-editor code,\n.ql-snow .ql-editor pre {\n  background-color: #f0f0f0;\n  border-radius: 3px;\n}\n.ql-snow .ql-editor pre {\n  white-space: pre-wrap;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding: 5px 10px;\n}\n.ql-snow .ql-editor code {\n  font-size: 85%;\n  padding: 2px 4px;\n}\n.ql-snow .ql-editor pre.ql-syntax {\n  background-color: #23241f;\n  color: #f8f8f2;\n  overflow: visible;\n}\n.ql-snow .ql-editor img {\n  max-width: 100%;\n}\n.ql-snow .ql-picker {\n  color: #444;\n  display: inline-block;\n  float: left;\n  font-size: 14px;\n  font-weight: 500;\n  height: 24px;\n  position: relative;\n  vertical-align: middle;\n}\n.ql-snow .ql-picker-label {\n  cursor: pointer;\n  display: inline-block;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 2px;\n  position: relative;\n  width: 100%;\n}\n.ql-snow .ql-picker-label::before {\n  display: inline-block;\n  line-height: 22px;\n}\n.ql-snow .ql-picker-options {\n  background-color: #fff;\n  display: none;\n  min-width: 100%;\n  padding: 4px 8px;\n  position: absolute;\n  white-space: nowrap;\n}\n.ql-snow .ql-picker-options .ql-picker-item {\n  cursor: pointer;\n  display: block;\n  padding-bottom: 5px;\n  padding-top: 5px;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  color: #ccc;\n  z-index: 2;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {\n  fill: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {\n  stroke: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  display: block;\n  margin-top: -1px;\n  top: 100%;\n  z-index: 1;\n}\n.ql-snow .ql-color-picker,\n.ql-snow .ql-icon-picker {\n  width: 28px;\n}\n.ql-snow .ql-color-picker .ql-picker-label,\n.ql-snow .ql-icon-picker .ql-picker-label {\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-label svg,\n.ql-snow .ql-icon-picker .ql-picker-label svg {\n  right: 4px;\n}\n.ql-snow .ql-icon-picker .ql-picker-options {\n  padding: 4px 0px;\n}\n.ql-snow .ql-icon-picker .ql-picker-item {\n  height: 24px;\n  width: 24px;\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-options {\n  padding: 3px 5px;\n  width: 152px;\n}\n.ql-snow .ql-color-picker .ql-picker-item {\n  border: 1px solid transparent;\n  float: left;\n  height: 16px;\n  margin: 2px;\n  padding: 0px;\n  width: 16px;\n}\n.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {\n  position: absolute;\n  margin-top: -9px;\n  right: 0;\n  top: 50%;\n  width: 18px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=&#39;&#39;])::before,\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=&#39;&#39;])::before,\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=&#39;&#39;])::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=&#39;&#39;])::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=&#39;&#39;])::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=&#39;&#39;])::before {\n  content: attr(data-label);\n}\n.ql-snow .ql-picker.ql-header {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item::before {\n  content: &#39;标题&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=&quot;1&quot;]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;1&quot;]::before {\n  content: &#39;标题 1&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=&quot;2&quot;]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;2&quot;]::before {\n  content: &#39;标题 2&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=&quot;3&quot;]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;3&quot;]::before {\n  content: &#39;标题 3&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=&quot;4&quot;]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;4&quot;]::before {\n  content: &#39;标题 4&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=&quot;5&quot;]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;5&quot;]::before {\n  content: &#39;标题 5&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=&quot;6&quot;]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;6&quot;]::before {\n  content: &#39;标题 6&#39;;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;1&quot;]::before {\n  font-size: 2em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;2&quot;]::before {\n  font-size: 1.5em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;3&quot;]::before {\n  font-size: 1.17em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;4&quot;]::before {\n  font-size: 1em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;5&quot;]::before {\n  font-size: 0.83em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=&quot;6&quot;]::before {\n  font-size: 0.67em;\n}\n.ql-snow .ql-picker.ql-font {\n  width: 150px;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item::before {\n  content: &#39;Sans Serif&#39;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\n  content: &#39;Serif&#39;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\n  content: &#39;Monospace&#39;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-snow .ql-picker.ql-size {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  content: &#39;Normal&#39;;\n}\n/* .ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\n  content: &#39;Small&#39;;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\n  content: &#39;Large&#39;;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\n  content: &#39;Huge&#39;;\n} */\n/* .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\n  font-size: 10px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\n  font-size: 18px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\n  font-size: 32px;\n} */\n/* 字体设置 */\n.ql-editor .ql-size-12 {\n  font-size: 12px;\n}\n.ql-editor .ql-size-16 {\n  font-size: 16px;\n}\n.ql-editor .ql-size-18 {\n  font-size: 18px;\n}\n.ql-editor .ql-size-20 {\n  font-size: 20px;\n}\n.ql-editor .ql-size-24 {\n  font-size: 24px;\n}\n.ql-editor .ql-size-28 {\n  font-size: 28px;\n}\n.ql-editor .ql-size-32 {\n  font-size: 32px;\n}\n.ql-editor .ql-size-36 {\n  font-size: 36px;\n}\n\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  content: &#39;14PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;12&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;12&quot;]::before {\n  content: &#39;12PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;16&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;16&quot;]::before {\n  content: &#39;16PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;18&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;18&quot;]::before {\n  content: &#39;18PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;20&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;20&quot;]::before {\n  content: &#39;20PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;24&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;24&quot;]::before {\n  content: &#39;24PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;28&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;28&quot;]::before {\n  content: &#39;28PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;32&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;32&quot;]::before {\n  content: &#39;32PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=&quot;36&quot;]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;36&quot;]::before {\n  content: &#39;36PX&#39;;\n  /* display: flex;\n  align-items: center; */\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  font-size: 14px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;12&quot;]::before {\n  font-size: 12px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;16&quot;]::before {\n  font-size: 16px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;18&quot;]::before {\n  font-size: 18px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;20&quot;]::before {\n  font-size: 20px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;24&quot;]::before {\n  font-size: 24px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;28&quot;]::before {\n  font-size: 28px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;32&quot;]::before {\n  font-size: 32px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=&quot;36&quot;]::before {\n  font-size: 36px;\n}\n/* 结束 */\n.ql-snow .ql-color-picker.ql-background .ql-picker-item {\n  background-color: #fff;\n}\n.ql-snow .ql-color-picker.ql-color .ql-picker-item {\n  background-color: #000;\n}\n.ql-toolbar.ql-snow {\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  font-family: &#39;Helvetica Neue&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;\n  padding: 8px;\n}\n.ql-toolbar.ql-snow .ql-formats {\n  margin-right: 15px;\n}\n.ql-toolbar.ql-snow .ql-picker-label {\n  border: 1px solid #eee;\n  display: flex;\n}\n.ql-toolbar.ql-snow .ql-picker-options {\n  border: 1px solid transparent;\n  box-shadow: rgba(0,0,0,0.2) 0 2px 8px;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  border-color: #ccc;\n  /* height: 1.5625rem;\n  overflow: auto; */\n}\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {\n  border-color: #000;\n}\n.ql-toolbar.ql-snow + .ql-container.ql-snow {\n  border-top: 0px;\n}\n.ql-snow .ql-tooltip {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  box-shadow: 0px 0px 5px #ddd;\n  color: #444;\n  padding: 5px 12px;\n  white-space: nowrap;\n}\n.ql-snow .ql-tooltip::before {\n  content: &quot;Visit URL:&quot;;\n  line-height: 26px;\n  margin-right: 8px;\n}\n.ql-snow .ql-tooltip input[type=text] {\n  display: none;\n  border: 1px solid #ccc;\n  font-size: 13px;\n  height: 26px;\n  margin: 0px;\n  padding: 3px 5px;\n  width: 170px;\n}\n.ql-snow .ql-tooltip a.ql-preview {\n  display: inline-block;\n  max-width: 200px;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  vertical-align: top;\n}\n.ql-snow .ql-tooltip a.ql-action::after {\n  border-right: 1px solid #ccc;\n  content: &#39;Edit&#39;;\n  margin-left: 16px;\n  padding-right: 8px;\n}\n.ql-snow .ql-tooltip a.ql-remove::before {\n  content: &#39;Remove&#39;;\n  margin-left: 8px;\n}\n.ql-snow .ql-tooltip a {\n  line-height: 26px;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-preview,\n.ql-snow .ql-tooltip.ql-editing a.ql-remove {\n  display: none;\n}\n.ql-snow .ql-tooltip.ql-editing input[type=text] {\n  display: inline-block;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-action::after {\n  border-right: 0px;\n  content: &#39;Save&#39;;\n  padding-right: 0px;\n}\n.ql-snow .ql-tooltip[data-mode=link]::before {\n  content: &quot;Enter link:&quot;;\n}\n.ql-snow .ql-tooltip[data-mode=formula]::before {\n  content: &quot;Enter formula:&quot;;\n}\n.ql-snow .ql-tooltip[data-mode=video]::before {\n  content: &quot;Enter video:&quot;;\n}\n.ql-snow a {\n  color: #06c;\n}\n.ql-container.ql-snow {\n  border: 1px solid #ccc;\n}\n/* // 字体样式大小 */\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=&quot;SimSun&quot;]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=&quot;SimSun&quot;]::before {\n    content: &quot;宋体&quot;;\n    font-family: &quot;SimSun&quot;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=&quot;SimHei&quot;]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=&quot;SimHei&quot;]::before {\n    content: &quot;黑体&quot;;\n    font-family: &quot;SimHei&quot;;\n}\n.ql-snow\n    .ql-picker.ql-font\n    .ql-picker-label[data-value=&quot;Microsoft-YaHei&quot;]::before,\n.ql-snow\n    .ql-picker.ql-font\n    .ql-picker-item[data-value=&quot;Microsoft-YaHei&quot;]::before {\n    content: &quot;微软雅黑&quot;;\n    font-family: &quot;Microsoft YaHei&quot;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=&quot;KaiTi&quot;]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=&quot;KaiTi&quot;]::before {\n    content: &quot;楷体&quot;;\n    font-family: &quot;KaiTi&quot;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=&quot;FangSong&quot;]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=&quot;FangSong&quot;]::before {\n    content: &quot;仿宋&quot;;\n    font-family: &quot;FangSong&quot;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=&quot;Arial&quot;]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=&quot;Arial&quot;]::before {\n    content: &quot;Arial&quot;;\n    font-family: &quot;Arial&quot;;\n}\n.ql-snow\n    .ql-picker.ql-font\n    .ql-picker-label[data-value=&quot;Times-New-Roman&quot;]::before,\n.ql-snow\n    .ql-picker.ql-font\n    .ql-picker-item[data-value=&quot;Times-New-Roman&quot;]::before {\n    content: &quot;Times New Roman&quot;;\n    font-family: &quot;Times New Roman&quot;;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=&quot;sans-serif&quot;]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=&quot;sans-serif&quot;]::before {\n    content: &quot;sans-serif&quot;;\n    font-family: &quot;sans-serif&quot;;\n}\n\n.ql-font-SimSun {\n    font-family: &quot;SimSun&quot;;\n}\n.ql-font-SimHei {\n    font-family: &quot;SimHei&quot;;\n}\n.ql-font-Microsoft-YaHei {\n    font-family: &quot;Microsoft YaHei&quot;;\n}\n.ql-font-KaiTi {\n    font-family: &quot;KaiTi&quot;;\n}\n.ql-font-FangSong {\n    font-family: &quot;FangSong&quot;;\n}\n.ql-font-Arial {\n    font-family: &quot;Arial&quot;;\n}\n.ql-font-Times-New-Roman {\n    font-family: &quot;Times New Roman&quot;;\n}\n.ql-font-sans-serif {\n    font-family: &quot;sans-serif&quot;;\n}\n\n</code></pre>\n"},{"fileName":"radio单选框列表再次点击取消选中.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220430174940814-615398017.png\" alt=\"\"></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;container-box&quot;&gt;\n    &lt;div class=&quot;enterpriseChoice&quot;&gt;\n      &lt;div class=&quot;search-div&quot;&gt;\n        &lt;div class=&quot;return&quot;&gt;\n          &lt;i&gt;&lt;/i&gt;\n          &lt;p @click=&quot;$router.back()&quot;&gt;返回&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;search&quot;&gt;\n          &lt;i&gt;&lt;/i&gt;\n          &lt;input type=&quot;text&quot; placeholder=&quot;请输入关键字搜索&quot; v-model=&quot;iptValue&quot; /&gt;\n        &lt;/div&gt;\n        &lt;p class=&quot;cancel&quot; @click=&quot;iptValue = &#39;&#39;&quot;&gt;取消&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;enterprise&quot;&gt;\n        &lt;form class=&quot;mui-input-group&quot; name=&quot;register&quot; v-for=&quot;(item, index) in List&quot; :key=&quot;index&quot;&gt;\n          &lt;div class=&quot;mui-input-row mui-radio mui-right enterprise-list&quot; style=&quot;display: flex&quot;&gt;\n            &lt;label :for=&quot;&#39;enterprise&#39; + index&quot; style=&quot;flex: 1&quot; class=&quot;label&quot;&gt;{{ item.label }}&lt;/label&gt;\n            &lt;input :class=&quot;&#39;el&#39; + index&quot; :id=&quot;&#39;enterprise&#39; + index&quot; name=&quot;enterprise&quot; type=&quot;radio&quot; :value=&quot;index&quot; :checked=&quot;item === enterprise ? true:false&quot; @click=&quot;toggleChecked($event)&quot; /&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;index-footer&quot;&gt;\n      &lt;button @click=&quot;selectEnterprise&quot;&gt;确认&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { getDept } from &quot;./api.js&quot;\nexport default {\n  name: &quot;enterpriseChoice&quot;,\n  components: {},\n  data () {\n    return {\n      deptList: [],\n      enterprise: &quot;&quot;,\n      iptValue: &quot;&quot;,\n      index: &#39;&#39;\n    }\n  },\n  props: {},\n  computed: {\n    List () {\n      if (this.iptValue !== &quot;&quot;) {\n        return this.deptList.filter((item) =&gt;\n          item.label.includes(this.iptValue)\n        )\n      } else {\n        return this.deptList\n      }\n      return this.List\n    },\n  },\n  watch: {\n\n  },\n  created () {\n    this.getList()\n  },\n  mounted () { },\n  methods: {\n    getList () {\n      getDept({ pid: 9 }).then((res) =&gt; {\n        this.deptList = res.data.content.filter((item) =&gt; {\n          if (item.id != 1369) {\n            return item\n          }\n        })\n      })\n    },\n    selectEnterprise () {\n      console.log(this.enterprise)\n      this.$router.push({\n        path: this.$route.query.path,\n        query: {\n          id: this.enterprise.id,\n          label: this.enterprise.label,\n          data: this.$route.query.data,\n          pathname: this.$route.name,\n        },\n      })\n    },\n    // radio点击事件\n    toggleChecked (e) {\n      // 赋值\n      this.enterprise = this.deptList[e.target.value]\n      // 判断重复点击后 取消选中 清空值 重置index\n      if (this.index === e.target.value) {\n        e.target.checked = !e.target.checked\n        this.enterprise = {}\n        this.index = &#39;&#39;\n      } else { //否则保存当前点击的索引\n        this.index = e.target.value\n      }\n    }\n  },\n};\n&lt;/script&gt;\n\n&lt;style  scoped&gt;\n.label {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n&lt;/style&gt;\n\n\n</code></pre>\n<p>使用v-model双向数据绑定后导致无法实现再次点击取消选中的逻辑 会导致第一次点击也会取消选中 主要原因是v-model的处理总是会在自己的逻辑之前 所以取消使用v-moel</p>\n<p>label for属性和input id属性实现点击标签选中</p>\n<p>input name一直实现互斥</p>\n<p>再次点击取消选中 所以是click事件而非change</p>\n"},{"fileName":"readableStream可读流 转换成blob.md","content":"<pre><code>import * as binconv from &#39;binconv&#39;\n// 将readableStream 转换成blob\nconst blob = await binconv.readableStreamToBlob(fileData.Body)\n</code></pre>\n"},{"fileName":"reduce使用.md","content":"<pre><code>      // const add = (x) =&gt; x + 5;\n      // const multiplication = (x) =&gt; x * 5;\n      // const subtraction = (x) =&gt; x - 5;\n      // const division = (x) =&gt; x / 5;\n      // const handleFn = (...fns) =&gt; {\n      //   return fns.reduce((prev, cur) =&gt; {\n      //     return (...args) =&gt; {\n      //       const res = prev(...args);\n      //       return cur(res);\n      //     };\n      //   });\n      // };\n      // const targetFn = handleFn(add, multiplication, subtraction, division);\n      // console.log(targetFn(5));\n</code></pre>\n"},{"fileName":"render函数使用示例.md","content":"<pre><code>import { mapState } from &#39;vuex&#39;\nimport menuMixin from &#39;../mixin/menu&#39;\nimport { elMenuItem, elSubmenu } from &#39;../libs/util.menu&#39;\nimport BScroll from &#39;better-scroll&#39;\n\nexport default {\n  name: &#39;d2-layout-header-aside-menu-side&#39;,\n  mixins: [\n    menuMixin\n  ],\n  render (createElement) {\n    return createElement(&#39;div&#39;, { attrs: { class: &#39;d2-layout-header-aside-menu-side&#39; } }, [\n      createElement(&#39;div&#39;, {}, [\n        createElement(&#39;div&#39;, { attrs: { class: &#39;menu-title&#39; } }, [createElement(&#39;i&#39;, { attrs: { class: &#39;el-icon-menu&#39;, style: &#39;margin-right:5px&#39; } }), this.current.title]),\n        createElement(&#39;el-menu&#39;, {\n          props: { collapse: this.asideCollapse, uniqueOpened: false, defaultActive: this.active },\n          ref: &#39;menu&#39;,\n          on: { select: this.handleMenuSelect }\n        }, this.aside.map(menu =&gt; (menu.children === undefined ? elMenuItem : elSubmenu).call(this, createElement, menu))),\n        ...this.aside.length === 0 &amp;&amp; !this.asideCollapse ? [\n          createElement(&#39;div&#39;, { attrs: { class: &#39;d2-layout-header-aside-menu-empty&#39;, flex: &#39;dir:top main:center cross:center&#39; } }, [\n            createElement(&#39;d2-icon&#39;, { props: { name: &#39;inbox&#39; } }),\n            createElement(&#39;span&#39;, {}, this.$t(&#39;layout.header-aside.menu-side.empty&#39;))\n          ])\n        ] : []\n      ])])\n  },\n  data () {\n    return {\n      active: &#39;&#39;,\n      asideHeight: 300,\n      BS: null\n    }\n  },\n  computed: {\n    ...mapState(&#39;d2admin/menu&#39;, [\n      &#39;aside&#39;,\n      &#39;header&#39;,\n      &#39;asideCollapse&#39;,\n      &#39;current&#39;\n    ])\n  },\n  watch: {\n    // 折叠和展开菜单的时候销毁 better scroll\n    asideCollapse (val) {\n      this.scrollDestroy()\n      setTimeout(() =&gt; {\n        this.scrollInit()\n      }, 500)\n    },\n    // 监听路由 控制侧边栏激活状态\n    $route: {\n      handler ({ fullPath }) {\n        this.active = fullPath\n        this.$nextTick(() =&gt; {\n          if (this.aside.length &gt; 0 &amp;&amp; this.$refs.menu) {\n            this.$refs.menu.activeIndex = fullPath\n          }\n        })\n      },\n      immediate: true\n    }\n  },\n  mounted () {\n    this.scrollInit()\n  },\n  beforeDestroy () {\n    this.scrollDestroy()\n  },\n  methods: {\n    scrollInit () {\n      this.BS = new BScroll(this.$el, {\n        mouseWheel: true,\n        click: true\n        // 如果你愿意可以打开显示滚动条\n        // scrollbar: {\n        //   fade: true,\n        //   interactive: false\n        // }\n      })\n    },\n    scrollDestroy () {\n      // https://github.com/d2-projects/d2-admin/issues/75\n      try {\n        this.BS.destroy()\n      } catch (e) {\n        delete this.BS\n        this.BS = null\n      }\n    }\n  }\n}\n</code></pre>\n"},{"fileName":"render函数式组件.md","content":"<ul>\n<li>应用场景 页面在接口请求到html模板后动态的向模板中挂载dom （例如 获得准考证的html模版后需要添加考试科目表格，#subject-table为模板预留占位标签）\n注：全局组件可在页面内直接使用组件名标签使用</li>\n</ul>\n<ol>\n<li>通过<code>Vue.component</code>注册全局组件</li>\n<li>通过<code>Vue.extend</code>创建构造器</li>\n<li>创建实例，并挂载到元素上。</li>\n</ol>\n<pre><code>/** * Created by wanghonghao on 2022/09/29 */\nimport Vue from &#39;vue&#39;\nlet tdAttrs = { style: { border: &#39;1px solid #000&#39;, padding: &#39;5px 30px&#39;, &#39;text-align&#39;: &#39;center&#39;, &#39;font-weight&#39;: &#39;normal&#39; }}\nlet tableAttrs = { style: { &#39;border-collapse&#39;: &#39;collapse&#39;, margin: &#39;0 auto&#39; }}\nfunction renderTable(examList) {\n  let table = Vue.component(&#39;subject-table&#39;, {\n    render: function (h) {\n      return h(&#39;tr&#39;, {}, [\n        h(&#39;td&#39;, { attrs: { colspan: 5, align: &#39;center&#39; }}, [\n          h(&#39;table&#39;, tableAttrs, [\n            h(&#39;thead&#39;, tableAttrs, [h(&#39;tr&#39;, {}, [h(&#39;th&#39;, tdAttrs, &#39;日期&#39;), h(&#39;th&#39;, tdAttrs, &#39;时间&#39;), h(&#39;th&#39;, tdAttrs, &#39;科目&#39;)])]),\n            h(\n              &#39;tbody&#39;,\n              {},\n              examList.map(item =&gt; h(&#39;tr&#39;, {}, [h(&#39;td&#39;, tdAttrs, item.date), h(&#39;td&#39;, tdAttrs, item.time), h(&#39;td&#39;, tdAttrs, item.subject)]))\n            )\n          ])\n        ])\n      ])\n    }\n  })\n  let instance = Vue.extend(table)\n  new instance().$mount(&#39;#subject-table&#39;)\n}\nexport default renderTable\n</code></pre>\n<ul>\n<li><code>Vue.extend</code>高级用法</li>\n</ul>\n<pre><code>import Vue from &#39;vue&#39;\nimport selectExamDialog from &#39;./qz-select-exam-dialog&#39; // 引入弹窗组件\n\nconst SelectExamDialog = Vue.extend(selectExamDialog)\nselectExamDialog.open = function (callback) {\n  const instance = new SelectExamDialog().$mount()\n  document.body.appendChild(instance.$el)\n  instance.close = () =&gt; {\n    callback &amp;&amp; callback()\n    document.body.removeChild(instance.$el)\n    instance.$destroy()\n  }\n  Vue.nextTick(() =&gt; {\n    instance.open()\n  })\n}\n// 导出\nexport default selectExamDialog\n</code></pre>\n<h3>使用render函数编写的导航栏组件</h3>\n<pre><code>import { mapState } from &#39;vuex&#39;\nimport menuMixin from &#39;../mixin/menu&#39;\nimport { elMenuItem, elSubmenu } from &#39;../libs/util.menu&#39;\nimport BScroll from &#39;better-scroll&#39;\n\nexport default {\n  name: &#39;d2-layout-header-aside-menu-side&#39;,\n  mixins: [\n    menuMixin\n  ],\n  render (createElement) {\n    return createElement(&#39;div&#39;, { attrs: { class: &#39;d2-layout-header-aside-menu-side&#39; } }, [\n      createElement(&#39;div&#39;, { attrs: { class: &#39;menu-title&#39; } }, this.menuTitle),\n      createElement(&#39;el-menu&#39;, {\n        props: { collapse: this.asideCollapse, uniqueOpened: false, defaultActive: this.active },\n        ref: &#39;menu&#39;,\n        on: { select: this.handleMenuSelect }\n      }, this.aside.map(menu =&gt; (menu.children === undefined ? elMenuItem : elSubmenu).call(this, createElement, menu))),\n      ...this.aside.length === 0 &amp;&amp; !this.asideCollapse ? [\n        createElement(&#39;div&#39;, { attrs: { class: &#39;d2-layout-header-aside-menu-empty&#39;, flex: &#39;dir:top main:center cross:center&#39; } }, [\n          createElement(&#39;d2-icon&#39;, { props: { name: &#39;inbox&#39; } }),\n          createElement(&#39;span&#39;, {}, this.$t(&#39;layout.header-aside.menu-side.empty&#39;))\n        ])\n      ] : []\n    ])\n  },\n  data () {\n    return {\n      active: &#39;&#39;,\n      asideHeight: 300,\n      BS: null\n    }\n  },\n  computed: {\n    ...mapState(&#39;d2admin/menu&#39;, [\n      &#39;aside&#39;,\n      &#39;header&#39;,\n      &#39;asideCollapse&#39;\n    ]),\n    menuTitle () {\n      const pid = this.aside[0].pid\n      const item = this.header.find(item =&gt; item.id === pid)\n      return item ? item.title : &#39;&#39;\n    }\n  },\n  watch: {\n    // 折叠和展开菜单的时候销毁 better scroll\n    asideCollapse (val) {\n      this.scrollDestroy()\n      setTimeout(() =&gt; {\n        this.scrollInit()\n      }, 500)\n    },\n    // 监听路由 控制侧边栏激活状态\n    $route: {\n      handler ({ fullPath }) {\n        this.active = fullPath\n        this.$nextTick(() =&gt; {\n          if (this.aside.length &gt; 0 &amp;&amp; this.$refs.menu) {\n            this.$refs.menu.activeIndex = fullPath\n          }\n        })\n      },\n      immediate: true\n    }\n  },\n  mounted () {\n    this.scrollInit()\n  },\n  beforeDestroy () {\n    this.scrollDestroy()\n  },\n  methods: {\n    scrollInit () {\n      this.BS = new BScroll(this.$el, {\n        mouseWheel: true,\n        click: true\n        // 如果你愿意可以打开显示滚动条\n        // scrollbar: {\n        //   fade: true,\n        //   interactive: false\n        // }\n      })\n    },\n    scrollDestroy () {\n      // https://github.com/d2-projects/d2-admin/issues/75\n      try {\n        this.BS.destroy()\n      } catch (e) {\n        delete this.BS\n        this.BS = null\n      }\n    }\n  }\n}\n</code></pre>\n"},{"fileName":"svg图标使用.md","content":"<h2>封装图标组件</h2>\n<p>icon-svg</p>\n<pre><code>/** * Created by wanghonghao on 2023/03/08 */\n&lt;!-- Icon-svg --&gt;\n&lt;template&gt;\n  &lt;svg class=&quot;svg-icon&quot; aria-hidden=&quot;true&quot;&gt;\n    &lt;use :xlink:href=&quot;iconName&quot;&gt;&lt;/use&gt;\n  &lt;/svg&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;Icon-svg&#39;,\n  props: {\n    iconClass: {\n      typeof: &#39;string&#39;,\n      required: true,\n    },\n  },\n  computed: {\n    iconName() {\n      return `#icon-${this.iconClass}`\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.svg-icon {\n  width: 1em;\n  height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n&lt;/style&gt;\n</code></pre>\n<p>main.js</p>\n<pre><code>// 引入symbol图标js\nimport &#39;@/assets/font/iconfont.js&#39;\n// 引入icon-svg组件\nimport IconSvg from &#39;@/components/icon-svg/icon-svg.vue&#39;\n// 全局注册icon-svg\nVue.component(&#39;icon-svg&#39;,IconSvg)\n</code></pre>\n<p>页面使用</p>\n<pre><code>&lt;icon-svg iconClass=&quot;edit_line&quot;&gt;&lt;/icon-svg&gt;\n</code></pre>\n"},{"fileName":"uni-app 使用阿里矢量素材图标库 Symbol 彩色图标和Font class普通单色图标.md","content":"<blockquote>\n<p>Symbol 彩色图标这是一种全新的使用方式，应该说这才是未来的主流</p>\n</blockquote>\n<h2>优缺点介绍</h2>\n<ul>\n<li>多色图标，不再受单色限制。<code>Font class</code> 和 <code>Unicode</code>只能调整图标大小，颜色等；默认情况下不支持多色，直接添加多色图标会自动去色。</li>\n<li>Symbol 不能设置<code>color</code>属性；<code>Font class</code> 和 <code>Unicode</code>图标可以通过一些技巧，支持像字体那样，可通过<code>font-size</code>, <code>color</code> 来调整样式。</li>\n<li>兼容性较差，支持 IE9+，及现代浏览器。</li>\n<li>浏览器渲染 SVG 的性能一般，还不如 png。<strong>建议使用的时候将普通图标和彩色图标分开始用</strong></li>\n</ul>\n<h2><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.iconfont.cn%2Fhome%2Findex\">阿里矢量素材图标库</a></h2>\n<hr>\n<h2>1.Symbol 彩色图标</h2>\n<hr>\n<h6>添加项目</h6>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/23175847-3178c6e55d704b01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"\"></p>\n<p>image.png</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/23175847-93964808fb454c80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp\" alt=\"\"></p>\n<p>image.png</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/23175847-fe72569c8532b055.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/327/format/webp\" alt=\"\"></p>\n<p>image.png</p>\n<h6>下载项目</h6>\n<p>image.png</p>\n<h4>编辑图标</h4>\n<h6>1. 将下载的包解压 修改个看得过去的名字</h6>\n<h6>2. 打开 <code>win + r</code> 打开 <code>cmd</code>, 在 <code>cmd</code> 中打开已解压的文件夹 <code>cd 文件地址</code></h6>\n<p>image.png</p>\n<h6>3. 安装 iconfont-tools</h6>\n<pre><code class=\"language-undefined\">npm install -g iconfont-tools\n</code></pre>\n<h6>4. 执行 iconfont-tools</h6>\n<pre><code class=\"language-undefined\">iconfont-tools\n</code></pre>\n<blockquote>\n<p>根据提示 填写相关信息</p>\n</blockquote>\n<p>image.png</p>\n<blockquote>\n<p>此时文件夹内会有 <code>iconfont</code> 文件夹</p>\n</blockquote>\n<h4>uni-app 引用</h4>\n<h6>打开生成的iconfont文件夹，将 <code>iconfont.css</code>引入 项目中的<code>static</code>文件中，文件管理随项目规定</h6>\n<p>image.png</p>\n<blockquote>\n<p>圈出来的都是可以直接在文件中更改的 用的时候用更改过后的名字就好, 为了方便 我将<code>.icon</code> 的<code>width</code>和<code>height</code>调整成了300rpx</p>\n</blockquote>\n<h6>打开 <code>app.vue</code> 文件</h6>\n<pre><code class=\"language-dart\">&lt;style lang=&quot;scss&quot;&gt;\n  // 引入阿里矢量素材图标库\n  @import &#39;@/static/iconfont.css&#39;;\n        .\n        .\n        .\n&lt;/style&gt;\n</code></pre>\n<h6>页面使用</h6>\n<pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;view class=&quot;icon icon-a-jiujiuping&quot;&gt;&lt;/view&gt;\n&lt;/template&gt;\n</code></pre>\n<p>image.png</p>\n<hr>\n<h2>2.Font class普通单色图标</h2>\n<hr>\n<h6>1. 创建一个普通图标的项目，添加普通图标不需要下载</h6>\n<h6>2. 进入我的项目 点击 <code>暂无代码，生成代码</code></h6>\n<p>image.png</p>\n<p>image.png</p>\n<h6>3.在uni-app向程序的static中创建一个<code>icon.css</code>文件 复制点开的链接中的代码</h6>\n<p>image.png</p>\n<pre><code class=\"language-css\">@font-face {\n  font-family: &quot;iconfont&quot;; /* Project id 3365557 */\n  src: url(&#39;https://at.alicdn.com/t/font_3365557_u8wf0h1d7k.woff2?t=1651127283524&#39;) format(&#39;woff2&#39;),\n       url(&#39;https://at.alicdn.com/t/font_3365557_u8wf0h1d7k.woff?t=1651127283524&#39;) format(&#39;woff&#39;),\n       url(&#39;https://at.alicdn.com/t/font_3365557_u8wf0h1d7k.ttf?t=1651127283524&#39;) format(&#39;truetype&#39;);\n}\n</code></pre>\n<h6>4.在app.vue中引入<code>icon.css</code></h6>\n<pre><code class=\"language-dart\">&lt;style lang=&quot;scss&quot;&gt;\n  // 引入阿里矢量素材图标库\n  @import &#39;@/static/iconfont.css&#39;;   // 彩色图标\n  @import &#39;@/static/icon.css&#39;;    // 普通图标\n        .\n        .\n        .\n&lt;/style&gt;\n</code></pre>\n<h6>5.页面使用</h6>\n<pre><code class=\"language-xml\">&lt;template&gt;\n    &lt;!-- 彩色图标 --&gt;\n    &lt;view class=&quot;icon icon-a-jiujiuping&quot;&gt;&lt;/view&gt;\n    &lt;!-- 普通图标 --&gt;\n    &lt;view class=&quot;iconfont icon-settings&quot;&gt;&lt;/view&gt;\n&lt;/template&gt;\n</code></pre>\n<h1>注意</h1>\n<p>小程序使用图标后如果<code>font</code>文件夹放在<code>static</code>目录下在上传代码时会出现font文件未上传的情况\n原因是微信小程序在上传代码时static静态资源目录会有默认白名单，font文件夹不在白名单内导致无法上传\n把<code>font</code>文件夹放到项目根目录即可</p>\n"},{"fileName":"uni-app中使用jsencrypt会导致项目报错.md","content":"<h3>最近项目使用jsencrypt对登录密码进行加密 pc正常使用，但是uniapp中使用会导致项目报错</h3>\n<p><code>主要原因是jsencrypt中使用了window对象</code></p>\n<p>解决方案是 使用旧版的jsencrypt并对源码进行修改 用旧版是因为新版有其他包的依赖无法抽取为单独的js</p>\n<p>在jsencrypt.js文件随便那个位置添加以下代码</p>\n<pre><code>   var modificationNavigator = {\n    appName: &#39;Netscape&#39;,\n    userAgent: &#39;Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 \t(KHTML, like  \t Gecko) Version/9.0 Mobile/13B143 Safari/601.1&#39;\n  };\n   var modificationWindow = {\n    ASN1: null,\n    Base64: null,\n    Hex: null,\n    crypto: null,\n    href: null\n  };\n</code></pre>\n<p>加入后把jsencrypt.js文件里面的变量navigator全部替换为 modificationNavigator\nwindow全部替换为 modificationWindow</p>\n<p>使用</p>\n<pre><code>import JSEncrypt from &#39;&#39;\nvar en = new JSEncrypt()\n            \nen.setPublicKey(&quot;填写私钥&quot;)\nlet encrypted = en.encrypt(&#39;加密信息&#39;)\nconsole.log(&#39;en:&#39;+encrypted)\n</code></pre>\n<p><a href=\"https://files.cnblogs.com/files/blogs/703856/jsencrypt.js?t=1657596950\">附修改后的源码，点击下载</a></p>\n<p>参考资料\n<code>https://blog.csdn.net/qq_38318589/article/details/115371454</code>\n<code>https://blog.csdn.net/qq_36501494/article/details/105153122</code></p>\n"},{"fileName":"uni-app微信小程序样式穿透.md","content":"<p>添加options配置</p>\n<pre><code>export default {\n  options: {\n    styleIsolation: &#39;shared&#39;,\n  },\n  name: &#39;DynamicFormItem&#39;,\n  components: {\n    selectDialog,\n  },\n}\n</code></pre>\n"},{"fileName":"uniappu-view-u-input组件禁止弹出软键盘.md","content":"<p>disabled=&quot;disabled&quot; disabledColor=&quot;#fff&quot; 使用tap点击事件</p>\n<pre><code>&lt;u-input disabled=&quot;disabled&quot; disabledColor=&quot;#fff&quot; v-model=&quot;form.questionName&quot; placeholder=&quot;请选择密保提示问题&quot;\n                    border=&quot;none&quot; @tap=&quot;show = true&quot; /&gt;\n</code></pre>\n"},{"fileName":"uniapp修改数据后视图不更新.md","content":"<h2>uniapp修改数据后视图不更新</h2>\n<p>使用父组件<code>props</code>渲染数据，<code>props</code>更改后视图未更新</p>\n<p>此时使用this.$forceUpdate()方法强制更新视图\nthis.$forceUpdate()迫使vue实例重新渲染 注意它只影响实例本身和插入插槽的子组件，而不是所有的子组件</p>\n"},{"fileName":"uniapp小程序props传值丢失.md","content":"<p>##uniapp小程序props传值丢失</p>\n<p><code>uniapp中父组件向子组件传递prop时，如果prop是对象，对象内部不能包含function属性</code>\n如果包含function属性则会被忽略掉 主要原因 uniapp props实现采用了JSON.parse(JSON.stringify(ret))，导致this中的data中会识别到对象如果包含function，会直接丢失到该属性</p>\n<p>解决方案 可采用 provide/inject传值</p>\n"},{"fileName":"uniapp微信小程序开启分包配置、分包预加载、按需注入.md","content":"<h1>小程序配置分包</h1>\n<p>在<strong>manifest.json</strong>对应平台的配置下添加<code>&quot;optimization&quot;:{&quot;subPackages&quot;:true}</code>开启分包优化</p>\n<p>目前只支持<code>mp-weixin</code>、<code>mp-qq</code>、<code>mp-baidu</code>、<code>mp-toutiao</code>、<code>mp-kuaishou</code>的分包优化</p>\n<p>分包优化具体逻辑：</p>\n<ul>\n<li>静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用</li>\n<li>js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）</li>\n<li>自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息</li>\n</ul>\n<p>在<strong>pages.json</strong>文件中<code>pages</code>数组中存放主包页面，<code>subPackages</code>为分包</p>\n<pre><code class=\"language-js\">&quot;pages&quot;:[],\n&quot;subPackages&quot;:[{\n      &quot;root&quot;: &quot;pagesA&quot;,\n      &quot;pages&quot;:[]\n    },\n  {\n       &quot;root&quot;:&quot;pagesB&quot;,\n    &quot;pages&quot;:[]\n  }         \n]\n</code></pre>\n<p><strong>manifest.json</strong>文件内<code>ma-weixin</code>配置</p>\n<pre><code>&quot;runmode&quot;: &quot;liberate&quot;, // 开启分包优化后，必须配置资源释放模式\n</code></pre>\n<h1>分包预加载配置</h1>\n<p>在访问<code>pages/index/index</code>页面时加载<strong>pagesA</strong>分包</p>\n<pre><code class=\"language-js\">&quot;preloadRule&quot;: {\n    &quot;pages/index/index&quot;: {\n        &quot;network&quot;: &quot;all&quot;,\n        &quot;packages&quot;: [&quot;pagesA&quot;]\n    }\n},\n</code></pre>\n<h1>开启按需注入</h1>\n<p><strong>manifest.json</strong>文件内<code>ma-weixin</code>配置</p>\n<pre><code>&quot;lazyCodeLoading&quot;: &quot;requiredComponents&quot;\n</code></pre>\n"},{"fileName":"vscode配置存档.md","content":"<pre><code>// setting.json\n{ \n  &quot;debug.console.fontFamily&quot;: &quot;JetBrains Mono&quot;,\n  // 控制在运行预启动任务后遇到错误时应该怎么做。debugAnyway: 忽略任务错误并开始调试。\n  &quot;debug.onTaskErrors&quot;: &quot;debugAnyway&quot;,\n  // 控制编辑器是否应在对屏幕阅读器进行了优化的模式下运行。设置为“开”将禁用自动换行。\n  &quot;editor.accessibilitySupport&quot;: &quot;off&quot;,\n  // 控制是否启用平滑插入动画\n  &quot;editor.cursorSmoothCaretAnimation&quot;: true,\n  &quot;editor.find.addExtraSpaceOnTop&quot;: false,\n  // 这个控制是否启用字体连字\n  &quot;editor.fontLigatures&quot;: &quot;&#39;ss01&#39;, &#39;ss02&#39;, &#39;ss03&#39;, &#39;ss06&#39;, &#39;zero&#39;&quot;,\n  // 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。\n  &quot;editor.glyphMargin&quot;: true,\n  // 控制是否在编辑器中自动显示内联建议。\n  &quot;editor.inlineSuggest.enabled&quot;: true,\n  // 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突\n  &quot;editor.multiCursorModifier&quot;: &quot;ctrlCmd&quot;,\n  &quot;editor.tabSize&quot;: 2,\n  &quot;editor.fontWeight&quot;: 440,\n  &quot;editor.fontFamily&quot;: &quot;JetBrains Mono, Menlo, Monaco, &#39;Courier New&#39;, monospace&quot;,\n  // 控制是否突出显示可能与基本 ASCII 字符混淆的字符，但当前用户区域设置中常见的字符除外。\n  &quot;editor.unicodeHighlight.ambiguousCharacters&quot;: false,\n  // 控制是否突出显示仅保留空格或完全没有宽度的字符。\n  &quot;editor.unicodeHighlight.invisibleCharacters&quot;: false,\n  // ESLint要验证的语言\n  &quot;eslint.validate&quot;: [\n    &quot;javascript&quot;,\n    &quot;javascriptreact&quot;,\n    &quot;vue&quot;,\n    &quot;typescript&quot;,\n    &quot;typescriptreact&quot;,\n    &quot;html&quot;,\n    &quot;css&quot;,\n    &quot;scss&quot;,\n    &quot;less&quot;,\n    &quot;mpx&quot;,\n    &quot;json&quot;,\n    &quot;markdown&quot;\n  ],\n  // 不显示eslint校验的警告信息\n  &quot;eslint.quiet&quot;: true,\n  // eslint保存时只修复有问题的代码\n  &quot;eslint.codeActionsOnSave.mode&quot;: &quot;problems&quot;,\n  &quot;eslint.format.enable&quot;: true,\n  // 文件自动延迟保存\n  &quot;files.autoSaveDelay&quot;: 5000,\n  // 默认行尾字符。 LF\n  &quot;files.eol&quot;: &quot;\\n&quot;,\n  // 启用简单文件对话框。启用时，简单文件对话框将替换系统文件对话框。\n  &quot;files.simpleDialog.enable&quot;: true,\n  // 同步 Git 存储库前请先进行确认。\n  &quot;git.confirmSync&quot;: false,\n  &quot;git.autofetch&quot;: true,\n  // 控制如何处理工作区中的松散文件\n  &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;,\n  &quot;vetur.validation.template&quot;: false,\n  // 编辑器左侧目录树偏移量\n  &quot;workbench.tree.indent&quot;: 10,\n  &quot;workbench.iconTheme&quot;: &quot;file-icons&quot;,\n  &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;,\n  &quot;workbench.productIconTheme&quot;: &quot;icons-carbon&quot;,\n  &quot;workbench.colorTheme&quot;: &quot;Community Material Theme Palenight High Contrast&quot;,\n  // 控制无标题提示应该是编辑器或浮动按钮中的内联文本，还是应该隐藏。\n  &quot;workbench.editor.untitled.hint&quot;: &quot;hidden&quot;,\n  // 调整对话框窗口的外观。\n  &quot;window.dialogStyle&quot;: &quot;custom&quot;,\n  // 启用 macOS Sierra 窗口选项卡。请注意，更改在完全重新启动程序后才能生效。同时，开启原生选项卡将禁用自定义标题栏样式。\n  &quot;window.nativeTabs&quot;: true, // this is great, macOS only\n  // 调整窗口标题栏的外观。在 Linux 和 Windows 上，此设置也会影响应用程序和上下文菜单的外观。更改需要完全重新启动才能应用。\n  &quot;window.titleBarStyle&quot;: &quot;custom&quot;,\n  // 控制工作台中活动栏的可见性。\n  &quot;workbench.activityBar.visible&quot;: true,\n  // 控制在会话期间显示已打开文件的编辑器是否应在被其他进程删除或重命名时自动关闭。\n  // 禁用此功能将使编辑器在此类事件中保持打开状态。\n  // 请注意，从应用程序内删除将始终关闭编辑器，且永远不会关闭具有未保存更改的编辑器以保留数据。\n  &quot;workbench.editor.closeOnFileDelete&quot;: true,\n  // 控制是否在具有未保存更改的编辑器的选项卡上绘制顶部边框。\n  &quot;workbench.editor.highlightModifiedTabs&quot;: true,\n  // 控制在工作台中字体的渲染方式。antialiased: 进行像素而不是次像素级别的字体平滑。可能会导致字体整体显示得更细\n  &quot;workbench.fontAliasing&quot;: &quot;antialiased&quot;,\n  // 控制列表和树是否具有平滑滚动效果。\n  &quot;workbench.list.smoothScrolling&quot;: true,\n  // 控制侧边栏和活动栏的位置。它们可以显示在工作台的左侧或右侧。\n  &quot;workbench.sideBar.location&quot;: &quot;left&quot;,\n  // 控制扩展的自动更新行为。更新是从 Microsoft 联机服务中获取的。\n  // onlyEnabledExtensions: 仅为已启用的扩展自动下载并安装更新。将不会自动更新已禁用的扩展。\n  &quot;extensions.autoUpdate&quot;: &quot;onlyEnabledExtensions&quot;,\n  // 启用后，将不会显示扩展建议的通知。\n  &quot;extensions.ignoreRecommendations&quot;: true,\n  // 控制终端光标是否闪烁。\n  &quot;terminal.integrated.cursorBlinking&quot;: true,\n  // 控制终端光标的样式。\n  &quot;terminal.integrated.cursorStyle&quot;: &quot;underline&quot;,\n  // 要在终端中用于非粗体文本的字体粗细。接受“正常”和“加粗”这两个关键字，或接受 1-1000 之间的数字。\n  &quot;terminal.integrated.fontWeight&quot;: &quot;300&quot;,\n  // 当必须关闭终端进程(例如当窗口或应用程序关闭时)时，这将确定何时应还原以前的终端会话内容，以及在下次打开工作区时重新创建的进程。\n  &quot;terminal.integrated.persistentSessionReviveProcess&quot;: &quot;never&quot;,\n  // 控制终端选项卡是否以列表的形式显示在终端的一侧。如果禁用此功能，将改为显示下拉列表。\n  &quot;terminal.integrated.tabs.enabled&quot;: true,\n  // 删除时，是否确认\n  &quot;explorer.confirmDelete&quot;: false,\n  // 控制在资源管理器内拖放移动文件或文件夹时是否进行确认。\n  &quot;explorer.confirmDragAndDrop&quot;: false,\n  // 实验性。控制是否已在资源管理器中启用文件嵌套。文件嵌套允许目录中的相关文件在单个父文件下以可视方式组合在一起。\n  &quot;explorer.experimental.fileNesting.enabled&quot;: true,\n  // 实验性。控制是否自动展开文件嵌套。\n  &quot;explorer.experimental.fileNesting.expand&quot;: false,\n  // 实验性。控制资源管理器中文件的嵌套。\n  &quot;explorer.experimental.fileNesting.patterns&quot;: {\n    &quot;.gitignore&quot;: &quot;.gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*&quot;,\n    &quot;*.js&quot;: &quot;$(capture).js.map, $(capture).min.js, $(capture).d.ts&quot;,\n    &quot;*.jsx&quot;: &quot;$(capture).js&quot;,\n    &quot;*.ts&quot;: &quot;$(capture).js, $(capture).*.ts&quot;,\n    &quot;*.tsx&quot;: &quot;$(capture).ts&quot;,\n    &quot;*.vue&quot;: &quot;$(capture).*.ts, $(capture).*.js&quot;,\n    &quot;index.d.ts&quot;: &quot;*.d.ts&quot;,\n    &quot;shims.d.ts&quot;: &quot;*.d.ts&quot;,\n    &quot;*.cpp&quot;: &quot;$(capture).hpp, $(capture).h, $(capture).hxx&quot;,\n    &quot;*.cxx&quot;: &quot;$(capture).hpp, $(capture).h, $(capture).hxx&quot;,\n    &quot;*.cc&quot;: &quot;$(capture).hpp, $(capture).h, $(capture).hxx&quot;,\n    &quot;*.c&quot;: &quot;$(capture).h&quot;,\n    &quot;go.mod&quot;: &quot;.air*, go.sum&quot;,\n    &quot;default.nix&quot;: &quot;shell.nix&quot;,\n    &quot;flake.nix&quot;: &quot;flake.lock&quot;,\n    &quot;BUILD.bazel&quot;: &quot;*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE&quot;,\n    &quot;CMakeLists.txt&quot;: &quot;*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json&quot;,\n    &quot;.clang-tidy&quot;: &quot;.clang-format&quot;,\n    &quot;.env&quot;: &quot;*.env, .env.*, env.d.ts&quot;,\n    &quot;dockerfile&quot;: &quot;.dockerignore, dockerfile*&quot;,\n    &quot;package.json&quot;: &quot;.browserslist*, .circleci*, .codecov, .commitlint*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .mocha*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, api-extractor.json, appveyor*, ava.config.*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, cypress.json, dangerfile*, dprint.json, firebase.json, grunt*, gulp*, jasmine.*, jenkins*, jest.config.*, jsconfig.*, karma*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, playwright.config.*, pm2.*, pnpm*, prettier*, pullapprove*, puppeteer.config.*, renovate*, rollup.config.*, stylelint*, tsconfig.*, tsdoc.*, tslint*, tsup.config.*, turbo*, typedoc*, vercel*, vetur.config.*, vitest.config.*, webpack.config.*, workspace.json, xo.config.*, yarn*&quot;,\n    &quot;rush.json&quot;: &quot;.browserslist*, .circleci*, .codecov, .commitlint*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .mocha*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, api-extractor.json, appveyor*, ava.config.*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, cypress.json, dangerfile*, dprint.json, firebase.json, grunt*, gulp*, jasmine.*, jenkins*, jest.config.*, jsconfig.*, karma*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, playwright.config.*, pm2.*, pnpm*, prettier*, pullapprove*, puppeteer.config.*, renovate*, rollup.config.*, stylelint*, tsconfig.*, tsdoc.*, tslint*, tsup.config.*, turbo*, typedoc*, vercel*, vetur.config.*, vitest.config.*, webpack.config.*, workspace.json, xo.config.*, yarn*&quot;,\n    &quot;readme.*&quot;: &quot;authors, backers.md, changelog*, citation*, code_of_conduct.md, codeowners, contributing.md, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors.md&quot;,\n    &quot;cargo.toml&quot;: &quot;.clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml&quot;,\n    &quot;gemfile&quot;: &quot;.ruby-version, gemfile.lock&quot;,\n    &quot;composer.json&quot;: &quot;composer.lock, phpunit.xml*, psalm*.xml&quot;,\n    &quot;vite.config.*&quot;: &quot;*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, index.html, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*&quot;,\n    &quot;vue.config.*&quot;: &quot;*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*&quot;,\n    &quot;nuxt.config.*&quot;: &quot;*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*&quot;,\n    &quot;next.config.*&quot;: &quot;*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, next-env.d.ts, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*&quot;,\n    &quot;svelte.config.*&quot;: &quot;*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*&quot;,\n    &quot;remix.config.*&quot;: &quot;*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*&quot;\n  },\n  &quot;[typescript]&quot;: {\n    &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;\n  }\n}\n</code></pre>\n<h3>插件</h3>\n<pre><code>// extension\nJun Han.Auto Rename Tag\nChristian Kohler.Path Intellisense\nAlessandro Fragnani.Project Manager\nAnthony Fu.Browse Lite\nAnthony Fu.Carbon Product Icons\nEquinusocio.Community Material Theme\nMicrosoft.ESLint\nMicrosoft.TSLint\nPine Wu.Vetur\nAnthony Fu.Vite\nJohnson Chu.Volar\nfile-icons.file-icons\nGitKraken.GitLens\nYiyi Wang.Markdown Preview Enhanced\nWakaTime.WakaTime\n</code></pre>\n<pre><code>// setting.json\n{\n  &quot;debug.console.fontFamily&quot;: &quot;JetBrains Mono&quot;,\n  // 控制在运行预启动任务后遇到错误时应该怎么做。debugAnyway: 忽略任务错误并开始调试。\n  &quot;debug.onTaskErrors&quot;: &quot;debugAnyway&quot;,\n  &quot;tabnine.experimentalAutoImports&quot;: true,\n\n  // &quot;files.autoSave&quot;: &quot;afterDelay&quot;,\n  &quot;editor.fontSize&quot;: 14,\n  // 粘贴时格式化代码\n  // &quot;editor.formatOnPaste&quot;: true,\n  // 保存时格式化代码\n  // &quot;editor.formatOnSave&quot;: true,\n  &quot;editor.fontFamily&quot;: &quot;JetBrains Mono,Menlo, Monaco, &#39;Courier New&#39;, monospace&quot;,\n  &quot;editor.codeActionsOnSave&quot;: {\n    &quot;source.fixAll.eslint&quot;: true // 每次保存的时候将代码按eslint格式进行修复\n  },\n  // 控制编辑器是否应在对屏幕阅读器进行了优化的模式下运行。设置为“开”将禁用自动换行。\n  &quot;editor.accessibilitySupport&quot;: &quot;off&quot;,\n  // 控制是否启用平滑插入动画\n  &quot;editor.cursorSmoothCaretAnimation&quot;: &quot;on&quot;,\n  &quot;editor.find.addExtraSpaceOnTop&quot;: false,\n  // 这个控制是否启用字体连字\n  &quot;editor.fontLigatures&quot;: &quot;&#39;ss01&#39;, &#39;ss02&#39;, &#39;ss03&#39;, &#39;ss06&#39;, &#39;zero&#39;&quot;,\n  // 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。\n  &quot;editor.glyphMargin&quot;: true,\n  // 控制是否在编辑器中自动显示内联建议。\n  &quot;editor.inlineSuggest.enabled&quot;: true,\n  // 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突\n  &quot;editor.multiCursorModifier&quot;: &quot;ctrlCmd&quot;,\n  &quot;editor.tabSize&quot;: 2,\n  &quot;editor.fontWeight&quot;: 500,\n  // 控制是否突出显示可能与基本 ASCII 字符混淆的字符，但当前用户区域设置中常见的字符除外。\n  &quot;editor.unicodeHighlight.ambiguousCharacters&quot;: false,\n  // 控制是否突出显示仅保留空格或完全没有宽度的字符。\n  &quot;editor.unicodeHighlight.invisibleCharacters&quot;: false,\n  // ESLint要验证的语言\n  // &quot;eslint.validate&quot;: [\n  //   &quot;javascript&quot;,\n  //   &quot;javascriptreact&quot;,\n  //   &quot;vue&quot;,\n  //   &quot;typescript&quot;,\n  //   &quot;typescriptreact&quot;,\n  //   &quot;html&quot;,\n  //   &quot;css&quot;,\n  //   &quot;scss&quot;,\n  //   &quot;less&quot;,\n  //   &quot;mpx&quot;,\n  //   &quot;json&quot;,\n  //   &quot;markdown&quot;\n  // ],\n  // 不显示eslint校验的警告信息\n  // &quot;eslint.quiet&quot;: true,\n  // eslint保存时只修复有问题的代码\n  // &quot;eslint.codeActionsOnSave.mode&quot;: &quot;problems&quot;,\n  // &quot;eslint.format.enable&quot;: true,\n  // 文件自动延迟保存\n  &quot;files.autoSaveDelay&quot;: 5000,\n  // 默认行尾字符。 LF\n  &quot;files.eol&quot;: &quot;\\n&quot;,\n  // 启用简单文件对话框。启用时，简单文件对话框将替换系统文件对话框。\n  &quot;files.simpleDialog.enable&quot;: true,\n  // 同步 Git 存储库前请先进行确认。\n  &quot;git.confirmSync&quot;: false,\n  &quot;git.autofetch&quot;: true,\n  // 控制如何处理工作区中的松散文件\n  &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;,\n  &quot;vetur.validation.template&quot;: false,\n  // 编辑器左侧目录树偏移量\n  &quot;workbench.tree.indent&quot;: 10,\n  &quot;workbench.iconTheme&quot;: &quot;file-icons&quot;,\n  &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;,\n  &quot;workbench.colorTheme&quot;: &quot;One Dark Pro Darker&quot;,\n  // 控制无标题提示应该是编辑器或浮动按钮中的内联文本，还是应该隐藏。\n  &quot;workbench.editor.untitled.hint&quot;: &quot;hidden&quot;,\n  // 调整对话框窗口的外观。\n  &quot;window.dialogStyle&quot;: &quot;custom&quot;,\n  // 启用 macOS Sierra 窗口选项卡。请注意，更改在完全重新启动程序后才能生效。同时，开启原生选项卡将禁用自定义标题栏样式。\n  &quot;window.nativeTabs&quot;: true, // this is great, macOS only\n  // 调整窗口标题栏的外观。在 Linux 和 Windows 上，此设置也会影响应用程序和上下文菜单的外观。更改需要完全重新启动才能应用。\n  &quot;window.titleBarStyle&quot;: &quot;custom&quot;,\n  // 控制工作台中活动栏的可见性。\n  &quot;workbench.activityBar.visible&quot;: true,\n  // 控制在会话期间显示已打开文件的编辑器是否应在被其他进程删除或重命名时自动关闭。\n  // 禁用此功能将使编辑器在此类事件中保持打开状态。\n  // 请注意，从应用程序内删除将始终关闭编辑器，且永远不会关闭具有未保存更改的编辑器以保留数据。\n  &quot;workbench.editor.closeOnFileDelete&quot;: true,\n  // 控制是否在具有未保存更改的编辑器的选项卡上绘制顶部边框。\n  &quot;workbench.editor.highlightModifiedTabs&quot;: true,\n  // 控制在工作台中字体的渲染方式。antialiased: 进行像素而不是次像素级别的字体平滑。可能会导致字体整体显示得更细\n  &quot;workbench.fontAliasing&quot;: &quot;antialiased&quot;,\n  // 控制列表和树是否具有平滑滚动效果。\n  &quot;workbench.list.smoothScrolling&quot;: true,\n  // 控制侧边栏和活动栏的位置。它们可以显示在工作台的左侧或右侧。\n  &quot;workbench.sideBar.location&quot;: &quot;left&quot;,\n  // 控制扩展的自动更新行为。更新是从 Microsoft 联机服务中获取的。\n  // onlyEnabledExtensions: 仅为已启用的扩展自动下载并安装更新。将不会自动更新已禁用的扩展。\n  &quot;extensions.autoUpdate&quot;: &quot;onlyEnabledExtensions&quot;,\n  // 启用后，将不会显示扩展建议的通知。\n  &quot;extensions.ignoreRecommendations&quot;: true,\n  // 控制终端光标是否闪烁。\n  &quot;terminal.integrated.cursorBlinking&quot;: true,\n  // 控制终端光标的样式。\n  &quot;terminal.integrated.cursorStyle&quot;: &quot;underline&quot;,\n  // 要在终端中用于非粗体文本的字体粗细。接受“正常”和“加粗”这两个关键字，或接受 1-1000 之间的数字。\n  &quot;terminal.integrated.fontWeight&quot;: &quot;300&quot;,\n  // 当必须关闭终端进程(例如当窗口或应用程序关闭时)时，这将确定何时应还原以前的终端会话内容，以及在下次打开工作区时重新创建的进程。\n  &quot;terminal.integrated.persistentSessionReviveProcess&quot;: &quot;never&quot;,\n  // 控制终端选项卡是否以列表的形式显示在终端的一侧。如果禁用此功能，将改为显示下拉列表。\n  &quot;terminal.integrated.tabs.enabled&quot;: true,\n  // 删除时，是否确认\n  &quot;explorer.confirmDelete&quot;: false,\n  // 控制在资源管理器内拖放移动文件或文件夹时是否进行确认。\n  &quot;explorer.confirmDragAndDrop&quot;: false,\n  // prettier eslint插件配置\n  &quot;editor.defaultFormatter&quot;: &quot;rvest.vs-code-prettier-eslint&quot;,\n  &quot;editor.formatOnPaste&quot;: false, // required\n  &quot;editor.formatOnType&quot;: false, // required\n  &quot;editor.formatOnSave&quot;: true, // optional\n  &quot;editor.formatOnSaveMode&quot;: &quot;file&quot;, // required to format on save\n  &quot;files.autoSave&quot;: &quot;onFocusChange&quot;, // optional but recommended\n  &quot;vs-code-prettier-eslint.prettierLast&quot;: &quot;false&quot;, // set as &quot;true&quot; to run &#39;prettier&#39; last not first\n\n  //----------------------------------------------------------------\n  /*配置html css js的默认格式化程序*/\n  // &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;,\n  // 针对以下文件关闭文件保存时自动格式化，也就是关闭Prettier作为代码格式化工具\n  &quot;[vue]&quot;: {\n    &quot;editor.formatOnSave&quot;: false,\n    &quot;editor.defaultFormatter&quot;: &quot;rvest.vs-code-prettier-eslint&quot;\n    // &quot;editor.defaultFormatter&quot;: &quot;Vue.volar&quot;\n    // &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;\n  },\n  //针对共用的语言如JS、TS和JSX关闭文件保存自动格式化功能，通过eslint来做这件事\n  &quot;[javascript]&quot;: {\n    &quot;editor.formatOnSave&quot;: false\n  },\n  &quot;[javascriptreact]&quot;: {\n    &quot;editor.formatOnSave&quot;: false\n  },\n  &quot;[typescript]&quot;: {\n    &quot;editor.formatOnSave&quot;: false\n  },\n  /*配置js*/\n  // &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true, //  #让函数(名)和后面的括号之间加个空格\n  // &quot;javascript.format.insertSpaceAfterConstructor&quot;: true, // 在构造函数和括号之间加空格\n  // &quot;javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces&quot;: true,\n  // &quot;javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis&quot;: true,\n  // &quot;javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces&quot;: true,\n  // &quot;javascript.format.insertSpaceAfterSemicolonInForStatements&quot;: true,\n  // &quot;javascript.format.insertSpaceBeforeAndAfterBinaryOperators&quot;: true, // 在二进制运算符之后定义空间处理。\n\n  /*  prettier的配置 */\n  &quot;prettier.printWidth&quot;: 200, // 超过最大值换行\n  &quot;prettier.tabWidth&quot;: 2, // 缩进字节数\n  &quot;prettier.useTabs&quot;: false, // 缩进不使用tab，使用空格\n  &quot;prettier.semi&quot;: false, // 句尾添加分号\n  &quot;prettier.trailingComma&quot;: &quot;none&quot;, // 无尾逗号\n  &quot;prettier.singleQuote&quot;: true, // 使用单引号代替双引号\n  &quot;prettier.proseWrap&quot;: &quot;preserve&quot;, // 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行\n  &quot;prettier.arrowParens&quot;: &quot;avoid&quot;, //  (x) =&gt; {} 箭头函数参数只有一个时是否要有小括号。avoid：省略括号\n  &quot;prettier.bracketSpacing&quot;: true, // 在对象，数组括号与文字之间加空格 &quot;{ foo: bar }&quot;\n  &quot;prettier.endOfLine&quot;: &quot;auto&quot;, // 结尾是 \\n \\r \\n\\r auto\n  &quot;prettier.htmlWhitespaceSensitivity&quot;: &quot;ignore&quot;,\n  &quot;prettier.requireConfig&quot;: false // Require a &#39;prettierconfig&#39; to format prettier\n}\n</code></pre>\n"},{"fileName":"vue-实现迷你观察者.md","content":"<pre><code>\nclass Dep {\n    constructor() {\n        // 订阅任务队列，方式有相同的任务，用Set数据结构简单处理\n        this.subscribers = new Set()\n    }\n    // 收集依赖\n    depend () {\n        if (activeUpdate) {\n            this.subscribers.add(activeUpdate)\n        }\n    }\n    // 派发更新\n    notify () {\n        this.subscribers.forEach(sub =&gt; sub())\n    }\n}\n// 响应式数据\nfunction observe (obj) {\n    Object.keys(obj).forEach(key =&gt; {\n        let internalValue = obj[key]\n        const dep = new Dep()\n        Object.defineProperty(obj, key, {\n            get () {\n                dep.depend()\n                return internalValue\n            },\n            set (newValue) {\n                // 是否更新条件\n                const changed = internalValue !== newValue\n                internalValue = newValue\n                if (changed) {\n                    dep.notify()\n                }\n            },\n\n        })\n\n    })\n}\n// 创建activeUpdate保存更新函数\nlet activeUpdate = null\n\nfunction autorun (update) {\n    activeUpdate = update\n    update()\n    activeUpdate = null\n    // const wrappedUpdate = () =&gt; {\n    //     activeUpdate = wrappedUpdate\n    //     update()\n    //     activeUpdate = null\n    // }\n    // wrappedUpdate()\n}\n\n\n\nconst state = {\n    count: 0,\n}\nobserve(state)\n// 自动函数 模拟访问或读取属性 此处模拟读取了count\nautorun(() =&gt; {\n    console.log(state.count)\n})\n// 打印&quot;count is: 0&quot;\n\nstate.count++\n// 打印&quot;count is: 1&quot;\n\n</code></pre>\n"},{"fileName":"vue-编写一个简单的rules校验插件.md","content":"<pre><code>&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  // 插件代码\n  const myPlugin = {\n    install(Vue) {\n      Vue.mixin({\n        created() {\n          // 获取实例的rules配置项\n          const rules = this.$options.rules;\n          if (rules) {\n            Object.keys(rules).forEach((key) =&gt; {\n              this.$watch(key, (newVal) =&gt; {\n                const result = rules[key].validate(newVal);\n                if (!result) {\n                  console.log(rules[key].message);\n                }\n              });\n            });\n          }\n        },\n      });\n    },\n  };\n  Vue.use(myPlugin);\n  const vm = new Vue({\n    data: { foo: 10 },\n    rules: {\n      foo: {\n        validate: (value) =&gt; value &gt; 1,\n        message: &quot;foo must be greater than one&quot;,\n      },\n    },\n  });\n  vm.foo = 0; // should log: &quot;foo must be greater than one&quot;\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"vue-编写简单的render函数.md","content":"<pre><code>&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&quot;&gt;&lt;/script&gt;\n&lt;div id=&quot;app&quot;&gt;\n  &lt;example :tags=&quot;[&#39;h1&#39;,&#39;h2&#39;,&#39;h3&#39;]&quot;&gt;&lt;/example&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  Vue.component(&quot;example&quot;, {\n    props: [&quot;tags&quot;],\n    render: function (h) {\n      //   const children = this.tags.map((tag, i) =&gt; h(tag, i));\n      //   return h(&quot;div&quot;, children);\n      return h(&quot;div&quot;,{ attrs: { id: &quot;hello&quot; } },this.tags.map((tag, i) =&gt; h(tag, i))\n      );\n    },\n  });\n  new Vue({ el: &quot;#app&quot; });\n&lt;/script&gt;\n</code></pre>\n<pre><code>&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&quot;&gt;&lt;/script&gt;\n&lt;div id=&quot;app&quot;&gt;\n  &lt;example :ok=&quot;ok&quot;&gt;&lt;/example&gt;\n  &lt;button @click=&quot;ok = !ok&quot;&gt;toggle&lt;/button&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  const Foo = {\n    render: (h) =&gt; h(&quot;div&quot;, &quot;foo&quot;),\n  };\n  const Bar = {\n    render: (h) =&gt; h(&quot;div&quot;, &quot;bar&quot;),\n  };\n  Vue.component(&quot;example&quot;, {\n    props: [&quot;ok&quot;],\n    render: function (h) {\n      return this.ok ? h(Foo) : h(Bar);\n    },\n  });\n  new Vue({ el: &quot;#app&quot;, data: { ok: true } });\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"vue.config.js 的完整配置.md","content":"<h2>1 介绍</h2>\n<p>被抽象化的webpack，我们要想去理解它默认的一些配置的话是比较困难的，所以我们可以通过指令去查看。\n该指令会将webpack的配置输出到output.js文件，这样方便去查看。</p>\n<pre><code>vue inspect &gt; output.js\n</code></pre>\n<p>vue.config.js文件\n这个文件导出了一个包含了选项的对象：</p>\n<pre><code>module.exports = {\n  // 选项...\n}\n</code></pre>\n<h2>2 基本配置</h2>\n<pre><code>module.exports = {\n    productionSourceMap: false,\n    publicPath: &#39;./&#39;,\n    outputDir: &#39;dist&#39;,\n    assetsDir: &#39;assets&#39;,\n    devServer: {\n        port: 8090,\n        host: &#39;0.0.0.0&#39;,\n        https: false,\n        open: true\n    },\n    // 其他配置\n    ...\n</code></pre>\n<p><code>productionSourceMap</code>：生产环境是否要生成 sourceMap</p>\n<p><code>publicPath</code>：部署应用包时的基本 URL,用法和 webpack 本身的 output.publicPath 一致</p>\n<p>可以通过三元运算去配置dev和prod环境, publicPath: process.env.NODE_ENV === &#39;production&#39; ? &#39;/prod/&#39; : &#39;./&#39;</p>\n<p><code>outputDir</code>: build 时输出的文件目录</p>\n<p><code>assetsDir</code>: 放置静态文件夹目录</p>\n<p><code>devServer</code>: dev环境下，webpack-dev-server 相关配置</p>\n<p><code>port</code>: 开发运行时的端口\n<code>host</code>: 开发运行时域名，设置成&#39;0.0.0.0&#39;,在同一个局域网下，如果你的项目在运行，同时可以通过你的<a href=\"http://ip:port/...%E8%AE%BF%E9%97%AE%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE\">http://ip:port/...访问你的项目</a>\n<code>https</code>: 是否启用 https\n<code>open</code>: npm run serve 时是否直接打开浏览器</p>\n<h2>3 插件及规则的配置</h2>\n<p>在vue.config.js如果要新增/修改 webpack 的 plugins 或者 rules , 有2种方式。\nconfigureWebpack 方式\nconfigureWebpack 是相对比较简单的一种方式</p>\n<p>它可以是一个对象：和 webpack 本身配置方式是一致，该对象将会被 webpack-merge 合并入最终的 webpack 配置\n它也可以是一个函数：直接在函数内部进行修改配置</p>\n<pre><code>configureWebpack: {\n    rules:[],\n    plugins: []\n  }\nconfigureWebpack: (config) =&gt; {\n    // 例如，通过判断运行环境，设置mode\n    config.mode = &#39;production&#39;\n} \n</code></pre>\n<p>chainWebpack 方式\nchainWebpack 链式操作 (高级)，接下来所有的配置我都会在该选项中进行配置</p>\n<h2>4 规则rules的配置</h2>\n<p>关于rules 的配置，我会分别从新增/修改进行介绍。</p>\n<h3>4.1 rules的新增</h3>\n<p>在webpack中 rules 是 module 的配置项，而所有的配置的都是挂载到 config 下的，所以新增一个rule方式：</p>\n<pre><code>config.module\n  .rule(name)\n    .use(name)\n      .loader(loader)\n      .options(options)\n</code></pre>\n<p>案例：style-resources-loader 来添加less全局变量\n案例：svg-sprite-loader 将svg图片以雪碧图的方式在项目中加载</p>\n<pre><code>module.exports = {\n    chainWebpack: (config) =&gt; {\n        // 通过 style-resources-loader 来添加less全局变量\n        const types = [&#39;vue-modules&#39;, &#39;vue&#39;, &#39;normal-modules&#39;, &#39;normal&#39;];\n        types.forEach(type =&gt; {\n            let rule = config.module.rule(&#39;less&#39;).oneOf(type)\n            rule.use(&#39;style-resource&#39;)\n                .loader(&#39;style-resources-loader&#39;)\n                .options({\n                    patterns: [path.resolve(__dirname, &#39;./lessVariates.less&#39;)]\n                });\n        });\n\n        // `svg-sprite-loader`: 将svg图片以雪碧图的方式在项目中加载\n        config.module\n            .rule(&#39;svg&#39;)\n            .test(/.svg$/) // 匹配svg文件\n            .include.add(resolve(&#39;src/svg&#39;)) // 主要匹配src/svg\n            .end() \n            .use(&#39;svg-sprite-loader&#39;)\n            .loader(&#39;svg-sprite-loader&#39;) // 使用的loader，主要要npm该插件\n            .options({symbolId: &#39;svg-[name]&#39;}) // 参数配置\n    }\n}\n</code></pre>\n<h3>4.2 rules的修改</h3>\n<p>针对已经存在的 rule , 如果需要修改它的参数, 可以使用 tap 方法：</p>\n<pre><code>config.module\n  .rule(name)\n    .use(name)\n      .tap(options =&gt; newOptions)\n</code></pre>\n<p>案例：修改url-loader的参数</p>\n<pre><code>module.exports = {\n    chainWebpack: (config) =&gt; {\n        // `url-loader`是webpack默认已经配置的，现在我们来修改它的参数\n        config.module.rule(&#39;images&#39;)\n            .use(&#39;url-loader&#39;)\n            .tap(options =&gt; ({\n                name: &#39;./assets/images/[name].[ext]&#39;,\n                quality: 85,\n                limit: 0,\n                esModule: false,\n            }))\n    }\n}\n</code></pre>\n<h2>5 插件plugins 的配置</h2>\n<p>关于 plugins 的配置，我会分别从新增/修改/删除进行介绍。</p>\n<h3>5.1 plugins的新增</h3>\n<p>注意：这里WebpackPlugin不需要通过new WebpackPlugin()使用。</p>\n<pre><code>config\n  .plugin(name)\n  .use(WebpackPlugin, args)\n</code></pre>\n<p>案例：新增hot-hash-webpack-plugin</p>\n<pre><code>const HotHashWebpackPlugin = require(&#39;hot-hash-webpack-plugin&#39;);\nmodule.exports = {\n    chainWebpack: (config) =&gt; {\n        // 新增一个`hot-hash-webpack-plugin`\n        // 注意：这里use的时候不需要使用`new HotHashWebpackPlugin()`\n        config.plugin(&#39;hotHash&#39;)\n              .use(HotHashWebpackPlugin, [{ version: &#39;1.0.0&#39; }]);\n    }\n}\n</code></pre>\n<h3>5.2 plugins的修改</h3>\n<p>同理, plugin 参数的修改也是通过 tap 去修改。</p>\n<pre><code>config\n    .plugin(name)\n    .tap(args =&gt; newArgs)\n</code></pre>\n<p>案例：修改打包后css抽离后的filename及抽离所属目录\n案例：删除console和debugger</p>\n<pre><code>const HotHashWebpackPlugin = require(&#39;hot-hash-webpack-plugin&#39;);\nmodule.exports = {\n    chainWebpack: (config) =&gt; {\n        // 修改打包时css抽离后的filename及抽离所属目录\n        config.plugin(&#39;extract-css&#39;)\n                .tap(args =&gt; [{\n                    filename: &#39;css/[name].[contenthash:8].css&#39;,\n                    chunkFilename: &#39;css/[name].[contenthash:8].css&#39;\n                }]);\n        \n        // 正式环境下，删除console和debugger\n        config.optimization\n                .minimize(true)\n                .minimizer(&#39;terser&#39;)\n                .tap(args =&gt; {\n                    let { terserOptions } = args[0];\n                    terserOptions.compress.drop_console = true;\n                    terserOptions.compress.drop_debugger = true;\n                    return args\n                });\n    }\n}\n</code></pre>\n<h3>5.3 plugins的删除</h3>\n<p>对于一些webpack默认的 plugin ，如果不需要可以进行删除</p>\n<pre><code>config.plugins.delete(name)\n</code></pre>\n<p>案例：删除 vue-cli3.X 模块的自动分割抽离</p>\n<pre><code>module.exports = {\n    chainWebpack: (config) =&gt; {\n        // vue-cli3.X 会自动进行模块分割抽离，如果不需要进行分割,可以手动删除\n        config.optimization.delete(&#39;splitChunks&#39;); \n        \n    }\n}\n</code></pre>\n<h2>6 一些常见的配置</h2>\n<h3>6.1 修改enter文件</h3>\n<pre><code>webpack 默认的 entry 入口是 scr/main.ts\nconfig.entryPoints.clear(); // 清空默认入口\nconfig.entry(&#39;test&#39;).add(getPath(&#39;./test/main.ts&#39;)); // 重新设置\n</code></pre>\n<h3>6.2 DefinePlugin</h3>\n<p>定义全局全局变量，DefinePlugin 是 webpack 已经默认配置的，我们可以对参数进行修改</p>\n<pre><code>config.plugin(&#39;define&#39;).tap(args =&gt; [{ \n    ...args, \n    &quot;window.isDefine&quot;: JSON.stringify(true),\n    }]);\n</code></pre>\n<h3>6.3 自定义filename 及 chunkFilename</h3>\n<p>自定义打包后js文件的路径及文件名字</p>\n<pre><code>config.output.filename(&#39;./js/[name].[chunkhash:8].js&#39;);\nconfig.output.chunkFilename(&#39;./js/[name].[chunkhash:8].js&#39;);\n</code></pre>\n<h3>6.4 修改html-webpack-plugin参数</h3>\n<pre><code>html-webpack-plugin 是 webpack 已经默认配置的，默认的源模版文件是 public/index.html ;我们可以对其参数进行修改\n config.plugin(&#39;html&#39;)\n        .tap(options =&gt; [{\n            template: &#39;../../index.html&#39; // 修改源模版文件\n            title: &#39;test&#39;,\n        }]);\n</code></pre>\n<h3>6.5 设置别名alias</h3>\n<p>webpack默认是将src的别名设置为@, 此外，我们可以进行添加</p>\n<pre><code>config.resolve.alias\n        .set(&#39;@&#39;, resolve(&#39;src&#39;)) \n        .set(&#39;api&#39;, resolve(&#39;src/apis&#39;))\n        .set(&#39;common&#39;, resolve(&#39;src/common&#39;))\n</code></pre>\n<h2>7 附上一份我的vue.config.js的配置</h2>\n<pre><code>const path = require(&#39;path&#39;);\nconst HotHashWebpackPlugin = require(&#39;hot-hash-webpack-plugin&#39;);\nconst WebpackBar = require(&#39;webpackbar&#39;);\nconst resolve = (dir) =&gt; path.join(__dirname, &#39;.&#39;, dir);\n\nmodule.exports = {\n    productionSourceMap: false,\n    publicPath: &#39;./&#39;,\n    outputDir: &#39;dist&#39;,\n    assetsDir: &#39;assets&#39;,\n    devServer: {\n        port: 9999,\n        host: &#39;0.0.0.0&#39;,\n        https: false,\n        open: true\n    },\n\n    chainWebpack: (config) =&gt; {\n        const types = [&#39;vue-modules&#39;, &#39;vue&#39;, &#39;normal-modules&#39;, &#39;normal&#39;];\n        types.forEach(type =&gt; {\n            let rule = config.module.rule(&#39;less&#39;).oneOf(type)\n            rule.use(&#39;style-resource&#39;)\n                .loader(&#39;style-resources-loader&#39;)\n                .options({\n                    patterns: [path.resolve(__dirname, &#39;./lessVariates.less&#39;)]\n                });\n        });\n\n        config.resolve.alias\n            .set(&#39;@&#39;, resolve(&#39;src&#39;)) \n            .set(&#39;api&#39;, resolve(&#39;src/apis&#39;))\n            .set(&#39;common&#39;, resolve(&#39;src/common&#39;))\n\n        config.module.rule(&#39;images&#39;).use(&#39;url-loader&#39;)\n            .tap(options =&gt; ({\n                name: &#39;./assets/images/[name].[ext]&#39;,\n                quality: 85,\n                limit: 0,\n                esModule: false,\n            }));\n\n        config.module.rule(&#39;svg&#39;)\n            .test(/.svg$/)\n            .include.add(resolve(&#39;src/svg&#39;))\n            .end()\n            .use(&#39;svg-sprite-loader&#39;)\n            .loader(&#39;svg-sprite-loader&#39;);\n\n        config.plugin(&#39;define&#39;).tap(args =&gt; [{\n            ...args, \n            &quot;window.isDefine&quot;: JSON.stringify(true)\n        }]);\n\n        // 生产环境配置\n        if (process.env.NODE_ENV === &#39;production&#39;) {\n            config.output.filename(&#39;./js/[name].[chunkhash:8].js&#39;);\n            config.output.chunkFilename(&#39;./js/[name].[chunkhash:8].js&#39;);\n            config.plugin(&#39;extract-css&#39;).tap(args =&gt; [{\n                filename: &#39;css/[name].[contenthash:8].css&#39;,\n                chunkFilename: &#39;css/[name].[contenthash:8].css&#39;\n            }]);\n            config.plugin(&#39;hotHash&#39;).use(HotHashWebpackPlugin, [{ version : &#39;1.0.0&#39;}]);\n            config.plugin(&#39;webpackBar&#39;).use(WebpackBar);\n\n            config.optimization.minimize(true)\n                .minimizer(&#39;terser&#39;)\n                .tap(args =&gt; {\n                    let { terserOptions } = args[0];\n                    terserOptions.compress.drop_console = true;\n                    terserOptions.compress.drop_debugger = true;\n                    return args\n                });\n            config.optimization.splitChunks({\n                cacheGroups: {\n                    common: {\n                        name: &#39;common&#39;,\n                        chunks: &#39;all&#39;,\n                        minSize: 1,\n                        minChunks: 2,\n                        priority: 1\n                    },\n                    vendor: {\n                        name: &#39;chunk-libs&#39;,\n                        chunks: &#39;all&#39;,\n                        test: /[\\/]node_modules[\\/]/,\n                        priority: 10\n                    }\n                }\n            });\n        }\n    }\n};\n</code></pre>\n"},{"fileName":"vueRouter-hash模式和history模式.md","content":"<h2>1.hash模式</h2>\n<p>这里的hash就是指url尾巴后的 # 号以及后面的字符。这里的 # 和css里的 # 是一个意思。hash也称作锚点，本身是用来做页面定位的，他可以使对应的id元素显示在可视区域内。</p>\n<p>特点：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p>\n<p>监听hash值变化</p>\n<pre><code>// 浏览器url不包含hash值 基于hash模式的vueRouter在hash值改变后不会影响url,页面不会进行刷新\n  // 监听hash值改变后重新刷新浏览器\n  window.onhashchange = function () {\n    if (window.location.hash.includes(&#39;guidePage&#39;)) {\n      window.location.reload()\n    }\n  }\n</code></pre>\n<p>由于hash值变化不会导致浏览器向服务器发出请求，而且hash改变会触发hashchange事件，浏览器的进后退也能对其进行控制，所以人们在html5的history出现前，基本都是使用hash来实现前端路由的。他的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。hash 本来是拿来做页面定位的，如果拿来做路由的话，原来的锚点功能就不能用了。其次，hash的而传参是基于url的，如果要传递复杂的数据，会有体积的限制.</p>\n<h2>2.history模式</h2>\n<p>history模式不仅可以在url里放参数，还可以将数据存放在一个特定的对象中。\nhistory———利用了HTML5 History Interface 中新增的pushState（）和replaceState（）方法。（需要特定浏览器的支持，history不能运用与IE8一下）</p>\n<p>这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。</p>\n<p>因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由。</p>\n<h3>注意</h3>\n<p>history模式下，前端的url必须和实际后端发起请求的url一致，如<a href=\"http://www.abc.com/book/id\">http://www.abc.com/book/id</a> 。如果后端缺少对/book/id 的路由处理，将返回404错误。\nhistory模式下vue.config.js中publicPath不支持./相对路径</p>\n"},{"fileName":"vuex模块化使用.md","content":"<h3>vuex模块化使用</h3>\n<p>store结构</p>\n<ul>\n<li>store<ul>\n<li>index.js</li>\n<li>modules<ul>\n<li>d2admin<ul>\n<li>index.js</li>\n<li>modules<ul>\n<li>log.js</li>\n<li>zoomGlobal.js</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><code>index.js</code></p>\n<pre><code class=\"language-js\">import Vue from &#39;vue&#39;\nimport Vuex from &#39;vuex&#39;\n\nimport d2admin from &#39;./modules/d2admin&#39;\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    d2admin\n  }\n})\n</code></pre>\n<p><code>modules/d2admin/index.js</code></p>\n<pre><code class=\"language-js\">/**\n * The file enables `@/store/index.js` to import all vuex modules\n * in a one-shot manner. There should not be any reason to edit this file.\n */\n\nconst files = require.context(&#39;./modules&#39;, false, /\\.js$/)\nconst modules = {}\n\nfiles.keys().forEach(key =&gt; {\n  modules[key.replace(/(\\.\\/|\\.js)/g, &#39;&#39;)] = files(key).default\n})\n\nexport default {\n  namespaced: true,\n  modules\n}\n</code></pre>\n<p><code>modules/d2admin/modules/log.js</code></p>\n<pre><code class=\"language-js\">import dayjs from &#39;dayjs&#39;\nimport { get, toString } from &#39;lodash&#39;\nimport util from &#39;@/libs/util.js&#39;\n\nexport default {\n  namespaced: true,\n  state: {\n    // 错误日志\n    list: []\n  },\n  getters: {\n    /**\n     * @description 返回现存 log (all) 的条数\n     * @param {*} state vuex state\n     */\n    length (state) {\n      return state.list.length\n    },\n    /**\n     * @description 返回现存 log (error) 的条数\n     * @param {*} state vuex state\n     */\n    lengthError (state) {\n      return state.list.filter(l =&gt; l.type === &#39;error&#39;).length\n    }\n  },\n  actions: {\n    /**\n     * @description 添加一个日志\n     * @param {Object} param type {String} 类型\n     * @param {Object} param err {Error} 错误对象\n     * @param {Object} param instance {Object} vue 实例\n     * @param {Object} param info {String} 信息\n     */\n    add ({ state, rootState }, { type, err, instance, info }) {\n      // store 赋值\n      state.list.push(Object.assign({\n        // 记录类型 &quot;log&quot; or &quot;error&quot;\n        type: &#39;log&#39;,\n        // 信息\n        info: &#39;&#39;,\n        // 错误对象\n        err: &#39;&#39;,\n        // vue 实例\n        instance: &#39;&#39;,\n        // 当前用户信息\n        user: rootState.d2admin.user.info,\n        // 当前用户的 uuid\n        uuid: util.cookies.get(&#39;uuid&#39;),\n        // 当前的 token\n        token: util.cookies.get(&#39;token&#39;),\n        // 当前地址\n        url: get(window, &#39;location.href&#39;, &#39;&#39;),\n        // 当前时间\n        time: dayjs().format(&#39;YYYY-M-D HH:mm:ss&#39;)\n      }, {\n        type,\n        err,\n        instance,\n        info: toString(info)\n      }))\n    }\n  },\n  mutations: {\n    /**\n     * @description 清空日志\n     * @param {Object} state vuex state\n     */\n    clean (state) {\n      // store 赋值\n      state.list = []\n    }\n  }\n}\n</code></pre>\n<p><code>自己写的保存和读取主框架zoom缩放 zoomGlobal</code></p>\n<pre><code class=\"language-js\">export default {\n    namespaced: true,\n    state:{\n        zoom:1,\n    },\n    getters:{\n        getZoom(state) {\n            return state.zoom\n        }\n    },\n    mutations:{\n        setZoom (state,zoom) {\n            state.zoom = zoom\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<pre><code class=\"language-js\">import { mapState, mapActions } from &#39;vuex&#39;\nexport default {\n       created () {\n        //根据窗口缩放比例对页面进行缩放\n        this.$store.commit(&#39;d2admin/zoomGlobal/setZoom&#39;, 1 * window.devicePixelRatio)\n      },\n    computed: {\n           ...mapState(&#39;d2admin/menu&#39;, [&#39;header&#39;]),\n        ...mapState(&#39;d2admin/user&#39;, [&#39;info&#39;]),\n        ...mapGetters(&#39;d2admin&#39;, {logLength: &#39;log/length&#39;,logLengthError: &#39;log/lengthError&#39;}),\n      },\n    methods: {\n        ...mapActions(&#39;d2admin/account&#39;, [&#39;logout&#39;]),\n        ...mapMutations(&#39;d2admin/log&#39;, [&#39;clean&#39;]),\n      }, \n}\n\n</code></pre>\n"},{"fileName":"vue中的.capture修饰符.md","content":"<p>capture 抓取/捕获</p>\n<pre><code>&lt;button @click.capture.stop=&quot;click()&quot;&gt;&lt;/button&gt;\n</code></pre>\n<h2>.capture事件修饰符的作用添加事件侦听器时使用事件捕获模式</h2>\n<ul>\n<li>即是给元素添加一个监听器，当元素发生冒泡时，先触发带有该修饰符的元素。若有多个该修饰符，则由外而内触发。\n就是谁有该事件修饰符，就先触发谁。</li>\n</ul>\n<h2>.stop 阻止单击事件继续传播</h2>\n"},{"fileName":"vue亚马逊云AWS SDK对接封装.md","content":"<p>使用亚马逊云的AWS3sdk实现云存储对接，作为最大的云存储服务商国内腾讯的cos阿里的alicos以及minio\n都兼容亚马逊的sdk，这样在对接时可减少很多工作量，同时也支持在服务商间快速切换</p>\n<h3>说明</h3>\n<p><code>cacheStsInfo</code>为由后端返回的sts配置信息，根据实际业务需要，具体信息包含\n<img src=\"https://img2023.cnblogs.com/blog/2483371/202305/2483371-20230529150903058-2034294158.png\" alt=\"\"></p>\n<p>以上数据最后由前端缓存下来后，每次使用时根据过期时间进行判断，过期后在重新请求(此处缓存的逻辑代码忽略，自行实现即可)</p>\n<p><code>ProxyAWS</code>为单例模式代理</p>\n<p><code>binconv</code>为安装的插件 ，AWS sdk读取文件时返回的是readableStream，binconv的作用就是将readableStream 转换成blob，</p>\n<p><code>createFileKey</code>和<code>randomNum</code>是根据用户id,桶名生成文件名的方法（根据实际业务需要进行调整）</p>\n<pre><code>import { cacheStsInfo } from &#39;./cacheStsInfo&#39;\nimport S3 from &#39;aws-sdk/clients/s3&#39;\nimport * as binconv from &#39;binconv&#39;\nimport { Message } from &#39;element-ui&#39;\n\nlet ProxyAWS = (function () {\n  let instance\n  return function (info) {\n    if (!instance) {\n      instance = new S3({\n        endpoint: info.ossInfo.endpoint,\n        accessKeyId: info.credentials.tmpAccessKey,\n        secretAccessKey: info.credentials.tmpSecretKey,\n        sessionToken: info.credentials.sessionToken,\n        s3ForcePathStyle: true, // 使用路径样式访问\n        signatureVersion: &#39;v4&#39; // 使用v4签名版本\n      })\n    }\n    return instance\n  }\n})()\n\nconst uploader = {\n  getUrl: async function (objectId) {\n    let info = await cacheStsInfo()\n    const s3 = new ProxyAWS(info)\n    return new Promise((resolve, reject) =&gt; {\n      s3.getObject({ Bucket: info.ossInfo.bucket, Key: objectId }, async function (error, fileData) {\n        if (!error) {\n          console.log(fileData, &#39;file&#39;)\n          // 将readableStream 转换成blob\n          const blob = await binconv.readableStreamToBlob(fileData.Body)\n          const newBlob = new Blob([blob], { type: fileData.ContentType })\n          let url = window.URL.createObjectURL(newBlob)\n          resolve(url)\n        } else {\n          console.log(error, &#39; ERROR &#39;)\n        }\n      })\n    })\n  },\n  uploadFile: async function (file, filename, objectId = &#39;&#39;) {\n    let info = await cacheStsInfo()\n    if (objectId === &#39;&#39; || objectId === undefined) {\n      objectId = createFileKey(info.permissionPath, filename)\n    }\n    const s3 = new ProxyAWS(info)\n    s3.upload({ Bucket: info.ossInfo.bucket, Key: objectId, Body: file }, (err, data) =&gt; {\n      if (err) {\n        console.log(err)\n        Message.error(&#39;上传失败&#39;)\n      } else {\n        console.log(data)\n        Message.success(&#39;上传成功&#39;)\n      }\n    })\n    let params = {\n      Bucket: info.ossInfo.bucket, Key: objectId, Expires: 3600\n    }\n    let url = s3.getSignedUrl(&#39;getObject&#39;, params)\n    return { objectId, url }\n  }\n}\n\n/* 生成上传到桶中filepath，也就是存库的objectId*/\nfunction createFileKey (permissionPath, filename) {\n  let fileType = filename.substring(filename.lastIndexOf(&#39;.&#39;))\n  return `${permissionPath + randomNum(6)}${parseInt(Math.floor(Math.random() * Date.now()) / 1000)}${fileType}`\n}\n\nconst randomNum = (len) =&gt; {\n  len = len || 32\n  let chars = &#39;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz&#39;\n  let maxPos = chars.length\n  let rnd = &#39;&#39;\n  for (let i = 0; i &lt; len; i++) {\n    rnd += chars.charAt(Math.floor(Math.random() * maxPos))\n  }\n  return rnd\n}\n\nexport default uploader\n</code></pre>\n"},{"fileName":"vue单页面简单处理浏览器缩放.md","content":"<p>适合登录页面等单独的页面处理浏览器缩放</p>\n<pre><code> mounted () {\n    window.onresize = () =&gt; {\n      this.$nextTick(() =&gt; {\n        const el = document.querySelector(&#39;.login-wrapper&#39;)\n        el.style.zoom = String(document.body.offsetWidth / 1920)\n      })\n    }\n  },\n</code></pre>\n"},{"fileName":"vue对kindeditor进行封装以及使用.md","content":"<p>下载kind editor后需要使用的文件如下（其他没用到的可删除）\n<img src=\"https://img2023.cnblogs.com/blog/2483371/202305/2483371-20230529145900389-32277470.png\" alt=\"\"></p>\n<p>封装成组件以及自定义上传插件</p>\n<p>上传图片后生成image 标签插入\n上传文件后生成下载a链接插入</p>\n<pre><code>&lt;template&gt;\n    &lt;div class=&quot;kindeditor-component&quot;&gt;\n        &lt;input id=&quot;file-input&quot; style=&quot;display: none&quot; type=&quot;file&quot;&gt;\n        &lt;textarea :id=&quot;id&quot; v-model=&quot;outContent&quot; name=&quot;content&quot;&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nimport request from &#39;@/plugin/axios/request&#39;\nimport { Message } from &#39;element-ui&#39;\n\nexport default {\n  name: &#39;kindeditor-component&#39;,\n  data () {\n    return {\n      editor: null,\n      outContent: this.content\n    }\n  },\n  props: {\n    isReadonly: {\n      type: Boolean,\n      default: false\n    },\n    header: {\n      type: Object,\n      default: () =&gt; ({})\n    },\n    content: {\n      type: String,\n      default: &#39;&#39;\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    width: {\n      type: String\n    },\n    height: {\n      type: String\n    },\n    minWidth: {\n      type: Number,\n      default: 650\n    },\n    minHeight: {\n      type: Number,\n      default: 100\n    },\n    items: {\n      type: Array,\n      default: function () {\n        return [\n          &#39;source&#39;, &#39;|&#39;, &#39;undo&#39;, &#39;redo&#39;, &#39;|&#39;, &#39;preview&#39;, &#39;print&#39;, &#39;template&#39;, &#39;code&#39;, &#39;cut&#39;, &#39;copy&#39;, &#39;paste&#39;,\n          &#39;plainpaste&#39;, &#39;wordpaste&#39;, &#39;|&#39;, &#39;justifyleft&#39;, &#39;justifycenter&#39;, &#39;justifyright&#39;,\n          &#39;justifyfull&#39;, &#39;insertorderedlist&#39;, &#39;insertunorderedlist&#39;, &#39;indent&#39;, &#39;outdent&#39;, &#39;subscript&#39;,\n          &#39;superscript&#39;, &#39;clearhtml&#39;, &#39;quickformat&#39;, &#39;selectall&#39;, &#39;|&#39;, &#39;fullscreen&#39;, &#39;/&#39;,\n          &#39;formatblock&#39;, &#39;fontname&#39;, &#39;fontsize&#39;, &#39;|&#39;, &#39;forecolor&#39;, &#39;hilitecolor&#39;, &#39;bold&#39;,\n          &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;lineheight&#39;, &#39;removeformat&#39;, &#39;|&#39;,\n          &#39;table&#39;, &#39;hr&#39;, &#39;emoticons&#39;, &#39;pagebreak&#39;,\n          &#39;anchor&#39;, &#39;link&#39;, &#39;unlink&#39;, &#39;|&#39;\n        ]\n        /* return [\n         &#39;source&#39;, &#39;|&#39;, &#39;undo&#39;, &#39;redo&#39;, &#39;|&#39;, &#39;preview&#39;, &#39;print&#39;, &#39;template&#39;, &#39;code&#39;, &#39;cut&#39;, &#39;copy&#39;, &#39;paste&#39;,\n         &#39;plainpaste&#39;, &#39;wordpaste&#39;, &#39;|&#39;, &#39;justifyleft&#39;, &#39;justifycenter&#39;, &#39;justifyright&#39;,\n         &#39;justifyfull&#39;, &#39;insertorderedlist&#39;, &#39;insertunorderedlist&#39;, &#39;indent&#39;, &#39;outdent&#39;, &#39;subscript&#39;,\n         &#39;superscript&#39;, &#39;clearhtml&#39;, &#39;quickformat&#39;, &#39;selectall&#39;, &#39;|&#39;, &#39;fullscreen&#39;, &#39;/&#39;,\n         &#39;formatblock&#39;, &#39;fontname&#39;, &#39;fontsize&#39;, &#39;|&#39;, &#39;forecolor&#39;, &#39;hilitecolor&#39;, &#39;bold&#39;,\n         &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;lineheight&#39;, &#39;removeformat&#39;, &#39;|&#39;, &#39;image&#39;, &#39;multiimage&#39;,\n         &#39;flash&#39;, &#39;media&#39;, &#39;insertfile&#39;, &#39;table&#39;, &#39;hr&#39;, &#39;emoticons&#39;, &#39;baidumap&#39;, &#39;pagebreak&#39;,\n         &#39;anchor&#39;, &#39;link&#39;, &#39;unlink&#39;, &#39;|&#39;, &#39;about&#39;\n         ] */\n      }\n    },\n    noDisableItems: {\n      type: Array,\n      default: function () {\n        return [&#39;source&#39;, &#39;fullscreen&#39;]\n      }\n    },\n    filterMode: {\n      type: Boolean,\n      default: true\n    },\n    htmlTags: {\n      type: Object,\n      default: function () {\n        return {\n          font: [&#39;color&#39;, &#39;size&#39;, &#39;face&#39;, &#39;.background-color&#39;],\n          span: [&#39;style&#39;],\n          div: [&#39;class&#39;, &#39;align&#39;, &#39;style&#39;],\n          table: [&#39;class&#39;, &#39;border&#39;, &#39;cellspacing&#39;, &#39;cellpadding&#39;, &#39;width&#39;, &#39;height&#39;, &#39;align&#39;, &#39;style&#39;],\n          &#39;td,th&#39;: [&#39;class&#39;, &#39;align&#39;, &#39;valign&#39;, &#39;width&#39;, &#39;height&#39;, &#39;colspan&#39;, &#39;rowspan&#39;, &#39;bgcolor&#39;, &#39;style&#39;],\n          a: [&#39;class&#39;, &#39;href&#39;, &#39;target&#39;, &#39;name&#39;, &#39;style&#39;],\n          embed: [&#39;src&#39;, &#39;width&#39;, &#39;height&#39;, &#39;type&#39;, &#39;loop&#39;, &#39;autostart&#39;, &#39;quality&#39;,\n            &#39;style&#39;, &#39;align&#39;, &#39;allowscriptaccess&#39;, &#39;/&#39;],\n          img: [&#39;src&#39;, &#39;width&#39;, &#39;height&#39;, &#39;border&#39;, &#39;alt&#39;, &#39;title&#39;, &#39;align&#39;, &#39;style&#39;, &#39;/&#39;],\n          hr: [&#39;class&#39;, &#39;/&#39;],\n          br: [&#39;/&#39;],\n          &#39;p,ol,ul,li,blockquote,h1,h2,h3,h4,h5,h6&#39;: [&#39;align&#39;, &#39;style&#39;],\n          &#39;tbody,tr,strong,b,sub,sup,em,i,u,strike&#39;: []\n        }\n      }\n    },\n    wellFormatMode: {\n      type: Boolean,\n      default: true\n    },\n    resizeType: {\n      type: Number,\n      default: 2\n    },\n    themeType: {\n      type: String,\n      default: &#39;default&#39;\n    },\n    langType: {\n      type: String,\n      default: &#39;zh-CN&#39;\n    },\n    designMode: {\n      type: Boolean,\n      default: true\n    },\n    fullscreenMode: {\n      type: Boolean,\n      default: false\n    },\n    basePath: {\n      type: String\n    },\n    themesPath: {\n      type: String\n    },\n    pluginsPath: {\n      type: String,\n      default: &#39;&#39;\n    },\n    langPath: {\n      type: String\n    },\n    minChangeSize: {\n      type: Number,\n      default: 5\n    },\n    loadStyleMode: {\n      type: Boolean,\n      default: true\n    },\n    urlType: {\n      type: String,\n      default: &#39;&#39;\n    },\n    newlineTag: {\n      type: String,\n      default: &#39;p&#39;\n    },\n    pasteType: {\n      type: Number,\n      default: 2\n    },\n    dialogAlignType: {\n      type: String,\n      default: &#39;page&#39;\n    },\n    shadowMode: {\n      type: Boolean,\n      default: true\n    },\n    zIndex: {\n      type: Number,\n      default: 811213\n    },\n    useContextmenu: {\n      type: Boolean,\n      default: true\n    },\n    syncType: {\n      type: String,\n      default: &#39;form&#39;\n    },\n    indentChar: {\n      type: String,\n      default: &#39;\\t&#39;\n    },\n    cssPath: {\n      type: [String, Array]\n    },\n    cssData: {\n      type: String\n    },\n    bodyClass: {\n      type: String,\n      default: &#39;ke-content&#39;\n    },\n    colorTable: {\n      type: Array\n    },\n    afterCreate: {\n      type: Function\n    },\n    afterChange: {\n      type: Function\n    },\n    afterTab: {\n      type: Function\n    },\n    afterFocus: {\n      type: Function\n    },\n    afterBlur: {\n      type: Function\n    },\n    afterUpload: {\n      type: Function\n    },\n    uploadJson: {\n      type: String\n    },\n    fileManagerJson: {\n      type: String\n    },\n    allowPreviewEmoticons: {\n      type: Boolean,\n      default: true\n    },\n    allowImageUpload: {\n      type: Boolean,\n      default: true\n    },\n    allowFlashUpload: {\n      type: Boolean,\n      default: true\n    },\n    allowMediaUpload: {\n      type: Boolean,\n      default: true\n    },\n    allowFileUpload: {\n      type: Boolean,\n      default: true\n    },\n    allowFileManager: {\n      type: Boolean,\n      default: false\n    },\n    fontSizeTable: {\n      type: Array,\n      default: function () {\n        return [&#39;9px&#39;, &#39;10px&#39;, &#39;12px&#39;, &#39;14px&#39;, &#39;16px&#39;, &#39;18px&#39;, &#39;24px&#39;, &#39;32px&#39;]\n      }\n    },\n    imageTabIndex: {\n      type: Number,\n      default: 0\n    },\n    formatUploadUrl: {\n      type: Boolean,\n      default: true\n    },\n    fullscreenShortcut: {\n      type: Boolean,\n      default: false\n    },\n    extraFileUploadParams: {\n      type: Object,\n      default: function () {\n        return {}\n      }\n    },\n    filePostName: {\n      type: String,\n      default: &#39;imgFile&#39;\n    },\n    fillDescAfterUploadImage: {\n      type: Boolean,\n      default: false\n    },\n    afterSelectFile: {\n      type: Function\n    },\n    pagebreakHtml: {\n      type: String,\n      default: &#39;&lt;hr style=&quot;page-break-after: always;&quot; class=&quot;ke-pagebreak&quot; /&gt;&#39;\n    },\n    allowImageRemote: {\n      type: Boolean,\n      default: true\n    },\n    autoHeightMode: {\n      type: Boolean,\n      default: false\n    },\n    fixToolBar: {\n      type: Boolean,\n      default: false\n    },\n    tabIndex: {\n      type: Number\n    }\n  },\n  watch: {\n    content (val) {\n      this.editor &amp;&amp; val !== this.outContent &amp;&amp; this.editor.html(val)\n    },\n    outContent (val) {\n      this.$emit(&#39;update:content&#39;, val)\n      this.$emit(&#39;on-content-change&#39;, val)\n    },\n    isReadonly (val) {\n      this.editor.readonly(val)\n    }\n  },\n  mounted () {\n    // 初始访问时创建\n    this.initEditor()\n  },\n  /**\n   * keep-alive 会用到进入时调用activated 离开时调用deactivated\n   * 初始访问 created、mounted 切换时deactivated 再次进入时 activated\n   */\n  activated () {\n    // keep-alive 进入时创建\n    this.initEditor()\n  },\n  deactivated () {\n    // keep-alive 离开时移除\n    this.removeEditor()\n  },\n  methods: {\n    removeEditor () {\n      window.KindEditor.remove(&#39;#&#39; + this.id)\n    },\n    initEditor () {\n      var _this = this\n      _this.removeEditor()\n      // 鼠标停留到插件时显示的插件名\n      window.KindEditor.lang({\n        myUpload: &#39;上传&#39;\n      })\n      // 添加上传插件\n      window.KindEditor.plugin(&#39;myUpload&#39;, function (K) {\n        var editor = this\n        var name = &#39;myUpload&#39;\n        // 点击图标时执行\n        editor.clickToolbar(name, async function () {\n          // 选择文件后进行上传\n          if (!this.uploadJson) {\n            return Message({\n              type: &#39;warning&#39;,\n              message: &#39;请先配置上传服务地址（uploadJson)&#39;\n            })\n          }\n          const res = await _this.openSelectFile()\n          if (res.type.startsWith(&#39;image&#39;)) {\n            // 插入图片\n            editor.insertHtml(`&lt;img src=&quot;${res.url}&quot;&gt;&lt;/img&gt;`)\n          } else {\n            // 插入超链接\n            editor.insertHtml(`&lt;a href=&quot;${res.url}&quot; target=&quot;_blank&quot;&gt;${res.url}&lt;/a&gt;`)\n          }\n        })\n      })\n      _this.editor = window.KindEditor.create(&#39;#&#39; + this.id, {\n        header: _this.header,\n        width: _this.width,\n        height: _this.height,\n        minWidth: _this.minWidth,\n        minHeight: _this.minHeight,\n        items: [..._this.items, &#39;myUpload&#39;],\n        noDisableItems: _this.noDisableItems,\n        filterMode: _this.filterMode,\n        htmlTags: _this.htmlTags,\n        wellFormatMode: _this.wellFormatMode,\n        resizeType: _this.resizeType,\n        themeType: _this.themeType,\n        langType: _this.langType,\n        designMode: _this.designMode,\n        fullscreenMode: _this.fullscreenMode,\n        basePath: _this.basePath,\n        themesPath: _this.themesPath,\n        pluginsPath: _this.pluginsPath,\n        langPath: _this.langPath,\n        minChangeSize: _this.minChangeSize,\n        loadStyleMode: _this.loadStyleMode,\n        urlType: _this.urlType,\n        newlineTag: _this.newlineTag,\n        pasteType: _this.pasteType,\n        dialogAlignType: _this.dialogAlignType,\n        shadowMode: _this.shadowMode,\n        zIndex: _this.zIndex,\n        useContextmenu: _this.useContextmenu,\n        syncType: _this.syncType,\n        indentChar: _this.indentChar,\n        cssPath: _this.cssPath,\n        cssData: _this.cssData,\n        bodyClass: _this.bodyClass,\n        colorTable: _this.colorTable,\n        afterCreate: _this.afterCreate,\n        afterChange: function () {\n          _this.outContent = this.html()\n        },\n        afterTab: _this.afterTab,\n        afterFocus: _this.afterFocus,\n        afterBlur: _this.afterBlur,\n        afterUpload: _this.afterUpload,\n        uploadJson: _this.uploadJson,\n        fileManagerJson: _this.fileManagerJson,\n        allowPreviewEmoticons: _this.allowPreviewEmoticons,\n        allowImageUpload: _this.allowImageUpload,\n        allowFlashUpload: _this.allowFlashUpload,\n        allowMediaUpload: _this.allowMediaUpload,\n        allowFileUpload: _this.allowFileUpload,\n        allowFileManager: _this.allowFileManager,\n        fontSizeTable: _this.fontSizeTable,\n        imageTabIndex: _this.imageTabIndex,\n        formatUploadUrl: _this.formatUploadUrl,\n        fullscreenShortcut: _this.fullscreenShortcut,\n        extraFileUploadParams: _this.extraFileUploadParams,\n        filePostName: _this.filePostName,\n        fillDescAfterUploadImage: _this.fillDescAfterUploadImage,\n        afterSelectFile: _this.afterSelectFile,\n        pagebreakHtml: _this.pagebreakHtml,\n        allowImageRemote: _this.allowImageRemote,\n        autoHeightMode: _this.autoHeightMode,\n        fixToolBar: _this.fixToolBar,\n        tabIndex: _this.tabIndex\n      })\n    },\n    // 打开选择文件弹窗\n    openSelectFile () {\n      // 获取文件输入元素\n      const _this = this\n      const fileInput = document.getElementById(&#39;file-input&#39;)\n      // 监听文件选择事件\n      return new Promise((resolve, reject) =&gt; {\n        fileInput.addEventListener(&#39;change&#39;, async function (event) {\n          // 获取选择的文件\n          const file = event.target.files[0]\n          // 处理选择的文件，例如读取文件内容或上传文件\n          const res = await _this.uploadFile(file)\n          resolve(res)\n        })\n        fileInput.click()\n      })\n    },\n    async uploadFile (file) {\n      const form = new FormData()\n      form.append(&#39;file&#39;, file)\n      const res = await request({\n        url: this.uploadJson,\n        method: &#39;POST&#39;,\n        data: form\n      })\n      return { url: res, type: file.type }\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"vue拖拽指令.md","content":"<pre><code>Vue.directive(&#39;drag&#39;, {\n  // 1.指令绑定到元素上回立刻执行bind函数，只执行一次\n  // 2.每个函数中第一个参数永远是el，表示绑定指令的元素，el参数是原生js对象\n  // 3.通过el.focus()是无法获取焦点的，因为只有插入DOM后才生效\n  bind: function(el) {},\n  // inserted表示一个元素，插入到DOM中会执行inserted函数，只触发一次\n  inserted: function(el) {\n    const odiv = el // 获取当前元素\n    let firstTime = &#39;&#39;\n    let lastTime = &#39;&#39;\n    el.onmousedown = function(e) {\n      var disx = e.pageX - el.offsetLeft\n      var disy = e.pageY - el.offsetTop\n      // 给当前元素添加属性，用于元素状态的判断\n      odiv.setAttribute(&#39;ele-flag&#39;, false)\n      odiv.setAttribute(&#39;draging-flag&#39;, true)\n      firstTime = new Date().getTime()\n      document.onmousemove = function(e) {\n        el.style.left = e.pageX - disx + &#39;px&#39;\n        el.style.top = e.pageY - disy + &#39;px&#39;\n      }\n      document.onmouseup = function(event) {\n        document.onmousemove = document.onmouseup = null\n        lastTime = new Date().getTime()\n        if (lastTime - firstTime &gt; 200) {\n          odiv.setAttribute(&#39;ele-flag&#39;, true)\n          event.stopPropagation()\n        }\n        setTimeout(function() {\n          odiv.setAttribute(&#39;draging-flag&#39;, false)\n        }, 100)\n      }\n    }\n  },\n})\n</code></pre>\n"},{"fileName":"vue数字滚动插件.md","content":"<p>1.安装</p>\n<p>在控制台输入npm install vue-count-to来安装vue-count-to插件</p>\n<ol start=\"2\">\n<li>导入插件并声明</li>\n</ol>\n<p>在需要使用的页面导入插件,并声明使用\n<img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220406090744659-1776508097.png\" alt=\"\"></p>\n<p>3.使用插件:</p>\n<p>第一种方法:</p>\n<pre><code>&lt;template&gt;\n\n&lt;countTo :startVal=&#39;startVal&#39; :endVal=&#39;endVal&#39; :duration=&#39;3000&#39;&gt;&lt;/countTo&gt;\n\n&lt;/template&gt;\n\n&lt;script&gt;\n\nimport countTo from &#39;vue-count-to&#39;;\n\nexport default {\n\ncomponents: { countTo },\n\ndata () {\n\nreturn {\n\nstartVal: 0,\n\nendVal: 2017\n\n}\n\n}\n\n}\n\n&lt;/script&gt;\n</code></pre>\n<p>第二种方法:</p>\n<pre><code>&lt;template&gt;\n\n&lt;countTo :startVal=&#39;0&#39; :endVal=&#39;2019&#39; :duration=&#39;3600&#39;&gt;&lt;/countTo&gt;\n\n&lt;/template&gt;\n\n&lt;script&gt;\n\nimport countTo from &#39;vue-count-to&#39;;\n\nexport default {\n\ncomponents: { countTo },\n\ndata () {\n\nreturn {\n\n}\n\n}\n\n}\n\n&lt;/script&gt;\n</code></pre>\n<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220406090856787-1392827627.png\" alt=\"\"></p>\n<p>下面是可以设置的一些参数,可供参考!\n<img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220406090944286-1442633026.png\" alt=\"\"></p>\n<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202204/2483371-20220406090950000-1600508577.png\" alt=\"\"></p>\n<p>转自 <a href=\"https://baijiahao.baidu.com/s?id=1684770570244473157&wfr=spider&for=pc\">https://baijiahao.baidu.com/s?id=1684770570244473157&amp;wfr=spider&amp;for=pc</a></p>\n"},{"fileName":"vue监听器报错 只接受简单的点分隔路径。 要完全控制，请改用函数.md","content":"<p>监听对象中的属性，我们一般这样写</p>\n<pre><code>watch: {\n    &#39;obj.a&#39; (val, oldVal) {\n        ...your code\n    }\n}\n</code></pre>\n<p>对于对象中复杂的字符串监听，比如form.zh-CN这种怎么办？如果还用之前的那种监听方式，可能会报下诉错误\n<code>Failed watching path: “XXXXX” Watcher only accepts simple dot-delimited paths. For full control, use a function instead.</code>\n意思是说，只接受简单的点分隔路径。 要完全控制，请改用函数。\n那么问题来了，如何改写成函数形式？方法如下：</p>\n<pre><code>created () {\n     this.$watch(\n        function () {  // 第一个函数就是处理你要监听的属性，只要将其return出去就行\n            return this.form[&#39;zh-CN&#39;]\n        },\n        function (val, oldVal) {\n            ... your code\n        }\n    )\n}\n</code></pre>\n"},{"fileName":"vue组件内使用sass变量.md","content":"<pre><code>&lt;style lang=&quot;scss&quot; scoped&gt;\n\n@import &quot;~@/styles/variables.scss&quot;;\n.fixed-header {\n  background-color: $documentBg;\n  width: calc(100% - #{$sideBarWidth});\n}\n\n\n&lt;/style&gt;\n</code></pre>\n<pre><code>&lt;template&gt;\n  &lt;div :active-text-color=&quot;variables.menuActiveText&quot;&gt;&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport variables from &#39;@/styles/variables.scss&#39;\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"vue绑定行内样式的写法.md","content":"<h3>vue绑定行内样式的写法</h3>\n<blockquote>\n<p>第一种写法  </p>\n</blockquote>\n<p><code>注意: Style对象的属性与CSS中使用的属性几乎是一一对应的，只是包含连接符的属性则被替换为无连接符的属性，并且替换后的连击符后的单词第一个字母要大写，如CSS中的font-size在Style中被替换为fontSize,类似的还有text-align替换为textAlign等等</code></p>\n<pre><code class=\"language-html\">&lt;div class=&quot;myBox&quot; :style=&quot;{&#39;width&#39;:screenWidth,&#39;fontSize&#39;:&#39;20px&#39;}&quot;&gt;&lt;/div&gt;\n</code></pre>\n<blockquote>\n<p>第二种写法</p>\n</blockquote>\n<pre><code class=\"language-js\">&lt;div :style=&quot;styleObj&quot;&gt;&lt;/div&gt;\ndata() {\n    return {\n        styleObj:{\n            width:&#39;100px&#39;,\n            color:&#39;red&#39;,\n            fontSize:&#39;20px&#39;\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>第三种写法</p>\n</blockquote>\n<pre><code class=\"language-js\">&lt;div :style=&quot;[styleObj1,styleObj2]&quot;&gt;&lt;/div&gt;\ndata() {\n    return {\n        styleObj1:{\n            width:&#39;100px&#39;,\n            color:&#39;red&#39;,\n            fontSize:&#39;20px&#39;\n        },\n        styleObj2:{\n            height:&#39;100px&#39;\n        }\n    }\n}\n</code></pre>\n"},{"fileName":"vue计时器.md","content":"<pre><code>&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;h3&gt;{{ timeFormat }}&lt;/h3&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    name: &quot;App&quot;,\n    data() {\n      return {\n        // 用于显示时间的变量，是一个HH:MM:SS时间格式的字符串\n        timeFormat: &quot;&quot;,\n      };\n    },\n    methods: {\n      genTime: function* () {\n        // 声明存储时、分、秒的变量\n        let hour = 0;\n        let minute = 0;\n        let second = 0;\n        while (true) {\n          // 递增秒\n          second += 1;\n          // 如果秒到60了，则分加1，秒清零\n          if (second === 60) {\n            second = 0;\n            minute += 1;\n          }\n          // 如果分到60了，则时加1，分清零\n          if (minute === 60) {\n            minute = 0;\n            hour += 1;\n          }\n          // 最后返回最新的时间字符串\n          yield `${hour}:${minute}:${second}`;\n        }\n      },\n    },\n    created() {\n      // 通过生成器生成迭代器\n      const gen = this.genTime();\n      // 设置计时器定时从迭代器获取最新的时间字符串\n      const timer = setInterval(() =&gt; {\n        this.timeFormat = gen.next().value;\n      }, 1000);\n      // 在组件销毁的时候清空定时器和迭代器以免发生内存泄漏\n      this.$once(&quot;hook:beforeDestroy&quot;, () =&gt; {\n        clearInterval(timer);\n        gen = null;\n      });\n    },\n  };\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"vue项目通过外部配置文件读取接口地址- 在webpack-index.html模板中使用环境变量.md","content":"<p>概述：在index.html模板中判断当前环境，处于开发环境下时读取process环境变量、处于生产环境下时读取根目录配置文件（./config.js）,两种环境下将配置统一挂载到window全局变量上（SET_CONFIG）\n<code>config.js</code></p>\n<pre><code>window.SITE_CONFIG = {\n  appTitle: &#39;系统测试&#39;,\n  version: &#39;1.0.0&#39;,\n  apiURL: &#39;&#39;,\n  websocketURL: &#39;&#39;,\n  reportURL: &#39;&#39;\n}\n</code></pre>\n<p><code>index.html</code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;/&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;/&gt;\n  &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;/&gt;\n  &lt;title&gt;&lt;%= VUE_APP_TITLE %&gt;&lt;/title&gt;\n  &lt;% if (process.env.NODE_ENV === &#39;production&#39; ) { %&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;config.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    document.title = window.SITE_CONFIG.appTitle\n  &lt;/script&gt;\n  &lt;% } %&gt;\n  &lt;!--    其他环境读取环境变量--&gt;\n  &lt;% if (process.env.NODE_ENV !== &#39;production&#39; ) { %&gt;\n  &lt;script&gt;\n    window.SITE_CONFIG = {};\n    window.SITE_CONFIG[&#39;appTitle&#39;] = &#39;&lt;%= process.env.VUE_APP_TITLE %&gt;&#39;;\n    window.SITE_CONFIG[&#39;version&#39;] = &#39;&lt;%= process.env.VUE_APP_VERSION %&gt;&#39;;\n    window.SITE_CONFIG[&#39;apiURL&#39;] = &#39;&lt;%= process.env.VUE_APP_API %&gt;&#39;;\n    window.SITE_CONFIG[&#39;websocketURL&#39;] = &#39;&lt;%= process.env.VUE_APP_API_WEBSOCKET %&gt;&#39;\n    window.SITE_CONFIG[&#39;VUE_APP_API_REPORT&#39;] = &#39;&lt;%= process.env.VUE_APP_API_REPORT %&gt;&#39;\n  &lt;/script&gt;\n  &lt;% } %&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;noscript&gt;\n  &lt;strong&gt;We&#39;re sorry but &lt;%= webpackConfig.name %&gt; doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;\n&lt;/noscript&gt;\n&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;!-- built files will be auto injected --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4>注意！！！</h4>\n<h3>当env文件不是默认的.env.development或.env.production而是带有自定义模式的后缀时</h3>\n<h3>例如.env.prod 执行命令为vue-cli-service build --mode prod</h3>\n<h3>此时需要在.env.prod中手动指定构建模式</h3>\n<h3>NODE_ENV=production</h3>\n"},{"fileName":"【动画进阶】当路径动画遇到滚动驱动.md","content":"<h1>【动画进阶】当路径动画遇到滚动驱动！</h1>\n<p>本文，我们将一起利用纯 CSS，实现如下这么个酷炫的效果：</p>\n<p><img src=\"https://mmbiz.qpic.cn/sz_mmbiz_gif/SMw0rcHsoNLrSKsG4QuV5QetqCOqsh0qEl4bKa4Yn8BnaKkucLvPIpNUWcEVnSEeyiaOT9d4zK19nIgknQkwlXg/640?wx_fmt=gif&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>在一年前，我介绍了 CSS 中非常新奇有趣的一个新特性 -- <strong>@scroll-timeline</strong>：<a href=\"http://mp.weixin.qq.com/s?__biz=Mzg2MDU4MzU3Nw==&mid=2247490502&idx=1&sn=c94c7c1b1d24cbe04a1d808a74ca195c&chksm=ce257830f952f12628e3d98dcbd0563e9da42f80144aadc483a204c3b607044aafcec8c016cf&scene=21#wechat_redirect\">革命性创新，动画杀手锏 @scroll-timeline[1]</a>。</p>\n<p>利用这个新特性，我们可以轻松的将原本基于时间控制的动画效果，交给页面的滚动特性进行控制，像是这样：</p>\n<p><img src=\"https://mmbiz.qpic.cn/sz_mmbiz_gif/SMw0rcHsoNLrSKsG4QuV5QetqCOqsh0q6l4CfE47CeVo50H8dx6D9TFg7IY314qowFKx8EX56Lickeu4SonPGwA/640?wx_fmt=gif&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>只是，该特性由于诸多原因，遭到了规范废弃。</p>\n<p>然而，时隔一年半，规范带着新的 animation-timeline[2] 王者回归！我们可以将其简单理解为：<strong>Scroll-driven Animations（滚动驱动动画）</strong>。</p>\n<h2>什么是滚动驱动动画（Scroll-driven Animations）？</h2>\n<p>OK，我们通过一个例子，快速上手（回忆）滚动驱动动画。</p>\n<p>我们来实现这么一个滚动进度指示器效果：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>注意看 GIF 图的上方，有一个黄色进度条，可以通过滚动，改变黄色进度条的进度状态。这个也就是我们说的滚动指示器效果。</p>\n<p>在之前，这个效果利用纯 CSS 是不太好实现的，但是有了 animation-timeline 之后，一切都将变得非常轻松。</p>\n<p>假设我们有如下结构：</p>\n<pre><code>&lt;div id=&quot;g-container&quot;&gt;  \n    &lt;h1&gt;不可思议的纯 CSS 进度条效果&lt;/h1&gt;  \n    &lt;p&gt;OK，继续....../p&gt;  \n    // ...  \n&lt;/div&gt;  \n</code></pre>\n<p><code>body {       overflow: scroll;   }   #g-container {       width: 100vw;   }   </code></p>\n<p>其中，<code>#g-container</code> 有非常多的内容，其长度远远超过 <code>100vh</code>，也就是一个屏幕的高度。并且，<code>body</code> 是设置了 <code>overflow: scroll</code> 的。因此，整个页面是可以进行滚动的：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>好，接下来，我们需要加上进度条，实现的方式有非常多种，这里我通过给 <code>#g-container</code> 添加一个伪元素，将进度条的效果设置给这个伪元素，代码也非常简单：</p>\n<p>`#g-container::before {<br>    content: &quot;&quot;;<br>    position: fixed;<br>    height: 7px;<br>    left: 0;<br>    top: 0;<br>    right: 0;<br>    background: #ffc107;<br>    animation: scale 3s linear infinite;<br>    transform-origin: 0 50%;<br>}  </p>\n<p>@keyframes scale {<br>    0% {<br>        transform: scaleX(0);<br>    }<br>    100% {<br>        transform: scaleX(1);<br>    }<br>}<br>`</p>\n<p>这里，利用元素的缩放，从 <code>transform: scaleX(0)</code> 到  <code>transform: scaleX(1)</code> 的变化，实现了进度条的动画效果。</p>\n<p>只不过，目前是一个无限动画，一次动画效果持续 3 秒 -- <code>animation: scale 3s linear infinite</code>：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>bg4.gif</p>\n<p>好，铺垫到这里，接下来终于要轮到 animation-timeline[3] 登场了。</p>\n<p>上述的动画效果，目前是由时间进行控制的，持续时长为 3s，而我们的目标，就是利用滚动的效果控制整个动画。</p>\n<p>我们只需要简单的改造一下代码：</p>\n<p><code>#g-container::before {       // ...       animation: scale 3s linear;       animation-timeline: scroll(root);       transform-origin: 0 50%;   }   </code></p>\n<p>这里，我们仅仅加了一句 <code>animation-timeline: scroll(root)</code>，表示利用滚动进行元素的动画控制，并且利用的是 <code>root</code> 元素的滚动，也就是 body 元素的滚动进行控制。</p>\n<p>这样，我们就轻松的实现了一个滚动指示器效果：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>bg0.gif</p>\n<p>完整的代码，你可以戳这里：CodePen Demo -- 使用 scroll-animation  实现滚动指示器进度条[4]</p>\n<p>当然，整个滚动驱动动画（Scroll-driven Animations）的内容还是非常多的，本文不对基础语法做过多展开，大家可以通过下面两个途径，进一步了解新语法：</p>\n<ol>\n<li><p>MDN 文档 -- animation-timeline[5]</p>\n</li>\n<li><p>XboxYan 大佬的 <a href=\"http://mp.weixin.qq.com/s?__biz=Mzg2MDU4MzU3Nw==&mid=2247496154&idx=1&sn=24836cb0236884eeecd6cbdac315e3e3&chksm=ce26922cf9511b3ae1669bc9cf70b7509da721d939915d16932b3ecac3fc27d5fd371d862b25&scene=21#wechat_redirect\">CSS 滚动驱动动画终于正式支持了\\~[6]</a></p>\n</li>\n</ol>\n<p>借用 XboxYan 文章中的一幅图：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>image.png</p>\n<h2>motion-path 运动路径动画</h2>\n<p>好，到目前位置，我们都还在铺垫内容，本文的核心是<strong>当路径动画遇到滚动驱动</strong>。</p>\n<p>那么，了解完滚动驱动动画之后，我们再来了解一下，什么是<strong>运动路径动画 -- motion-path</strong>。</p>\n<p>motion-path 在之前，也有过系统的介绍 -- <a href=\"http://mp.weixin.qq.com/s?__biz=Mzg2MDU4MzU3Nw==&mid=2247486196&idx=1&sn=cc8cc2bf233caae450afd89a9b140a8e&chksm=ce256902f952e014355e4f614db8e3a3a6679dee1293002d10ab21fc7c027afaa1f6951d0d28&scene=21#wechat_redirect\">探秘神奇的运动路径动画 Motion Path[7]</a></p>\n<p>什么是 CSS Motion Path 运动路径？利用这个规范规定的属性，我们<strong>可以控制元素按照特定的路径进行位置变换的动画</strong>。并且，这个路径可以是非常复杂的一条路径。</p>\n<h3>初窥 motion-path</h3>\n<p>CSS Motion Path 规范主要包含以下几个属性：</p>\n<ul>\n<li><p><code>offset-path</code>：接收一个 SVG 路径（与 SVG 的path、CSS 中的 clip-path 类似），指定运动的几何路径</p>\n</li>\n<li><p><code>offset-distance</code>：控制当前元素基于 <code>offset-path</code> 运动的距离</p>\n</li>\n<li><p><code>offset-position</code>：指定 <code>offset-path</code> 的初始位置</p>\n</li>\n<li><p><code>offset-anchor</code>：定义沿 <code>offset-path</code> 定位的元素的锚点。 这个也算好理解，运动的元素可能不是一个点，那么就需要指定元素中的哪个点附着在路径上进行运动</p>\n</li>\n<li><p><code>offset-rotate</code>：定义沿 <code>offset-path</code> 定位时元素的方向，说人话就是运动过程中元素的角度朝向</p>\n</li>\n</ul>\n<p>下面，我们使用 Motion Path 实现一个简单的直线位移动画。</p>\n<p><code>&lt;div&gt;   </code></p>\n<p><code>div {       width: 60px;       height: 60px;       background: linear-gradient(#fc0, #f0c);       offset-path: path(&quot;M 0 0 L 100 100&quot;);       offset-rotate: 0deg;       animation: move 2000ms infinite alternate ease-in-out;   }   @keyframes move {       0% {           offset-distance: 0%;       }       100% {           offset-distance: 100%;       }   }   </code></p>\n<p><code>offset-path</code> 接收一个 SVG 的 path 路径，这里我们的路径内容是一条自定义路径 <code>path(&quot;M 0 0 L 100 100&quot;)</code>，翻译过来就是从 <code>0 0</code> 点运动到 <code>100px 100px</code> 点。</p>\n<blockquote>\n<p><code>offset-path</code> 接收一个 SVG 路径，指定运动的几何路径。与 SVG 的path、CSS 中的 clip-path 类似，对于这个 SVG Path 还不太了解的可以戳这里先了解下 SVG 路径内容：SVG 路径[8]</p>\n</blockquote>\n<p>我们会得到如下结果：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>通过控制元素的 <code>offset-distance</code> 从 <code>0%</code> 变化到 <code>100%</code> 进行元素的路径动画。</p>\n<p>当然，上述的动画是最基本的，我可以充分利用 path 的特性，增加多个中间关键帧，稍微改造下上述代码：</p>\n<p><code>div {       // 只改变运动路径，其他保持一致       offset-path: path(&quot;M 0 0 L 100 0 L 200 0 L 300 100 L 400 0 L 500 100 L 600 0 L 700 100 L 800 0&quot;);       animation: move 2000ms infinite alternate linear;   }   @keyframes move {       0% {           offset-distance: 0%;       }       100% {           offset-distance: 100%;       }   }   </code></p>\n<p>这里最主要还是运用了 path 中的 <code>L</code> 指令，得到了如下图这样一条直线路径：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>最终的效果如下，与利用 <code>transform: translate()</code> 添加多个关键帧类似：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>完整的 Demo 你可以戳这里：CodePen Demo -- CSS Motion Path Demo[9]</p>\n<h3>曲线路径动画</h3>\n<p>上面的运动轨迹都是由直线构成，下面我们看看如何使用 CSS Motion Path 实现曲线路径动画。</p>\n<p>其实原理还是一模一样，只需要在 <code>offset-path: path()</code> 中添加曲线相关的路径即可。</p>\n<p>在 SVG 的 Path 中，我们取其中一种绘制曲线的方法 -- 贝塞尔曲线，譬如下述这条 path，其中的 path 为 <code>d=&quot;M 10 80 C 80 10, 130 10, 190 80 S 300 150, 360 80&quot;</code>：</p>\n<p><code>&lt;svg width=&quot;400&quot; height=&quot;160&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;     &lt;path d=&quot;M 10 80 C 80 10, 130 10, 190 80 S 300 150, 360 80&quot; stroke=&quot;black&quot; fill=&quot;transparent&quot;/&gt;   &lt;/svg&gt;   </code></p>\n<p>对应这样一条连续的贝塞尔曲线：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>将对应的路径应用在 <code>offset-path: path</code> 中：</p>\n<p><code>&lt;div&gt;   </code></p>\n<p><code>div:nth-child(2) {       width: 40px;       height: 40px;       background: linear-gradient(#fc0, #f0c);       offset-path: path(&#39;M 10 80 C 80 10, 130 10, 190 80 S 300 150, 360 80&#39;);   }   @keyframes move {       0% {           offset-distance: 0%;       }       100% {           offset-distance: 100%;       }   }   </code></p>\n<p>可以得到如下运动效果：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>可以看到，元素是沿着贝塞尔曲线的路径进行运动的，并且，由于这次没有限制死 <code>offset-rotate</code>，元素的朝向也是跟随路径的朝向一直变化的。（可以联想成开车的时候，车头一直跟随道路会进行变化的，带动整个车身的角度变化）</p>\n<p>完整的 Demo 你可以戳这里：CodePen Demo -- CSS Motion Path Demo[10]</p>\n<h2>Amazing！路径动画配合滚动驱动</h2>\n<p>好，终于，到这里，你应该已经大致了解了什么是<strong>路径动画 motion-path</strong>，什么是<strong>滚动驱动 scroll-driven</strong>。</p>\n<p>我们可以尝试把这两个东西组合在一起。</p>\n<p>假设，我们有这么个 HTML 结构：</p>\n<p>`<div class=\"g-container\"><br>    <div class=\"ele\"></div>  </p>\n</div>  \n`\n\n<p><code>body {       width: 100%;       height: 100%;       background: conic-gradient(           #fff,           #fff 90deg,           #ddd 90deg,           #ddd 180deg,           #fff 180deg,           #fff 270deg,           #ddd 270deg       );       background-size: 50px 50px;   }   .g-container {       position: absolute;       top: 0;       left: 50%;       transform: translate(-50%, 0);       width: 700px;       height: 2000px;   }   .ele {       position: absolute;       width: 40px;       height: 40px;       clip-path: polygon(0 0, 100% 50%, 0 100%);       background: linear-gradient(270deg, #65d060, #0887ec);   }   </code></p>\n<p>简单解释一下：</p>\n<ol>\n<li><p>为了方便理解，我把 body 的背景设置成了格子背景</p>\n</li>\n<li><p><code>.g-container</code> 是一个远比屏幕高度高的容器，方便整个页面进行滚动</p>\n</li>\n<li><p><code>.ele</code> 是一个小三角形</p>\n</li>\n</ol>\n<p>目前，整个页面是这样的：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>下面，我们给 <code>.ele</code>设置一个 <code>offset-path</code> 路径：</p>\n<p>`.ele {<br>    position: absolute;<br>    width: 40px;<br>    height: 40px;<br>    clip-path: polygon(0 0, 100% 50%, 0 100%);<br>    background: linear-gradient(270deg, #65d060, #0887ec);<br>    offset-path: path(&quot;M 350 40 C 1000 1000, -350 1000, 350 1960&quot;);<br>    animation: move 4s linear infinite;<br>}  </p>\n<p>@keyframes move {<br>    0% {<br>        offset-distance: 0%;<br>    }<br>    50% {<br>        transform: scale(2.5);<br>    }<br>    100% {<br>        offset-distance: 100%;<br>    }<br>}<br>`</p>\n<p>其中的核心就是 <code>offset-path: path(&quot;M 350 40 C 1000 1000, -350 1000, 350 1960&quot;)</code> 这里面，有一个利用 3 次贝塞尔曲线画出来的路径。</p>\n<p>并且，我们给它加上了 <code>offset-distance: 0</code> 到 <code>offset-distance: 100%</code> 的动画效果，目前，整个效果是这样的：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>可以看到，小三角形，按照特定的路径在进行运动。</p>\n<p>为了更好的理解这个动画，我们可以利用 <code>SVG</code>，把这个运动的路径给画出来：</p>\n<p>`<div class=\"g-container\"><br>    <svg class=\"g-svg\" width=\"400\" height=\"160\" xmlns=\"http://www.w3.org/2000/svg\"><br>        <path id=\"svgpath\" d=\"M 350 40 C 1000 1000, -350 1000, 350 1960\" stroke=\"black\" fill=\"transparent\" /><br>    </svg><br>    <div class=\"ele\"></div>  </p>\n</div>  \n`\n\n<p><code>.g-svg {       position: absolute;       top: 0;       left: 50%;       width: 700px;       height: 2000px;       transform: translate(-50%, 0);   }   #svgpath {       stroke: #9bc9de;       stroke-width: 3px;       stroke-dasharray: 2108, 2108;       animation: lineMove 4s linear;   }   @keyframes lineMove {       0% {           stroke-dashoffset: 2108;       }       100% {           stroke-dashoffset: 0;       }   }   </code></p>\n<p>我们利用 SVG 路径，成功的将运动的路径绘制了出来，并且，利用 <code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code>，实现了一条线条动画，控制它和小三角形的 motion-path 动画保持一致。</p>\n<blockquote>\n<p>要看懂 <code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code> 实现的线条动画，可能需要翻阅：【Web动画】SVG 线条动画入门 [11]</p>\n</blockquote>\n<p>这样，现在，我们就得到了这么一个动画效果：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>到这里，其实还没有运用上滚动驱动，现在，我们把上述经由时间控制的动画效果，交给页面的滚动。</p>\n<p>简单改造上述 CSS 代码：</p>\n<p>`.ele {<br>    position: absolute;<br>    width: 40px;<br>    height: 40px;<br>    clip-path: polygon(0 0, 100% 50%, 0 100%);<br>    offset-path: path(&quot;M 350 40 C 1000 1000, -350 1000, 350 1960&quot;);<br>    background: linear-gradient(270deg, #65d060, #0887ec);<br>    animation: move 4s linear;<br>    animation-timeline: scroll(root);<br>}  </p>\n<p>#svgpath {<br>    stroke: #9bc9de;<br>    stroke-width: 3px;<br>    stroke-dasharray: 2108, 2108;<br>    animation: lineMove 4s linear;<br>    animation-timeline: scroll(root);<br>}<br>`</p>\n<p>改动比较简单：</p>\n<ol>\n<li><p>去掉两个动画效果的 infinite 关键字</p>\n</li>\n<li><p>添加上 <code>animation-timeline: scroll(root)</code></p>\n</li>\n</ol>\n<p>此时，我们就可以利用页面的滚动，控制整个动画效果：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>完整的 DEMO，你可以戳这里：CodePen Demo -- Scroll Driven &amp; motion path &amp;  SVG stroke-dasharray Demo[12]</p>\n<p>在灵活掌握了上述内容后，我们就可以利用路径动画及滚动驱动创造出各种妙趣横生的动画效果！</p>\n<p>下面是我综合利用各种技巧，实现的一个纯 CSS 滚动动画效果，感受一下：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<blockquote>\n<p>上述案例中，除了本文介绍的所有内容外，使用了本文没有提及的滚动驱动 API 中的 <code>animation-range</code>以及 CSS 与布局相关的 <code>shape-outside</code> 属性，如果不太了解这两个属性，需要自行补充相关知识。</p>\n</blockquote>\n<p>Amazing！是不是非常的酷炫有意思，到今天，这种效果已经是纯 CSS 代码就能实现完成的了！</p>\n<p>完整的代码基于上述的 DEMO 进行扩展得到，就不贴出来了，感兴趣的可以猛戳：CodePen Demo - CSS Scroll Driven[13]</p>\n<h2>Can i Use - CSS Scroll Driven</h2>\n<p>来看看 CSS Scroll Driven 相关的 API 目前的兼容性如何？截止至 2023-09-09，基于 Can i Use - Animation-timeline[14] 的兼容性如下：</p>\n<p>![图片](data:image/svg+xml,%3C%3Fxml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>可以看到 animation-timeline 已经从 Chrome 115 版本正式得到支持，并且其它浏览器也已经开始大力跟进，让我们给时间一点时间，相信很快 CSS Scroll Driven 会更多的应用于生产环境，创造出各种以往需要借助 JavaScript 才能实现的动画。</p>\n<p>而当路径动画遇到滚动驱动，势必会创造出各种妙趣横生的效果，更多有趣的效果组合等待我们去探索发现。</p>\n<h2>最后</h2>\n<p>好了，本文到此结束，希望对你有所收获。</p>\n<p>更多精彩 CSS 技术文章汇总在我的 Github -- iCSS[15] ，持续更新，欢迎点个 star 订阅收藏。</p>\n<p>如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。</p>\n<h3>参考资料</h3>\n<p>[1]</p>\n<p>革命性创新，动画杀手锏 @scroll-timeline: <em><a href=\"https://github.com/chokcoco/iCSS/issues/166\">https://github.com/chokcoco/iCSS/issues/166</a></em></p>\n<p>[2]</p>\n<p>animation-timeline: <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline\">https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline</a></em></p>\n<p>[3]</p>\n<p>animation-timeline: <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline\">https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline</a></em></p>\n<p>[4]</p>\n<p>CodePen Demo -- 使用 scroll-animation  实现滚动指示器进度条: <em><a href=\"https://codepen.io/Chokcoco/pen/WNLprWj?editors=1100\">https://codepen.io/Chokcoco/pen/WNLprWj?editors=1100</a></em></p>\n<p>[5]</p>\n<p>animation-timeline: <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline\">https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline</a></em></p>\n<p>[6]</p>\n<p>CSS 滚动驱动动画终于正式支持了~: <em><a href=\"https://juejin.cn/post/7259026189904805944\">https://juejin.cn/post/7259026189904805944</a></em></p>\n<p>[7]</p>\n<p>探秘神奇的运动路径动画 Motion Path: <em><a href=\"https://github.com/chokcoco/iCSS/issues/113\">https://github.com/chokcoco/iCSS/issues/113</a></em></p>\n<p>[8]</p>\n<p>SVG 路径: <em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths\">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths</a></em></p>\n<p>[9]</p>\n<p>CodePen Demo -- CSS Motion Path Demo: <em><a href=\"https://codepen.io/Chokcoco/pen/gOgqoem\">https://codepen.io/Chokcoco/pen/gOgqoem</a></em></p>\n<p>[10]</p>\n<p>CodePen Demo -- CSS Motion Path Demo: <em><a href=\"https://codepen.io/Chokcoco/pen/gOgqoem\">https://codepen.io/Chokcoco/pen/gOgqoem</a></em></p>\n<p>[11]</p>\n<p>【Web动画】SVG 线条动画入门 : <em><a href=\"https://www.cnblogs.com/coco1s/p/6225973.html\">https://www.cnblogs.com/coco1s/p/6225973.html</a></em></p>\n<p>[12]</p>\n<p>CodePen Demo -- Scroll Driven &amp; motion path &amp;  SVG stroke-dasharray Demo: <em><a href=\"https://codepen.io/Chokcoco/pen/QWzGmmj\">https://codepen.io/Chokcoco/pen/QWzGmmj</a></em></p>\n<p>[13]</p>\n<p>CodePen Demo - CSS Scroll Driven: <em><a href=\"https://codepen.io/Chokcoco/pen/bGOqVqO?editors=1100\">https://codepen.io/Chokcoco/pen/bGOqVqO?editors=1100</a></em></p>\n<p>[14]</p>\n<p>Can i Use - Animation-timeline: <em><a href=\"https://caniuse.com/?search=animation-timeline\">https://caniuse.com/?search=animation-timeline</a></em></p>\n<p>[15]</p>\n<p>Github -- iCSS: <em><a href=\"https://github.com/chokcoco/iCSS\">https://github.com/chokcoco/iCSS</a></em></p>\n<p>![图片](<a href=\"https://mp.weixin.qq.com/s/data:image/svg+xml,%3C%3Fxml\">https://mp.weixin.qq.com/s/data:image/svg+xml,%3C%3Fxml</a> version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;%3F%3E%3Csvg width=&#39;1px&#39; height=&#39;1px&#39; viewBox=&#39;0 0 1 1&#39; version=&#39;1.1&#39; xmlns=&#39;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&#39; xmlns:xlink=&#39;<a href=\"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg\">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=&#39;none&#39; stroke-width=&#39;1&#39; fill=&#39;none&#39; fill-rule=&#39;evenodd&#39; fill-opacity=&#39;0&#39;%3E%3Cg transform=&#39;translate(-249.000000, -126.000000)&#39; fill=&#39;%23FFFFFF&#39;%3E%3Crect x=&#39;249&#39; y=&#39;126&#39; width=&#39;1&#39; height=&#39;1&#39;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>\n<p>如果觉得还不错，欢迎点赞、收藏、转发❤❤</p>\n<p>var first_sceen__time = (+new Date()); if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) { document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); }); }</p>\n"},{"fileName":"上传文件携带参数.md","content":"<p>使用el-upoad组件自定义上传\n使用formData.append()来添加参数\n直接在控制台打印formData参数为空     获取formData参数使用formData.get() </p>\n<pre><code>&lt;el-upload class=&quot;upload&quot; ref=&quot;uploadBox&quot; action=&quot;&quot; :multiple=&quot;false&quot; :limit=&quot;1&quot; accept=&quot;.xls,.xlsx&quot; :file-list=&quot;fileList&quot; :auto-upload=&quot;false&quot; :http-request=&quot;upload&quot;&gt;\n            &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot;&gt;选择文件&lt;/el-button&gt;\n&lt;/el-upload&gt;\n&lt;el-button style=&quot;margin-left:15px&quot; size=&quot;mini&quot; type=&quot;primary&quot; icon=&quot;el-icon-upload&quot; @click=&quot;btnClick&quot;&gt;上传&lt;/el-button&gt;\n</code></pre>\n<pre><code>async upload (item) {\n      const formData = new FormData()\n      formData.append(&#39;file&#39;, item.file)\n      formData.append(&#39;bankId&#39;, this.form.bankId)\n      formData.append(&#39;appendFlag&#39;, this.form.appendFlag)\n      formData.append(&#39;allSuccessFlag&#39;, this.form.allSuccessFlag)\n      formData.append(&#39;successRemark&#39;, this.form.successRemark)\n      this.importLoading = true\n      const res = await api.importBill(formData).finally(() =&gt; {\n        this.importLoading = false\n      })\n    },\nasync btnClick () {\n      const files = this.$refs.uploadBox.uploadFiles\n      // 判断是否已选择文件\n      if (files.length &gt; 0) {\n        this.$refs.uploadBox.submit()\n      } else {\n        this.$message({\n          message: &#39;请先选择文件！！！&#39;,\n          type: &#39;warning&#39;\n        })\n      }\n    },\n</code></pre>\n"},{"fileName":"从字符串中解析Dom.md","content":"<pre><code>     // html字符串生成dom\n    const parser = new DOMParser()\n    // 向table标签中插入节点表格元素（tr、td）时必须使用&lt;table&gt;&lt;/table&gt;标签包裹，否则parseFromString方法会将tr和td标签自动删除\n    let node = parser.parseFromString(&#39;&lt;table&gt;&lt;tr&gt;&#39; + str + &#39;&lt;/tr&gt;&lt;/table&gt;&#39;, &#39;text/html&#39;)\n    // parseFromString转换的是document对象，无法append()直接进行插入，获取内部节点后再插入\n    el.parentElement.after(node.getElementsByTagName(&#39;tr&#39;)[0])\n</code></pre>\n"},{"fileName":"你不知道的vue.md","content":"<ul>\n<li><p><code>v-bind:herf = &quot;&quot;</code> :后面穿的是参数 告诉v-bind指令操作herf属性</p>\n</li>\n<li><p><code>:[attrName]=&quot;&quot;</code> 动态绑定属性</p>\n</li>\n<li><p><code>@[eventName]=&quot;&quot; </code>动态绑定事件</p>\n</li>\n<li><p><code>&lt;button disabled&gt;&lt;/button&gt;</code> disabled属性存在即为true</p>\n</li>\n<li><p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量(window,$data,this)</p>\n</li>\n<li><p>对于模板任何复杂逻辑，你都应当使用计算属性，善用缓存特性，计算属性拥有watch监听的特性，部分情况下使用computed优于watch</p>\n</li>\n<li><p>善用计算属性setter</p>\n</li>\n<li><p>当在一个自定义组件上使用 class property 时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖</p>\n</li>\n<li><p><code>:style=&quot;styleObject&quot;</code> 绑定一个用户自定义对象可以通过修改对象方便的更改css</p>\n</li>\n<li><p>当 <code>v-bind:style</code> 使用需要添加浏览器引擎前缀的 CSS property 时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p>\n</li>\n<li><p>因为 v-if 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>\n</li>\n<li><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。</p>\n</li>\n</ul>\n<pre><code>    &lt;template v-if=&quot;loginType === &#39;username&#39;&quot;&gt;\n      &lt;label&gt;Username&lt;/label&gt;\n      &lt;input placeholder=&quot;Enter your username&quot;&gt;\n    &lt;/template&gt;\n    &lt;template v-else&gt;\n      &lt;label&gt;Email&lt;/label&gt;\n      &lt;input placeholder=&quot;Enter your email address&quot;&gt;\n    &lt;/template&gt;\n    /**\n    *那么在上面的代码中切换 loginType 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，&lt;input&gt; 不会被替换掉——仅仅是替换了它的 placeholder\n    */\n</code></pre>\n<ul>\n<li><p>v-for在遍历对象时，会按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下都一致。</p>\n</li>\n<li><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>\n</li>\n</ul>\n<pre><code>push()\npop()\nshift()\nunshift()\nsplice()\nsort()\nreverse()\n</code></pre>\n<ul>\n<li><p>用新数组替换旧数组 你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>\n</li>\n<li><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>\n</li>\n<li><p>表单输入 v-model(.lazy,.number，.trim)修饰符</p>\n</li>\n<li><p><code>is attribute</code>可以用于常规 HTML 元素，但这些元素将被视为组件，这意味着所有的 attribute 都会作为 DOM attribute 被绑定。对于像 value 这样的 property，若想让其如预期般工作，你需要使用 .prop 修饰器。</p>\n</li>\n<li><p>如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)\n注意在 JavaScript 中对象和数组是通过引用传入子组件，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。</p>\n</li>\n<li><p>对于绝大多数 attribute 来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 type=&quot;text&quot; 就会替换掉 type=&quot;date&quot; 并把它破坏！庆幸的是，class 和 style attribute 会稍微智能一些，即两边的值会被合并起来，从而得到最终的值：form-control date-picker-theme-dark</p>\n</li>\n<li><p>自定义组件的 v-model</p>\n</li>\n</ul>\n<pre><code>    model: {\n        prop: &#39;checked&#39;,\n        event: &#39;change&#39;\n      },\n      props: {\n        checked: Boolean\n      },\n</code></pre>\n<ul>\n<li><p><code>v-slot</code> 只能添加在 <code>&lt;template&gt;</code></p>\n</li>\n<li><p>当被提供的内容只有默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 <code>v-slot </code>直接用在组件上</p>\n</li>\n<li><p>所有的子组件都可以通过<code>this.$root</code>访问根实例当作全局 <code>store </code>来访问或使用，可以简单实现全局数据通信</p>\n</li>\n<li><p>当 ref 和 v-for 一起使用的时候，你得到的 ref 将会是一个包含了对应数据源的这些子组件的数组。</p>\n</li>\n<li><p>在一个组件实例上手动侦听事件</p>\n</li>\n</ul>\n<pre><code>通过 $on(eventName, eventHandler) 侦听一个事件\n通过 $once(eventName, eventHandler) 一次性侦听一个事件\n通过 $off(eventName, eventHandler) 停止侦听一个事件\n</code></pre>\n<ul>\n<li>监听生命周期钩子</li>\n</ul>\n<pre><code>this.$once(&#39;hook:beforeDestroy&#39;, function () {\npicker.destroy()\n})\n</code></pre>\n<ul>\n<li><p>组件是可以在它们自己的模板中调用自身的</p>\n</li>\n<li><p>使用webpack 的异步 import异步注册本地组件 可以解决组件之间循环🚰的问题</p>\n</li>\n</ul>\n<pre><code>    components: {\n      TreeFolderContents: () =&gt; import(&#39;./tree-folder-contents.vue&#39;)\n    }\n</code></pre>\n<ul>\n<li>当 inline-template 这个特殊的 attribute 出现在一个子组件上时，这个组件将会使用其里面的内容作为模板，而不是将其作为被分发的内容。这使得模板的撰写工作更加灵活</li>\n</ul>\n<pre><code>    &lt;my-component inline-template&gt;\n      &lt;div&gt;\n        &lt;p&gt;These are compiled as the component&#39;s own template.&lt;/p&gt;\n        &lt;p&gt;Not parent&#39;s transclusion content.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/my-component&gt;\n</code></pre>\n<ul>\n<li>混入对象合并</li>\n</ul>\n<pre><code>- 数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先\n- 同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用\n- 值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对\n- Vue.extend() 也使用同样的策略进行合并\n</code></pre>\n<ul>\n<li>如果想让自定义选项以自定义逻辑合并，可以向 Vue.config.optionMergeStrategies 添加一个函数：</li>\n</ul>\n<pre><code>    Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {\n      // 返回合并后的值\n    }\n</code></pre>\n<ul>\n<li>filters过滤器可以串联、可以接收参数</li>\n</ul>\n<pre><code>    {{ message | filterA | filterB }}\n    \n    {{ message | filterA(&#39;arg1&#39;, arg2) }}\n</code></pre>\n"},{"fileName":"使用chainWebpack配置插件.md","content":"<h2>使用chainWebpack配置TerserWebpackPlugin插件</h2>\n<h3>安装插件版本要和webpack的版本匹配</h3>\n<pre><code>npm install terser-webpack-plugin --save-dev\n</code></pre>\n<pre><code>  chainWebpack(config) {\n    config\n      .when(process.env.NODE_ENV !== &#39;development&#39;,\n        config =&gt; {\n          config.optimization.minimizer([\n            new TerserPlugin({\n              terserOptions: {\n                // 移除 console\n                // 其它优化选项 https://segmentfault.com/a/1190000010874406\n                compress: {\n                  warnings: false,\n                  drop_console: true,\n                  drop_debugger: true,\n                  pure_funcs: [&#39;console.log&#39;]\n                }\n              }\n            })\n          ])\n        }\n      )\n  }\n</code></pre>\n<pre><code>\n</code></pre>\n"},{"fileName":"保持TCP连接.md","content":"<p><img src=\"https://img2023.cnblogs.com/blog/2483371/202306/2483371-20230626145355575-1571713819.png\" alt=\"\"></p>\n<p>通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了：\n<code>Connection:Keep-Alive </code>\n那么TCP连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个TCP连接发送请求。保持TCP连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个Web页面中内嵌的图片就都来自同一个Web站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的TCP连接。</p>\n"},{"fileName":"全局zomm缩放后echarts鼠标偏移的问题(鼠标触发提示框位置有偏差).md","content":"<h3>全局zomm缩放后echarts鼠标偏移的问题</h3>\n<h4>最近项目里需要做很多图表，但所有的图表都有一个问题，就是鼠标hover触发位置与鼠标实际位置有偏差</h4>\n<p>举个例子：</p>\n<p>​\t柱状图鼠标移动到第二个柱子的时候却触发第一个柱子的tooltip提示框</p>\n<p>最后发现问题所在是项目在main.vue里为适配不同分辨率的设备设置了全局的zoom缩放，具体看图\n<img src=\"https://img2020.cnblogs.com/blog/2483371/202109/2483371-20210916232253325-1705762100.png\" alt=\"\">\n<img src=\"https://img2020.cnblogs.com/blog/2483371/202109/2483371-20210916232303880-1906146173.png\" alt=\"\">\n<img src=\"https://img2020.cnblogs.com/blog/2483371/202109/2483371-20210916232310964-1163196001.jpg\" alt=\"\"></p>\n<blockquote>\n<p> 解决办法：全局缩放影响到了echarts容器，通过dom为echarts容器还原缩放    <code>根据图表位置合理设置 transform-origin:0 0</code></p>\n</blockquote>\n<ol>\n<li><pre><code class=\"language-html\"> &lt;div :id=&quot;chartsCode&quot; :style=&quot;`width: ${width}px; height:300px;zoom:${zoom};transform:scale(${1/zoom});transform-origin:0 0`&quot;&gt;&lt;/div&gt;\n</code></pre>\n</li>\n<li><pre><code class=\"language-js\">data() {\n    return {\n        zoom:1\n    }\n}\n</code></pre>\n</li>\n<li><pre><code class=\"language-js\">mounted() {\n     this.zoom = 1 / document.body.style.zoom\n     window.addEventListener(&quot;resize&quot;, () =&gt; {\n      this.zoom = 1 / document.body.style.zoom\n    })\n}\n</code></pre>\n</li>\n</ol>\n"},{"fileName":"前端js解析word(.docx).md","content":"<p> Mammoth 旨在转换 .docx 文档，并将其转换为 HTML。Mammoth 的目标是通过使用文档中的语义信息并忽略其他细节来生成简单干净的 HTML。比如Mammoth 会将应用标题 1 样式的任何段落转换为 h1 元素，而不是尝试完全复制标题的样式（字体，文本大小，颜色等）。</p>\n<p>Mammoth.js API 为我们提供了很多方法，这里我们来介绍三个比较常用的 API：</p>\n<ul>\n<li><code>mammoth.convertToHtml(input,options)</code>：把源文档转换为 HTML 文档</li>\n<li><code>mammoth.convertToMarkdown(input,options)</code>：把源文档转换为 Markdown 文档。这个方法与 <code>convertToHtml</code> 方法类似，区别就是返回的 result 对象的 value 属性是 Markdown 而不是 HTML</li>\n<li><code>mammoth.extractRawText(input)</code>：提取文档的原始文本。这将忽略文档中的所有格式，每个段落后跟两个换行符</li>\n</ul>\n<p>Mammoth.js 这个库同时支持 Node.js 和浏览器两个平台，在浏览器端 <code>mammoth.convertToHtml</code> 方法的 input 参数的格式是 <code>{arrayBuffer:arrayBuffer}</code>，其中 <code>arrayBuffer</code> 就是 .docx 文件的内容。</p>\n<p>在前端我们可以通过 <code>FileReader API</code> 来读取文件的内容，此外该接口也提供了 <code>readAsArrayBuffer</code> 方法，用于读取指定的 Blob 中的内容，一旦读取完成，result 属性中保存的将是被读取文件的 <code>ArrayBuffer</code> 数据对象。</p>\n<pre><code>&lt;input id=&quot;wordFile&quot; accept=&quot;.docx&quot; class=&quot;hide&quot; type=&quot;file&quot; @change=&quot;getWordFile&quot;/&gt;\n</code></pre>\n<pre><code>var mammoth = require(&#39;mammoth&#39;)\n</code></pre>\n<pre><code> getWordFile (e) {\n      const _this = this\n      const file = e.target.files[0]\n      const reader = new FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onload = function (evt) {\n        const arrayBuffer = evt.target.result\n        mammoth.convertToHtml({ arrayBuffer: arrayBuffer }).then((res) =&gt; {\n          console.log(res)\n          _this.displayResult = res.value\n          _this.handler(res.value)\n        })\n      }\n    },\n</code></pre>\n<p>该方法用于：</p>\n<ul>\n<li>（1）实现把输入的 <code>file</code> 对象转换为 <code>ArrayBuffer</code> 对象。</li>\n<li>（2）在获取 Word 文档的 <code>ArrayBuffer</code> 对象之后，就可以调用 <code>convertToHtml</code> 方法，把 Word 文档内容转换为 HTML 文档。</li>\n</ul>\n<p>如果文档中不包括特殊的图片类型，比如 wmf 或 emf 类型，而是常见的 jpg 或 png 等类型的话，那么可以看到 Word 文档中的图片都以 Base64 的格式进行嵌入。</p>\n"},{"fileName":"前端下载excel.md","content":"<p>##方式一</p>\n<pre><code>let params = {\n        &#39;token&#39;: Cookies.get(&#39;token&#39;)\n      }\n      window.location.href = `${window.SITE_CONFIG[&#39;baseURL&#39;]}/bridge/bridgeevaluatesubtaskbridge/export?${qs.stringify(params)}`\n</code></pre>\n<p>##方式二\n async downloadTemplate () {\n      await api.downloadTemplate().then(res =&gt; {\n        const jsonMimeType = &#39;application/json&#39;\n        const dataType = res.type\n        const isBlob = res instanceof Blob &amp;&amp; dataType !== jsonMimeType\n        if (isBlob) {\n          const realFileName = &#39;成绩导入模板.xls&#39;\n          const blob = new Blob([res], { type: &#39;application/vnd.ms-excel&#39; })\n          const url = window.URL.createObjectURL(blob)\n          // 生成一个a标签\n          const link = document.createElement(&#39;a&#39;)\n          link.id = &#39;templateDownloadLink&#39;\n          link.style.display = &#39;none&#39;\n          link.href = url\n          link.download = realFileName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(document.getElementById(&#39;templateDownloadLink&#39;))\n          this.$message({\n            type: &#39;success&#39;,\n            message: &#39;下载成功&#39;\n          })\n        } else {\n          res.text().then(text =&gt; {\n            const res = JSON.parse(text)\n            if (res.code === 500) {\n              util.$message.showError(&#39;无法完成下载,请重试或者联系管理员&#39;)\n            }\n          })\n        }\n      })\n    },</p>\n<pre><code>\n</code></pre>\n<p>export function exportExcel (params) {\n    return request({\n        url: &#39;/export&#39;,\n        method: &#39;GET&#39;,\n        responseType: &#39;blob&#39;,\n        params\n    })\n}\n```</p>\n"},{"fileName":"前端使用jsencrypt加密.md","content":"<h2>安装jsencrypt</h2>\n<pre><code>npm i jsencrypt\n</code></pre>\n<p>##生成公钥和私钥\n<a href=\"http://web.chacuo.net/netrsakeypair\">在线生成非对称加密公钥私钥对</a></p>\n<h2>封装encrypt.js</h2>\n<pre><code>import setting from &#39;@/settings.js&#39;  //setting文件中配置了是否启用加密enable 以及publicKey公钥\nimport { JSEncrypt } from &#39;jsencrypt&#39;\nconst $encrypt = {}\n$encrypt.encrypt = function (data) {\n  if (!setting.encrypt.enable) {\n    //  没有启用加密\n    return data\n  }\n  let encrypt = new JSEncrypt()\n  encrypt.setPublicKey(setting.encrypt.publicKey)\n  return encrypt.encrypt(data)\n}\n\nexport default $encrypt\n</code></pre>\n<p>参考链接 \n<code>https://blog.csdn.net/wz_coming/article/details/119419867</code>\n<code>http://t.zoukankan.com/guwufeiyang-p-14925898.html</code></p>\n"},{"fileName":"前端处理用户设备缩放.md","content":"<p>随着硬件发展和前端技术进步，多数项目在开发之时并不需要考虑用户设备/浏览器默认缩放带来的视觉效果和设计稿不符合的情况。但是如果你的项目用户是笔记本电脑用户且页面内容比较多且紧凑，可能就需要考虑一下这个问题了。</p>\n<p>首先笔记本电脑本身屏幕比较窄，当然这里说的是css逻辑像素，实际上现在新款笔记本电脑的物理像素/分辨率比一些台式机显示器还高，只是不同设备存在不同的 devicePixelRatio 导致设备逻辑像素实际并不那么大。同时，多数笔记本电脑出场默认自带缩放：</p>\n<p>window：<a href=\"https://pic1.zhimg.com/80/v2-8eef670d8ca20d9de65d29e515853e9c_720w.jpg\">https://pic1.zhimg.com/80/v2-8eef670d8ca20d9de65d29e515853e9c_720w.jpg</a></p>\n<p>mac：<a href=\"https://pic1.zhimg.com/80/v2-61f18906105a17729d9158626b0f6eb4_720w.jpg\">https://pic1.zhimg.com/80/v2-61f18906105a17729d9158626b0f6eb4_720w.jpg</a></p>\n<p>这样会使得，css逻辑像素进一步减小。</p>\n<p>因此，这类项目需要对这类情况做相应的处理。</p>\n<p>当然这个要看实际情况，想知乎、淘宝、禅道等这类布局，两侧留白可以一定程度上缓解用户缩放问题，因此大可不必考虑相应处理。但是对于一些内容紧凑且多的项目页面，用户缩放简直就是灾难。同时产品UI都会咆哮，为什么设计稿能展示这么多内容，但是实际到用户电脑上只能展示一丁点，同时一些留白、间距等会特别显眼。</p>\n<p>原因很简单：</p>\n<p>用户设备实际可用css逻辑像素宽度和设计稿不符，大多都是比设计稿小的。</p>\n<p>以我的13寸mac pro为例，默认缩放见上图，实际可用css逻辑像素只有：<img src=\"https://img2020.cnblogs.com/blog/2483371/202110/2483371-20211014104914615-732871386.png\" alt=\"\"></p>\n<p>当然，此时的浏览器缩放为 100%，如果浏览器缩放变化：<a href=\"https://pic1.zhimg.com/80/v2-8bcd21467a517db3a2e17841e38ac268_720w.jpg\">https://pic1.zhimg.com/80/v2-8bcd21467a517db3a2e17841e38ac268_720w.jpg</a></p>\n<p>此时实际可用css逻辑像素只有<a href=\"https://pic3.zhimg.com/80/v2-4cb8d5f2b841f845be204d2a7a54bdde_720w.jpg\">https://pic3.zhimg.com/80/v2-4cb8d5f2b841f845be204d2a7a54bdde_720w.jpg</a></p>\n<p>那么问题来了？如何处理？</p>\n<p>问题是用户设备实际可用css逻辑像素宽度和设计稿不符，而且通常是用户设备实际可用css逻辑像素宽度小于设计稿宽度，如果此时按照设计稿开发，那个必然导致上面的情况发生。</p>\n<p>一种方法是设置较小的设计稿宽度，但是这样又会使标准宽度设备用户体验下降，而且笔记本电脑用户设备宽度也不一样，宽度无法确定，因此这种方式指标不治本。</p>\n<p>因此这里采取了 js 实现缩放，css 解决副作用的解决方案。</p>\n<p>以 vue 项目为例，实现解决缩放问题只需要一行代码：</p>\n<p>// main.ts/js\ndocument.body.style.zoom = String(document.body.offsetWidth / 1920)\n如此，便实现了用户所见与设计稿一致的效果。</p>\n<p>核心实现代码虽然简单，但是会带来一系列问题，如下：</p>\n<p>除 webkit/blink 内核外的浏览器（如火狐等）不支持 zoom 属性\nzoom 属性会影响 vw/vh 的最终结果\nzoom 作用后会对一些 canvas 库（如 antv、echarts等）产生影响\n我们一个一个来解决：</p>\n<p>放弃火狐兼容，引导用户使用非火狐浏览器\n保存 zoom，使用 vw/vh 时用 calc(100vh / zoom值) 即可恢复 vw/vh 效果\n将 canvas 元素或图表容器元素 zoom 设置为 1 / zoom值 即可\n1 和 3 比较简单，1就不说了，3 的实现通过，一个 css 类：</p>\n<style>\n    .ScaleCSSViewport_unzoom {\n        zoom: calc(1 / var(--zoom))\n    }\n</style>\n<p>此时你一定会想问：var(--zoom) 是什么？</p>\n<script>\n    let zoom = 1\n    if (navigator.userAgent.toLowerCase().includes(\"webkit\")) {\n        zoom = document.body.offsetWidth / 1920\n    }\n    document.body.style.setProperty(\"--zoom\", zoom)\n    document.body.style.zoom = zoom\n</script>\n<p>因为我们的 zoom 属性是加在 body 上，zoom 效果会通过继承所用到所有元素。此时，我们就可以通过 ScaleCSSViewport_unzoom 来给制定元素及其子元素取消 zoom 效果。至此，问题 3 也解决了。</p>\n<p>还剩下问题 2。</p>\n<p>其实解决方法已经给出了：</p>\n<style>\n    .xxx {\n        // before\n        height: 100vh;\n        // after\n        heigth: calc(100vh / var(--zoom))\n    }\n</style>\n<p>原理就是这么个原理，解决也就是这么解决的。但是问题是这种方法对代码侵入性太强，而且无法平滑应用于旧项目。怎么办？</p>\n<p>如果是小型项目，用上面的 calc 就行。但是通常的中大型项目都是通过 webpack 封装的各种脚手架来构建的。因此我们可以通过实现一个 webpack 插件来帮我们实现将 vw/vh 转换为 calc(vw/vh / zoom值)。</p>\n<p>方式也非常简单粗暴。</p>\n<p>对 webpack 编译生成的 css/js 文件出现的 xxxvw/vh 进行替换。</p>\n<p>source = source.replace(/(?&lt;=(\\s|{|(|;|&#39;|&quot;|:))\\d+.?\\d*v(w|h)(?=(\\s|}|)|;|&#39;|&quot;))/g, v =&gt; <code>calc(${v} / var(--zoom))</code>)\n同时，我们也可以在 html 中注入 js 代码实现全局 css 变量。</p>\n<p>以 vue 项目为例，完整 plugin 代码如下：</p>\n<p>// vue.config.js\nplugins: [{\n    apply (compiler) {\n        compiler.hooks.emit.tapAsync(&#39;ScaleCSSViewport&#39;, (compilation, callback) =&gt; {\n                Object.keys(compilation.assets).forEach(item =&gt; {\n                    let source = compilation.assets[item].source()\n                    if (item.match(/.html$/g)) {\n                        source = source.replace(&#39;</head>&#39;, <code>                             &lt;style&gt;                                 .ScaleCSSViewport_unzoom { zoom: calc(1 / var(--zoom)) }                             &lt;/style&gt;                         &lt;/head&gt;</code>)\n                        source = source.replace(&#39;<body>&#39;, <code>&lt;body&gt;                             &lt;script&gt;                                 let zoom = 1                                 if (navigator.userAgent.toLowerCase().includes(&quot;webkit&quot;)) {                                     zoom = document.body.offsetWidth / 1920                                     window.addEventListener(&#39;resize&#39;, () =&gt; {                                         if (document.body.offsetWidth &lt; 960 || document.body.offsetWidth &gt; 1920) {                                             window.location.reload()                                         }                                     })                                 }                                 document.body.style.setProperty(&quot;--zoom&quot;, zoom)                                 document.body.style.zoom = zoom                             &lt;/script&gt;                         </code>)\n                    }\n                    if (item.match(/.css|js$/g)) {\n                        source = source.replace(/(?&lt;=(\\s|{|(|;|&#39;|&quot;|:))\\d+.?\\d*v(w|h)(?=(\\s|}|)|;|&#39;|&quot;))/g, v =&gt; <code>calc(${v} / var(--zoom))</code>)\n                        source = source.replace(/<code>\\d+.?\\d*v(w|h)</code>/g, v =&gt; v.replace(/<code>/g, &#39;&#39;))                     }                     compilation.assets[item] = {                         source: () =&gt; source,                         size: () =&gt; source.length                     }                 })                 callback();             }         );     } }] 除了能够实现无差别将 vw/vh 转换为 calc 之外，ScaleCSSViewport（上面那个插件）也提供了方法来避免替换。如果你就想在页面上展示一个 100vh，需要写成 </code>100vh<code>，ScaleCSSViewport 会将 </code>100vh<code>替换为 100vh。同理，如果你想要展示</code>100vh，则要在源码中写成 `100vh``。</p>\n<p>至此，一个相对完善的前端解决用户缩放问题的解决方案才算大概完成。初步效果已经实现，此方案仍存在部分问题，包括但不仅限于：</p>\n<p>火狐浏览器不兼容（放弃火狐）\ncanvas zoom 导致图表效果异常（使用 class=&quot;ScaleCSSViewport_unzoom&quot;）\n部分UI库组件的弹出浮层位置异常（指定浮层所渲染的父元素dom）\n同时，因为这里采用的源代码替换的方式过于粗暴，还是有可能会伤及无辜，替换了不该替换的代码。使用起来要特别慎重。</p>\n<p>当然，这也是我个人对于这个问题解决的一次探索。虽然不尽完美，但也是略有所得。</p>\n<p>希望可以帮到大家。</p>\n<p>谢谢！</p>\n<blockquote>\n<p>转载于  <a href=\"https://zhuanlan.zhihu.com/p/403607612\">https://zhuanlan.zhihu.com/p/403607612</a></p>\n</blockquote>\n"},{"fileName":"前端封装excel下载方法&&解决前端下载请求设置responseType 'blob'时后台报错无法处理的问题.md","content":"<p>请求设置responseType: &#39;blob&#39;时接口报错了如果不做处理则获取不到接口错误信息，此时下载的文件是有问题的。</p>\n<pre><code>/* @params options {}\n * data:Blob,\n * fileName:String,\n * successMsg:String,\n * */\nimport { Message } from &#39;element-ui&#39;\nimport downloadExcelFilePublicHandler from &#39;@/api/downloadExcelFile&#39;\n/* 注意 当使用公共模板下载接口时（/file/public/downloadExcelFile） 仅需传入fileName = 对应的文件名即可 */\nexport default async function downloadExcel (options = {}) {\n  const { year, month, day, time } = getCurrentDate()\n  const { data = null, fileName = &#39;文件&#39;, successMsg = &#39;下载成功&#39; } = options\n  const jsonMimeType = &#39;application/json&#39;\n  const dataType = data?.type ?? &#39;&#39;\n  const isBlob = data instanceof Blob\n  if (isBlob) {\n    if (dataType === &#39;application/vnd.ms-excel&#39; || dataType === &#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39;) {\n      const realFileName = `${fileName}-${time}.xls`\n      const blob = new Blob([data], { type: dataType })\n      const url = window.URL.createObjectURL(blob)\n      // 生成一个a标签\n      const link = document.createElement(&#39;a&#39;)\n      link.id = &#39;downloadLink&#39;\n      link.style.display = &#39;none&#39;\n      link.href = url\n      link.download = realFileName\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(document.getElementById(&#39;downloadLink&#39;))\n      Message.success(successMsg)\n    } else if (dataType === &#39;application/json&#39;) {\n      const reader = new FileReader()\n      reader.readAsText(data)\n      reader.onload = function () {\n        const { code, msg } = JSON.parse(reader.result)\n        if (code === 500 || code === 401) {\n          throw new Error(msg)\n          Message.error(msg)\n        }\n      }\n    }\n  } else {\n    const formData = new FormData()\n    formData.append(&#39;fileName&#39;, `${fileName}.xls`)\n    const _data = await downloadExcelFilePublicHandler(formData)\n    downloadExcel({ data: _data, fileName: fileName, successMsg: successMsg })\n  }\n}\n\nfunction getCurrentDate () {\n  const year = new Date().getFullYear()\n  const month = new Date().getMonth() + 1\n  const day = new Date().getDate()\n  const time = year + &#39;-&#39; + month + &#39;-&#39; + day\n  return {\n    year,\n    month,\n    day,\n    time\n  }\n}\n</code></pre>\n"},{"fileName":"前端打印dom以及打印css设置.md","content":"<h3>方法一</h3>\n<pre><code>      const printWindow = window.open()\n      printWindow.document.write(document.querySelector(&#39;#printBox&#39;).innerHTML)\n      printWindow.print()\n      printWindow.close()\n</code></pre>\n<p>##方法二\n<code>print.js</code></p>\n<pre><code>// 打印类属性、方法定义\n/* eslint-disable */\nconst Print = function(dom, options) {\n  if (!(this instanceof Print)) return new Print(dom, options)\n\n  this.options = this.extend(\n    {\n      noPrint: &#39;.no-print&#39;,\n    },\n    options\n  )\n\n  if (typeof dom === &#39;string&#39;) {\n    this.dom = document.querySelector(dom)\n  } else {\n    this.isDOM(dom)\n    this.dom = this.isDOM(dom) ? dom : dom.$el\n  }\n\n  this.init()\n}\nPrint.prototype = {\n  init: function() {\n    var content = this.getStyle() + this.getHtml()\n    this.writeIframe(content)\n  },\n  extend: function(obj, obj2) {\n    for (var k in obj2) {\n      obj[k] = obj2[k]\n    }\n    return obj\n  },\n\n  getStyle: function() {\n    var str = &#39;&#39;,\n      styles = document.querySelectorAll(&#39;style,link&#39;)\n    for (var i = 0; i &lt; styles.length; i++) {\n      str += styles[i].outerHTML\n    }\n    str += &#39;&lt;style&gt;&#39; + (this.options.noPrint ? this.options.noPrint : &#39;.no-print&#39;) + &#39;{display:none;}&lt;/style&gt;&#39;\n\n    return str\n  },\n\n  getHtml: function() {\n    var inputs = document.querySelectorAll(&#39;input&#39;)\n    var textareas = document.querySelectorAll(&#39;textarea&#39;)\n    var selects = document.querySelectorAll(&#39;select&#39;)\n\n    for (var k = 0; k &lt; inputs.length; k++) {\n      if (inputs[k].type == &#39;checkbox&#39; || inputs[k].type == &#39;radio&#39;) {\n        if (inputs[k].checked == true) {\n          inputs[k].setAttribute(&#39;checked&#39;, &#39;checked&#39;)\n        } else {\n          inputs[k].removeAttribute(&#39;checked&#39;)\n        }\n      } else if (inputs[k].type == &#39;text&#39;) {\n        inputs[k].setAttribute(&#39;value&#39;, inputs[k].value)\n      } else {\n        inputs[k].setAttribute(&#39;value&#39;, inputs[k].value)\n      }\n    }\n\n    for (var k2 = 0; k2 &lt; textareas.length; k2++) {\n      if (textareas[k2].type == &#39;textarea&#39;) {\n        textareas[k2].innerHTML = textareas[k2].value\n      }\n    }\n\n    for (var k3 = 0; k3 &lt; selects.length; k3++) {\n      if (selects[k3].type == &#39;select-one&#39;) {\n        var child = selects[k3].children\n        for (var i in child) {\n          if (child[i].tagName == &#39;OPTION&#39;) {\n            if (child[i].selected == true) {\n              child[i].setAttribute(&#39;selected&#39;, &#39;selected&#39;)\n            } else {\n              child[i].removeAttribute(&#39;selected&#39;)\n            }\n          }\n        }\n      }\n    }\n\n    return this.dom.outerHTML\n  },\n\n  writeIframe: function(content) {\n    var w,\n      doc,\n      iframe = document.createElement(&#39;iframe&#39;),\n      f = document.body.appendChild(iframe)\n    iframe.id = &#39;myIframe&#39;\n    //iframe.style = &quot;position:absolute;width:0;height:0;top:-10px;left:-10px;&quot;;\n    iframe.setAttribute(&#39;style&#39;, &#39;position:absolute;width:0;height:0;top:-10px;left:-10px;&#39;)\n    w = f.contentWindow || f.contentDocument\n    doc = f.contentDocument || f.contentWindow.document\n    doc.open()\n    doc.write(content)\n    doc.close()\n    var _this = this\n    iframe.onload = function() {\n      _this.toPrint(w)\n      setTimeout(function() {\n        document.body.removeChild(iframe)\n      }, 100)\n    }\n  },\n\n  toPrint: function(frameWindow) {\n    try {\n      setTimeout(function() {\n        frameWindow.focus()\n        try {\n          if (!frameWindow.document.execCommand(&#39;print&#39;, false, null)) {\n            frameWindow.print()\n          }\n        } catch (e) {\n          frameWindow.print()\n        }\n        frameWindow.close()\n      }, 10)\n    } catch (err) {\n      console.log(&#39;err&#39;, err)\n    }\n  },\n  isDOM:\n    typeof HTMLElement === &#39;object&#39;\n      ? function(obj) {\n          return obj instanceof HTMLElement\n        }\n      : function(obj) {\n          return obj &amp;&amp; typeof obj === &#39;object&#39; &amp;&amp; obj.nodeType === 1 &amp;&amp; typeof obj.nodeName === &#39;string&#39;\n        },\n}\nconst MyPlugin = {}\nMyPlugin.install = function(Vue, options) {\n  // 4. 添加实例方法\n  Vue.prototype.$print = Print\n}\nexport default MyPlugin\n</code></pre>\n<blockquote>\n<p>在main.js注册插件</p>\n</blockquote>\n<pre><code>// 注册打印插件\nimport print from &#39;@/plugin/print/print.js&#39;\nVue.use(print)\n</code></pre>\n<blockquote>\n<p>在页面中使用</p>\n</blockquote>\n<pre><code>const dom = document.querySelector(&#39;#printBox&#39;)\nthis.$print(dom)\n</code></pre>\n<h2>打印样式</h2>\n<pre><code>export function setStyle (direction) {\n  const styleNode = document.createElement(&#39;style&#39;)\n  styleNode.setAttribute(&#39;id&#39;, &#39;print-style&#39;)\n  styleNode.setAttribute(&#39;type&#39;, &#39;text/css&#39;)\n  // styleNode.innerHTML = `\n  //   @media print {\n  //       @page {\n  //           size: A4 ${direction};\n  //           margin: 3mm;\n  //       }\n  //   }\n  //   `\n  styleNode.innerHTML = `\n    @media print {\n        @page {\n            margin: 3mm;\n        }\n    }\n    `\n  window.document.head.appendChild(styleNode)\n}\nexport function removeStyle () {\n  const styleNode = document.querySelector(&#39;#print-style&#39;)\n  window.document.head.removeChild(styleNode)\n}\n</code></pre>\n<h2>css设置</h2>\n<p>针对打印样式进行设置，这里要用到媒体查询，字体一般用pt单位，宽高和间距一般用物理单位cm或mm</p>\n<pre><code>@media print {\n    html,body {\n        //A4默认为210mm*287mm\n        width:210mm\n        height:297mm\n    }\n    .page{\n        font-size:10pt;\n        width:initial;\n    }\n    .page .part2 td{\n        height:1cm;\n    }\n   　@page {\n　　　　 size:landscape; //portrait纵向 landscape横向\n      　　 margin:2mm;//设置打印出来的页面外边距\n    }\n/* 告诉浏览器在渲染它时不要对框进行颜色或样式调整 */\n        * {\n          -webkit-print-color-adjust: exact !important;\n          -moz-print-color-adjust: exact !important;\n          -ms-print-color-adjust: exact !important;\n          print-color-adjust: exact !important;\n        }\n  .part2 {\n      page-break-inside: avoid;//这样设置能保证表格每一行不会被强行分割\n      page-break-before: always;//强制分页\n  }\n\n}\n</code></pre>\n"},{"fileName":"前端脚手架配置打包后的预览环境.md","content":"<h2>前端脚手架配置打包后的预览环境</h2>\n<h4>首先npm安装<code>connect</code>,<code>runjs</code>,<code>chalk</code></h4>\n<h4>index.js主要代码如下 请根据项目实际情况进行更改，仅作参考：</h4>\n<blockquote>\n<p>process.argv获取的是执行命令 例如<code>node build/index.js --preview</code></p>\n</blockquote>\n<pre><code class=\"language-js\">const { run } = require(&#39;runjs&#39;)\nconst chalk = require(&#39;chalk&#39;)\nconst config = require(&#39;../vue.config.js&#39;)\nconst rawArgv = process.argv.slice(2)\nconst args = rawArgv.join(&#39; &#39;)\n\nif (process.env.npm_config_preview || rawArgv.includes(&#39;--preview&#39;)) {\n  const report = rawArgv.includes(&#39;--report&#39;)\n\n  run(`vue-cli-service build ${args}`)\n\n  const port = 9526\n  const publicPath = config.publicPath\n\n  var connect = require(&#39;connect&#39;)\n  var serveStatic = require(&#39;serve-static&#39;)\n  const app = connect()\n\n  app.use(\n    publicPath,\n    serveStatic(&#39;./dist&#39;, {\n      index: [&#39;index.html&#39;, &#39;/&#39;]\n    })\n  )\n\n  app.listen(port, function () {\n    console.log(chalk.green(`&gt; Preview at  http://localhost:${port}${publicPath}`))\n    if (report) {\n      console.log(chalk.green(`&gt; Report at  http://localhost:${port}${publicPath}report.html`))\n    }\n\n  })\n} else {\n  run(`vue-cli-service build ${args}`)\n}\n</code></pre>\n<h3>在package.json配置script命令</h3>\n<pre><code>{\n    &quot;scripts&quot;:{\n        &quot;preview&quot;: &quot;node 你的目录/index.js --preview&quot;,\n    }\n}\n</code></pre>\n<h4></h4>\n"},{"fileName":"前端项目使用vw视口单位进行适配时字体大小的解决方案.md","content":"<p>使用视口单位vw来实现响应式排版。1vw等同于视口宽度的百分之一，即如果你用vw来设定字体大小的话，字体的大小将总是随视口的大小进行改变。</p>\n<p>问题在于，当做上面的事情的时候，因为文本总是随着视口的大小改变大小，用户失去了放缩任何使用vw单位的文本的能力。所以你永远都不要只用 viewport 单位设定文本。</p>\n<p>例如我们使用postcss-px-to-viewport对vw进行转换，转换后的字体单位也是vw,当浏览器进行缩放时，字体会随之变大或变小</p>\n<p>这里有一个解决方法，它使用了calc()，如果你将vw单位加到了使用固定大小（例如em或者rem）的值组，那么文本仍然是可放缩的。基本来说，是vw加在了放缩后的值上。</p>\n<pre><code>h1 {\n  font-size: calc(1.5rem + 3vw);\n}\n</code></pre>\n<p>然后再配合媒介查询中重新定义fontSize</p>\n"},{"fileName":"前端预览pdf文件流.md","content":"<pre><code>await api(html).then(res =&gt; {\n        const blob = new Blob([res], { type: &#39;application/pdf;charset-UTF-8&#39; })\n        const url = URL.createObjectURL(blob)\n        window.open(url)\n      })\n</code></pre>\n<pre><code>export function api (data) {\n  return request({\n    url: &#39;/kc/print/kcSeatingExport&#39;,\n    method: &#39;post&#39;,\n    data,\n    responseType: &#39;blob&#39;\n  })\n}\n</code></pre>\n"},{"fileName":"动态创建style标签 写入样式.md","content":"<pre><code>      // 从字符串初始化document\n      const parser = new DOMParser()\n      const parseDocument = parser.parseFromString(this.editorText, &#39;text/html&#39;)\n      // 动态创建style标签 写入样式\n      const style = parseDocument.createElement(&#39;style&#39;)\n      style.type = &#39;text/css&#39;\n      style.innerHTML = &#39;@page{margin:3mm;size: A4 portrait;}&#39;\n      parseDocument.getElementsByTagName(&#39;head&#39;)[0].appendChild(style)\n</code></pre>\n"},{"fileName":"动态加载style标签改变打印方向.md","content":"<p>注意innerHTM必须换行书写</p>\n<pre><code>export function setStyle (direction) {\n  const styleNode = document.createElement(&#39;style&#39;)\n  styleNode.setAttribute(&#39;id&#39;, &#39;print-style&#39;)\n  styleNode.setAttribute(&#39;type&#39;, &#39;text/css&#39;)\n  styleNode.innerHTML = `\n    @media print { \n        @page {\n            size: A4 ${direction};\n        }\n    }\n    `\n  window.document.head.appendChild(styleNode)\n}\nexport function removeStyle () {\n  const styleNode = document.querySelector(&#39;#print-style&#39;)\n  window.document.head.removeChild(styleNode)\n}\n</code></pre>\n"},{"fileName":"匹配到所有中文.md","content":"<h3>了解一下下unicode编码</h3>\n<blockquote>\n<p>Unicode（中文：万国码、国际码、统一码、单一码）是电脑科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。 Unicode 伴随著通用字符集的标准而发展，同时也以书本的形式[1]对外发表。Unicode 至今仍在不断增修，每个新版本都加入更多新的字符。目前最新的版本为2019年5月公布的12.1.0[2]，已经收录超过13万个字符（第十万个字符在2005年获采纳）。Unicode涵盖的资料除了视觉上的字形、编码方法、标准的字符编码外，还包含了字符特性，如大小写字母。引用至《<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2FUnicode\" title=\"https://zh.wikipedia.org/zh-hans/Unicode\">维基百科</a>》</p>\n</blockquote>\n<h3>为什么有这篇文章</h3>\n<p>当然是掉坑里头了。前两天做了一个表单，姓名一栏只允许填入中文。</p>\n<p>javascript</p>\n<p>复制代码</p>\n<p><code>name.value.replace(/[^\\u4e00-\\u9fa5]/g, &#39;&#39;)</code> </p>\n<p>代码提测，本着我的代码不可能会有bug的态度下班了。晚上钉钉一阵一阵的的响。测试老哥说：哥，有bug。 我心里想：有bug？开什么玩笑，你是不是不会用？问他：哪bug了？ 姓名一栏可以输入中文。 我差点发火，这不是质疑我的代码了吗。刚要反驳不可能。 测试老哥顺手丢过来两字：<strong>龿龿</strong> 说：你自己试试。</p>\n<p>javascript</p>\n<p>复制代码</p>\n<p><code>&#39;龿龿&#39;.replace(/[\\u4e00-\\u9fa5]/g, &#39;&#39;)  //&quot;龿龿&quot;</code> </p>\n<p>嗯，怎么匹配不到？</p>\n<h3>[\\u4e00-\\u9fa5]有什么用</h3>\n<p>javascript采用的是utf-16 的编码方案，就是两个字节，unicode 的表现形式就是 <strong>\\uxxxx</strong> 。使用[\\u4e00-\\u9fa5]匹配中文，<strong>\\u4e00</strong> 是unicode中第一个汉字的码点，<strong>\\u9fa5</strong> 是unicode中最后一个汉字的码点。</p>\n<p>arduino</p>\n<p>复制代码</p>\n<p><code>&#39;\\u4e00&#39; // &#39;一&#39; &#39;\\u95a5&#39; // &#39;龥&#39;</code> </p>\n<p>不过显然，最后一个码点似乎不对了。 查阅各版本unicode数据文档发现：</p>\n<p>复制代码</p>\n<p><code>6.2-7.0     \\u4e00 - \\u9fcc 8.0-9.0     \\u4e00 - \\u9fd5 10.0        \\u4e00 - \\u9fea 11.0-12.1   \\4e00 - \\u9fef 13.0        \\4e00 - \\u9ffc 14.0-15.0   \\4e00 - \\u9fff</code> </p>\n<p>没看见 <strong>\\u9fa5</strong> 从那个版本开始的，但至少8.0版本后，中文的最后一个码点移动到了 <strong>\\u9fd5</strong> 。</p>\n<h3>更正的中文匹配方式 [\\u4e00-\\u9fff]</h3>\n<p>javascript</p>\n<p>复制代码</p>\n<p><code>&#39;龿龿&#39;.replace(/[\\u4e00-\\u9fff]/g, &#39;&#39;) // &#39;&#39; &#39;你会不认识这几个字龦龯龿&#39;.replace(/[\\u4e00-\\u9fff]/g, &#39;&#39;) // &#39;&#39;</code> </p>\n<h3>万能的中文匹配方式 /\\p{sc=Han}/gu</h3>\n<p>javascript</p>\n<p>复制代码</p>\n<p><code>&#39;龿龿&#39;.replace(/\\p{sc=Han}/gu, &#39;&#39;) // &#39;&#39; &#39;你会不认识这几个字龦龯龿&#39;.replace(/\\p{sc=Han}/gu, &#39;&#39;) // &#39;&#39;</code> </p>\n<h3>补充</h3>\n<p>文档数据可以在unicode官网查看：</p>\n<p><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.unicode.org%2F\" title=\"https://www.unicode.org/\">unicode官网</a></p>\n<p><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.unicode.org%2FPublic%2F8.0.0%2Fucd%2FUnicodeData.txt\" title=\"https://www.unicode.org/Public/8.0.0/ucd/UnicodeData.txt\">8.0 unicode数据文档</a></p>\n"},{"fileName":"单例模式.md","content":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        #loginlayer {\n            width: 100px;\n            height: 100px;\n            background-color: yellow;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=&quot;loginBtn&quot;&gt;点击登录&lt;/button&gt;\n    &lt;button id=&quot;iframeBtn&quot;&gt;iframe&lt;/button&gt;\n    &lt;script&gt;\n        // 用代理实现单例模式\n       /*  let CreatedDiv = function(html) {\n            this.html = html\n            this.init()\n        }\n        CreatedDiv.prototype.init = function() {\n            let div = document.createElement(&quot;div&quot;)\n            div.innerHTML = this.html\n            document.body.appendChild(div)\n        }\n\n        let ProxyCreatedDiv = (function() {\n            let instance\n            return function(html) {\n                if(!instance) {\n                    instance = new CreatedDiv(html)\n                }\n                return instance\n            }\n        })()\n\n        let a = new ProxyCreatedDiv(&#39;div1&#39;)\n        let b = new ProxyCreatedDiv(&#39;div2&#39;)\n        console.log(a === b) */\n\n        // 通用的惰性单例模式\n        let createdLoginlayer = function() {\n            let div = document.createElement(&quot;div&quot;)\n            div.id = &quot;loginlayer&quot;\n            div.innerHTML = &quot;我是登录浮窗&quot;\n            div.style.display = &quot;none&quot;\n            document.body.appendChild(div)\n            return div\n        }\n\n        let createdIframe = function() {\n            let idframe = document.createElement(&quot;iframe&quot;)\n            document.body.appendChild(idframe)\n            return idframe\n        }\n        // 管理单例逻辑\n        let getSingle = function(fn){\n            var instance\n            return function(){\n                return instance ?? (instance = fn.apply(this, arguments))\n            }\n        }\n\n        let createdSingleLoginlayer = getSingle(createdLoginlayer)\n        document.getElementById(&#39;loginBtn&#39;).onclick = function() {\n            createdSingleLoginlayer().style.display = &quot;block&quot;\n        }\n\n        let createddSingleIframe = getSingle(createdIframe)\n        document.getElementById(&#39;iframeBtn&#39;).onclick = function() {\n            createddSingleIframe().src = &quot;https://www.baidu.com&quot;\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"fileName":"去除el-table背景色hover.md","content":"<pre><code>/deep/.el-table__body tr.hover-row &gt; td.el-table__cell {\n  background-color: transparent !important;\n}\n.el-table &gt;&gt;&gt; .el-table__body tr:hover &gt; td {\n  background-color: rgba(0, 0, 0, 0) !important;\n}\n.el-table &gt;&gt;&gt; .el-table__body td {\n  background-color: rgba(0, 0, 0, 0) !important;\n}\n</code></pre>\n"},{"fileName":"基于el-dialog封装全局弹窗.md","content":"<blockquote>\n<p>dialog</p>\n</blockquote>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-dialog title=&quot;切换考试&quot; top=&quot;9vh&quot; :modal=&quot;false&quot; width=&quot;600px&quot; :visible.sync=&quot;dialogVisible&quot; @close=&quot;close&quot; :append-to-body=&quot;true&quot;&gt;\n      &lt;el-row&gt;\n        &lt;el-table :data=&quot;examList&quot; border style=&quot;width: 100%&quot; height=&quot;500&quot;&gt;\n          &lt;el-table-column prop=&quot;id&quot; label=&quot;编码&quot; width=&quot;100&quot;&gt; &lt;/el-table-column&gt;\n          &lt;el-table-column prop=&quot;name&quot; label=&quot;考试名称&quot; width=&quot;300&quot; show-overflow-tooltip&gt; &lt;/el-table-column&gt;\n          &lt;el-table-column prop=&quot;examDate&quot; label=&quot;考试年月&quot;&gt; &lt;/el-table-column&gt;\n          &lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; min-width=&quot;60&quot;&gt;\n            &lt;template slot-scope=&quot;scope&quot;&gt;\n              &lt;el-button @click=&quot;handleSelectExam(scope.row)&quot; type=&quot;text&quot; size=&quot;small&quot;&gt;切换&lt;/el-button&gt;\n            &lt;/template&gt;\n          &lt;/el-table-column&gt;\n        &lt;/el-table&gt;\n      &lt;/el-row&gt;\n    &lt;/el-dialog&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapActions } from &#39;vuex&#39;\nimport * as api from &#39;./api&#39;\nimport store from &#39;@/store&#39;\nexport default {\n  name: &#39;qz-exam-list&#39;,\n  props: {\n    close: {\n      type: Function,\n      default: () =&gt; {}\n    }\n  },\n  data () {\n    return {\n      examList: [],\n      dialogVisible: false\n    }\n  },\n  mounted () {},\n  methods: {\n    ...mapActions(&#39;d2admin/theme&#39;, [&#39;set&#39;]),\n    open () {\n      this.dialogVisible = true\n      this.$nextTick(async () =&gt; {\n        this.examList = await api.getExamList()\n        // 找到当前的选中\n      })\n    },\n    async handleSelectExam (data) {\n      await store.dispatch(&#39;d2admin/user/setExam&#39;, data, { root: true })\n      // 切换考试后清空导航栏\n      await store.dispatch(&#39;d2admin/page/closeAll&#39;)\n      this.dialogVisible = false\n      this.close()\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<p>js </p>\n</blockquote>\n<pre><code>import Vue from &#39;vue&#39;\nimport selectExamDialog from &#39;./dialog&#39; // 引入弹窗组件\n\nconst SelectExamDialog = Vue.extend(selectExamDialog)\nselectExamDialog.open = function (callback) {\n  const instance = new SelectExamDialog().$mount()\n  document.body.appendChild(instance.$el)\n  instance.close = () =&gt; {\n    callback &amp;&amp; callback()\n    document.body.removeChild(instance.$el)\n    instance.$destroy()\n  }\n  Vue.nextTick(() =&gt; {\n    instance.open()\n  })\n}\n// 导出\nexport default selectExamDialog\n</code></pre>\n<blockquote>\n<p>全局挂载</p>\n</blockquote>\n<pre><code>import selectExam from &#39;@/components/qz-select-exam&#39;\n\nexport default {\n  async install (Vue, options) {\n // 全局可使用\n    Vue.prototype.$selectExam = selectExam\n  }\n}\n</code></pre>\n"},{"fileName":"妙用 hook 事件.md","content":"<p>如果想监听子组件的生命周期时，可以像下面例子中这么做：</p>\n<pre><code>&lt;template&gt;\n  &lt;child @hook:mounted=&quot;removeLoading&quot; /&gt;\n&lt;/template&gt;\n</code></pre>\n<p>这样的写法可以用于处理加载第三方的初始化过程稍漫长的子组件时，我们可以加loading动画，等到子组件加载完毕，到了mounted生命周期时，把loading动画移除。\n初次之外hook还有一个常用的写法，在一个需要轮询更新数据的组件上，我们通常在created里开启定时器，然后在beforeDestroy上清除定时器。而通过hook,开启和销毁定时器的逻辑我们都可以在created里实现：</p>\n<pre><code>&lt;script&gt;\n  export default {\n    created() {\n      const timer = setInterval(() =&gt; {\n        // 更新逻辑\n      }, 1000);\n      // 通过$once和hook监听实例自身的beforeDestroy，触发该生命周期时清除定时器\n      this.$once(&quot;hook:beforeDestroy&quot;, () =&gt; {\n        clearInterval(timer);\n      });\n    },\n  };\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"妙用 watch 的数组格式.md","content":"<p>很多开发者会在watch中某一个变量的handler里调用多个操作，如下所示：</p>\n<pre><code class=\"language-js\">export default {\n    data() {\n      return {\n        value: &quot;&quot;,\n      };\n    },\n    methods: {\n      fn1() {},\n      fn2() {},\n    },\n    watch: {\n      value: {\n        handler() {\n          fn1();\n          fn2();\n        },\n        immediate: true,\n        deep: true,\n      },\n    },\n  };\n</code></pre>\n<p>虽然fn1和fn2都需要在value变动的时候调用，但两者的调用时机可能不同。fn1可能仅需要在deep为false的配置下调用既可。因此，Vue在watch的值添加了Array类型来针对上面所说的情况，如果用watch为Array的写法处理可以写成下面这种形式：</p>\n<pre><code class=\"language-js\">  watch:{\n      &#39;value&#39;:[\n          {\n              handler:function(){\n                  fn1()\n              },\n              immediate:true\n          },\n          {\n              handler:function(){\n                  fn2()\n              },\n              immediate:true,\n              deep:true\n          }\n      ]\n  }\n</code></pre>\n<p>同时也印证使用<code>this.$watch</code>可重复添加多个handler到相同的监听对象</p>\n"},{"fileName":"妙用$options.md","content":"<p>$options是一个记录当前Vue组件的初始化属性选项。通常开发中，我们想把data里的某个值重置为初始化时候的值，可以像下面这么写：</p>\n<pre><code>this.value = this.$options.data().value;\n</code></pre>\n<p>这样子就可以在初始值由于需求需要更改时，只在data中更改即可。</p>\n<p>这里再举一个场景：一个el-dialog中有一个el-form，我们要求每次打开el-dialog时都要重置el-form里的数据，则可以这么写：</p>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-button @click=&quot;visible=!visible&quot;&gt;打开弹窗&lt;/el-button&gt;\n    &lt;el-dialog @open=&quot;initForm&quot; title=&quot;个人资料&quot; :visible.sync=&quot;visible&quot;&gt;\n      &lt;el-form&gt;\n        &lt;el-form-item label=&quot;名称&quot;&gt;\n          &lt;el-input v-model=&quot;form.name&quot;/&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;性别&quot;&gt;\n          &lt;el-radio-group v-model=&quot;form.gender&quot;&gt;\n            &lt;el-radio label=&quot;male&quot;&gt;男&lt;/el-radio&gt;\n            &lt;el-radio label=&quot;female&quot;&gt;女&lt;/el-radio&gt;\n          &lt;/el-radio-group&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/el-dialog&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nexport default {\n  name: &quot;App&quot;,\n  data(){\n    return {\n      visible: false,\n      form: {\n        gender: &#39;male&#39;,\n        name: &#39;wayne&#39;\n      }\n    }\n  },\n  methods:{\n    initForm(){\n      this.form = this.$options.data().form\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>如果要重置data里的所有值，可以像下面这么写：</p>\n<pre><code>Object.assign(this.$data, this.$options.data());\n// 注意千万不要写成下面的样子，这样子就更改this.$data的指向。使得其指向另外的与组件脱离的状态\nthis.$data = this.$options.data();\n</code></pre>\n"},{"fileName":"媒体查询方法总结.md","content":"<h3>媒体查询常用方法</h3>\n<blockquote>\n<p>了解CSS中的width、device-width、resolution、aspect-ratio</p>\n</blockquote>\n<ul>\n<li><p>width/height ：定义输出设备中的 页面可见区域宽度/高度。</p>\n</li>\n<li><p>device-width/height ：定义输出设备的屏幕可见宽/高度。</p>\n</li>\n<li><p>resolution ：定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</p>\n</li>\n<li><p>aspect-ratio ：定义输出设备中的页面可见区域宽度与高度的比率。</p>\n</li>\n</ul>\n<blockquote>\n<p>了解media样式的使用方法</p>\n</blockquote>\n<ol>\n<li>一种方法是直接在link中判断设备的尺寸，然后引用不同的css文件：</li>\n</ol>\n<pre><code class=\"language-html\">&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (media feature)&quot; href=&quot;mystylesheet.css&quot;&gt;\n//示例\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styleA.css&quot; media=&quot;screen and (min-width: 400px)&quot;&gt;\n</code></pre>\n<ol start=\"2\">\n<li>另一种方法是直接写在 style 标签里：</li>\n</ol>\n<pre><code class=\"language-css\">&lt;style&gt;\n    @media screen and (max-width: 600px) { /*当屏幕尺寸小于600px时，应用下面的CSS样式*/\n      .class {\n        background: #ccc;\n      }\n    }\n&lt;/style&gt;\n</code></pre>\n<blockquote>\n<p>单个范围后面覆盖</p>\n</blockquote>\n<pre><code class=\"language-css\">@media screen and(min-width: 1100px) {\nbody{font-size: 20px}\n} \n@media screen and(min-width: 1280px) {\nbody{font-size: 22px;}\n} \n\n@media screen and(min-width: 1366px) {\n\nbody{font-size: 24px;}\n}  \n\n@media screen and(min-width: 1440px) {\nbody{font-size: 26px }\n} \n\n@media screen and(min-width: 1680px) {\nbody{font-size: 28px;}\n} \n@media screen and(min-width: 1920px) {\nbody{font-size: 30px;}\n} \n/* min-width:尺寸从小到大  max-width:尺寸大小从大到小 \n</code></pre>\n<blockquote>\n<p>写定的范围</p>\n</blockquote>\n<ul>\n<li>4096 * 2560</li>\n<li>2560 * 1440</li>\n<li>1920 * 1080</li>\n<li>1600 * 900</li>\n<li>1440 * 900</li>\n<li>1280 * 720</li>\n</ul>\n<pre><code class=\"language-css\">@media screen and (min-width: 1280px) and (max-width: 1440px) {}\n@media screen and (min-width: 1441px) and (max-width: 1600px) {}\n@media screen and (min-width: 1601px) and (max-width: 1920px) {}\n@media screen and (min-width: 1921px) and (max-width: 2560px) {}\n@media screen and (min-width: 2560px) and (max-width: 4095px) {}\n</code></pre>\n<blockquote>\n<p>相关链接：<code>https://blog.csdn.net/zhouzuoluo/article/details/95756442?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link</code></p>\n</blockquote>\n"},{"fileName":"字符串不满两位补零.md","content":"<h3>字符串不满两位补零</h3>\n<blockquote>\n<p>这个需求在开发中挺常见。例如，调用 Date api 获取到日期可能只有一位：</p>\n</blockquote>\n<pre><code>let date = new Date().getDate(); // 3\n</code></pre>\n<p>常规做法:</p>\n<pre><code>if (data.toString().length == 1) {\n    date = `0${date}`；\n}\n</code></pre>\n<p>使用 String.prototype.slice ：\n// 不管几位，都在前面拼接一个 0 ，然后截取最后两位</p>\n<pre><code>date = `0${date}`.slice(-2);\n</code></pre>\n<p>使用 String.prototype.padStart ：\n// 当字符串长度小于第一个参数值，就在前面补第二个参数</p>\n<pre><code>date = `${date}`.padStart(2, 0);\n</code></pre>\n"},{"fileName":"字符串的“true“和“false“转换成Bool类型.md","content":"<h2>字符串的“true“和“false“转换成Bool类型</h2>\n<pre><code>JSON.parse(&#39;true&#39;)\nJSON.parse(&#39;false&#39;)\n</code></pre>\n"},{"fileName":"实现一个Event Bus.md","content":"<p>// 实现一个Event Bus</p>\n<pre><code>class EventEmitter {\n    constructor() {\n        // handlers是一个map，用于存储事件与回调之间的对应关系\n        this.handlers = {}\n    }\n    // on方法用于安装事件监听器，它接受目标事件名和回调函数作为参数\n    on(eventName, cb) {\n        // 先检查一下目标事件名有没有对应的监听函数队列\n        if (!this.handlers[eventName]) {\n            // 如果没有，那么首先初始化一个监听函数队列\n            this.handlers[eventName] = []\n        }\n        // 把回调函数推入目标事件的监听函数队列里去\n        this.handlers[eventName].push(cb)\n    }\n    // 移除某个事件回调队列里的指定回调函数\n    off(eventName, cb) {\n        // 先检查一下目标事件名有没有对应的监听函数队列\n        const callbacks = this.handlers[eventName]\n        if (!callbacks) {\n            return\n        }\n        // 如果有就删除\n        const index = callbacks.indexOf(cb)\n        if (index !== -1) {\n            callbacks.splice(index, 1)\n        }\n    }\n    // emit方法用于触发目标事件，它接受事件名和监听函数入参作为参数\n    emit(eventName, ...args) {\n        // 检查目标事件是否有监听函数队列\n        const callbacks = this.handlers[eventName]\n        if (!callbacks) {\n            return\n        }\n        // 这里需要对 this.handlers[eventName] 做一次浅拷贝，主要目的是为了避免通过 once 安装的监听器在移除的过程中出现顺序问题\n        const handlers = callbacks.slice()\n        // 如果有，则逐个调用队列里的回调函数\n        handlers.forEach(callback =&gt; {\n            callback(...args)\n        })\n    }\n    once(eventName, cb) {\n        const wrapper = (...args) =&gt; {\n            cb(...args)\n            this.off(eventName, wrapper())\n        }\n        this.on(eventName, wrapper())\n\n    }\n}\n</code></pre>\n"},{"fileName":"将class转换为function.md","content":"<pre><code>class Example {\n  constructor(name) {\n    this.name = name\n  }\n  func() {\n    console.log(this.name)\n  }\n}\n/**\n * 1.class使用严格模式\n * 2.Example只能通过new调用\n * 3.func不能通过new调用\n * 4.func不可被枚举\n */\n&#39;use strict&#39;\nfunction Example(name) {\n  if (!(this instanceof Example)) {\n    throw new TypeError(&quot;Class constructor Example cannot be invoked without &#39;new&#39;&quot;)\n  }\n  this.name = name\n}\nObject.defineProperty(Example.prototype, &#39;func&#39;, {\n  value: function () {\n    if (!(this instanceof Example)) {\n      throw new TypeError(&quot;func is not a constructor&quot;)\n    }\n    console.log(this.name)\n  },\n  enumerable: false,\n})\n\n\n\n</code></pre>\n"},{"fileName":"将document输出为字符串.md","content":"<pre><code>// 获取整个文档对象\nconst doc = document.implementation.createDocument(null, &#39;html&#39;, null);\ndoc.documentElement.innerHTML = document.documentElement.innerHTML;\n\n// 创建一个XML序列化器\nconst serializer = new XMLSerializer();\n\n// 将文档对象序列化为字符串\nconst docString = serializer.serializeToString(doc);\n\nconsole.log(docString);\n</code></pre>\n"},{"fileName":"小程序踩坑指南.md","content":"<ol>\n<li>小程序使用v-html会转译成Rich-text,不支持 id 属性 不支持<code>&lt;table&gt;</code></li>\n<li>Web-view在小程序不支持加载本地html</li>\n<li>uniapp不在浏览器环境下运行 无法访问window、document等api</li>\n<li>props无法传递函数</li>\n<li>uview-form在小程序需要手动设置校验规则setRules</li>\n<li>无法使用eval函数等js解释器</li>\n<li>使用v-deep需要在data()同级添加\t\n <code> options: {      styleIsolation: &#39;shared&#39;,  } </code></li>\n</ol>\n"},{"fileName":"常用时间格式转换.md","content":"<pre><code>/**\n * Parse the time to string\n * @param {(Object|string|number)} time\n * @param {string} cFormat\n * @returns {string | null}\n */\nexport function parseTime(time, cFormat) {\n  if (arguments.length === 0 || !time) {\n    return null\n  }\n  const format = cFormat || &#39;{y}-{m}-{d} {h}:{i}:{s}&#39;\n  let date\n  if (typeof time === &#39;object&#39;) {\n    date = time\n  } else {\n    if ((typeof time === &#39;string&#39;)) {\n      if ((/^[0-9]+$/.test(time))) {\n        // support &quot;1548221490638&quot;\n        time = parseInt(time)\n      } else {\n        // support safari\n        // https://stackoverflow.com/questions/4310953/invalid-date-in-safari\n        time = time.replace(new RegExp(/-/gm), &#39;/&#39;)\n      }\n    }\n\n    if ((typeof time === &#39;number&#39;) &amp;&amp; (time.toString().length === 10)) {\n      time = time * 1000\n    }\n    date = new Date(time)\n  }\n  const formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  }\n  const time_str = format.replace(/{([ymdhisa])+}/g, (result, key) =&gt; {\n    const value = formatObj[key]\n    // Note: getDay() returns 0 on Sunday\n    if (key === &#39;a&#39;) { return [&#39;日&#39;, &#39;一&#39;, &#39;二&#39;, &#39;三&#39;, &#39;四&#39;, &#39;五&#39;, &#39;六&#39;][value ] }\n    return value.toString().padStart(2, &#39;0&#39;)\n  })\n  return time_str\n}\n\n/**\n * @param {number} time\n * @param {string} option\n * @returns {string}\n */\nexport function formatTime(time, option) {\n  if ((&#39;&#39; + time).length === 10) {\n    time = parseInt(time) * 1000\n  } else {\n    time = +time\n  }\n  const d = new Date(time)\n  const now = Date.now()\n\n  const diff = (now - d) / 1000\n\n  if (diff &lt; 30) {\n    return &#39;刚刚&#39;\n  } else if (diff &lt; 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + &#39;分钟前&#39;\n  } else if (diff &lt; 3600 * 24) {\n    return Math.ceil(diff / 3600) + &#39;小时前&#39;\n  } else if (diff &lt; 3600 * 24 * 2) {\n    return &#39;1天前&#39;\n  }\n  if (option) {\n    return parseTime(time, option)\n  } else {\n    return (\n      d.getMonth() +\n      1 +\n      &#39;月&#39; +\n      d.getDate() +\n      &#39;日&#39; +\n      d.getHours() +\n      &#39;时&#39; +\n      d.getMinutes() +\n      &#39;分&#39;\n    )\n  }\n}\n\n/**\n * @param {string} url\n * @returns {Object}\n */\nexport function param2Obj(url) {\n  const search = decodeURIComponent(url.split(&#39;?&#39;)[1]).replace(/\\+/g, &#39; &#39;)\n  if (!search) {\n    return {}\n  }\n  const obj = {}\n  const searchArr = search.split(&#39;&amp;&#39;)\n  searchArr.forEach(v =&gt; {\n    const index = v.indexOf(&#39;=&#39;)\n    if (index !== -1) {\n      const name = v.substring(0, index)\n      const val = v.substring(index + 1, v.length)\n      obj[name] = val\n    }\n  })\n  return obj\n}\n</code></pre>\n"},{"fileName":"常用正则校验.md","content":"<pre><code>/**\n * 邮箱\n * @param {*} s\n */\nexport function isEmail (s) {\n  return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(s)\n}\n\n/**\n * 手机号码\n * @param {*} s\n */\nexport function isMobile (s) {\n  return /^1[0-9]{10}$/.test(s)\n}\n\n/**\n * 电话号码\n * @param {*} s\n */\nexport function isPhone (s) {\n  return /^([0-9]{3,4}-)?[0-9]{7,8}$/.test(s)\n}\n\n/**\n * URL地址\n * @param {*} s\n */\nexport function isURL (s) {\n  return /^http[s]?:\\/\\/.*/.test(s)\n}\n\n\n\n\n/**\n * 数字(包含小数)校验\n */\nexport function checkNumber(value,sumLen,pointLen, callback) {\n  let reg = /^(((0(\\.\\d+)?))|([1-9]\\d*(\\.\\d+)?))$/\n  let msg = &#39;&#39;\n  if(pointLen === 0){\n      msg = &#39;请输入最多&#39;+ (sumLen-pointLen) + &#39;位整数&#39;\n  } else {\n      msg = &#39;请输入最多&#39;+ (sumLen-pointLen) + &#39;位整数, &#39; + pointLen + &#39;位小数的数字&#39;\n  }\n  if(value == null || value.toString().trim() == &#39;&#39;){\n    callback()\n  } else if (isNaN(value)) {\n    callback(new Error(&#39;请输入数字&#39;))\n  } else if (!reg.test(value)) {\n    callback(new Error(&#39;请输入合法的数字&#39;))\n  } else if(value.toString().indexOf(&quot;.&quot;) &gt;= 0) {\n    let numArr = value.toString().split(&#39;.&#39;)\n    if(numArr[0].length &gt; sumLen-pointLen ) {\n      callback(new Error(msg))\n    } else if(numArr[1].length &gt; pointLen) {\n      callback(new Error(msg))\n    } else {\n      callback()\n    }\n  } else if(value.toString().indexOf(&quot;.&quot;) &lt; 0 &amp;&amp; value.toString().length &gt; sumLen-pointLen) {\n    callback(new Error(msg))\n  }else {\n    callback()\n  }\n}\n\n/**\n * 正负数(包含小数)校验\n * @param value\n * @param sumLun\n * @param pointLen\n * @param callback\n */\nexport function checkNumberNegative(value,sumLen,pointLen,callback){\n  let reg = /(^[\\-0-9][0-9]*(.[0-9]+)?)$/\n  if(value == null || value.toString().trim() == &#39;&#39;){\n    callback()\n  } else if (isNaN(value)) {\n    callback(new Error(&#39;请输入数字&#39;))\n  } else if (!reg.test(value)) {\n    callback(new Error(&#39;请输入合法的数字&#39;))\n  } else if(value.toString().indexOf(&quot;.&quot;) &gt;= 0) {\n    let numArr = value.toString().split(&#39;.&#39;)\n    if(numArr[0].length &gt; sumLen-pointLen ) {\n      callback(new Error(&#39;请输入最多&#39;+ (sumLen-pointLen) + &#39;位整数, &#39; + pointLen + &#39;位小数的数字&#39;))\n    } else if(numArr[1].length &gt; pointLen) {\n      callback(new Error(&#39;请输入最多&#39;+ (sumLen-pointLen) + &#39;位整数, &#39; + pointLen + &#39;位小数的数字&#39;))\n    } else {\n      callback()\n    }\n  } else if(value.toString().indexOf(&quot;.&quot;) &lt; 0 &amp;&amp; value.toString().length &gt; sumLen-pointLen) {\n    callback(new Error(&#39;请输入最多&#39;+ (sumLen-pointLen) + &#39;位整数, &#39; + pointLen + &#39;位小数的数字&#39;))\n  }else {\n    callback()\n  }\n}\n\n/**\n * 百分比数字校验(包含负数)\n */\nexport function checkNumberPercent(rule,value,callback) {\n    let reg = /(^([+-]?)[1-9]([0-9]+)?(\\.[0-9]{1,2})?$)|(^([+-]?)(0){1}$)|(^([+-]?)[0-9]\\.[0-9]([0-9])?$)/\n    if(value == null || value.toString().trim() == &#39;&#39;){\n        callback()\n    } else if (isNaN(value)) {\n      callback(new Error(&#39;请输入最多2位小数的数字&#39;))\n    } else if (!reg.test(value)) {\n      callback(new Error(&#39;请输入最多2位小数的数字&#39;))\n    } else if (Number(value) &gt; 100 || Number(value) &lt; -100){\n      callback(new Error(&#39;请输入正负100之间的数字&#39;))\n    }else {\n      callback()\n    }\n}\n\n/**\n * 百分比数字校验(不包含负数)\n */\nexport function checkPercent(rule,value,callback) {\n    let reg = /^[0-9]+([.]{1}[0-9]{1,2})?$/\n    if(value == null || value.toString().trim() == &#39;&#39;){\n        callback()\n    } else if (isNaN(value)) {\n      callback(new Error(&#39;请输入最多2位小数的数字&#39;))\n    } else if (!reg.test(value)) {\n      callback(new Error(&#39;请输入最多2位小数的数字&#39;))\n    } else if (Number(value) &gt; 100){\n      callback(new Error(&#39;请输入小于100的数字&#39;))\n    }else {\n      callback()\n    }\n}\n\n/**\n * 校验正整数和0\n */\nexport function checkPositiveIntegers(rule,value,callback) {\n  let reg = /^(0|\\+?[1-9][0-9]*)$/\n  if(value == null || value.toString().trim() == &#39;&#39;){\n    callback()\n  } else if (isNaN(value)) {\n    callback(new Error(&#39;请输入数字&#39;))\n  } else if (!reg.test(value)) {\n    callback(new Error(&#39;请输入合法的非负整数&#39;))\n  } else {\n    callback()\n  }\n}\n\n\n\n</code></pre>\n"},{"fileName":"插槽.md","content":"<h3>插槽</h3>\n<pre><code class=\"language-js\">&lt;bgdiv&gt;\n      &lt;span class=&quot;divbgheader&quot; slot=&quot;header&quot;&gt;材料成本核算&lt;/span&gt;\n      &lt;bar class=&quot;clcbhsChart&quot; id=&quot;clcbhsChart&quot; ref=&quot;clcbhsChart&quot; barheight=&quot;100%&quot; :color=&quot;color&quot;&gt;&lt;/bar&gt;\n    &lt;/bgdiv&gt;\n</code></pre>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;bgdiv&quot; :class=&quot;shadow ? &#39;is-&#39; + shadow + &#39;-shadow&#39; : &#39;is-always-shadow&#39;&quot;&gt;\n    &lt;div class=&quot;bgdiv__header&quot; v-if=&quot;$slots.header || header&quot;&gt;\n      &lt;slot name=&quot;header&quot;&gt;{{ header }}&lt;/slot&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;bgdiv__body&quot; :style=&quot;bodyStyle&quot;&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;ElCard&#39;,\n  props: {\n    header: {},\n    bodyStyle: {},\n    shadow: {\n      type: String\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n"},{"fileName":"改变事件执行顺序.md","content":"<h3>直接点击提交执行submitFn,点击输入框后再点击提交等待onBlur执行完后执行提交</h3>\n<h3>不要忘记finally置空</h3>\n<pre><code>&lt;template&gt;\n  &lt;el-input @blur=&quot;onBlur&quot; v-model=&quot;input&quot; placeholder=&quot;Please input&quot; style=&quot;width:200px&quot; /&gt;\n  &lt;el-button @click=&quot;submitFn&quot; type=&quot;primary&quot;&gt;提交&lt;/el-button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { reactive, toRefs, ref } from &#39;vue&#39;\nexport default {\n  setup () {\n    const input = ref(&#39;&#39;)\n    let inputLoading = null\n\n    const onBlur = () =&gt; {\n      inputLoading = new Promise(resolve =&gt; {\n        console.log(&#39;onBlurStart&#39;)\n        setTimeout(() =&gt; {\n          console.log(&#39;onBlurEnd&#39;)\n          resolve()\n        }, 2000)\n        //不要忘记finally置空\n      }).finally(() =&gt; {\n        inputLoading = null\n      })\n\n    }\n    const submitFn = () =&gt; {\n      if (inputLoading) {\n        inputLoading.then(() =&gt; {\n          console.log(&#39;submit&#39;, 22)\n        })\n      } else {\n        console.log(&#39;submit&#39;, 11)\n      }\n    }\n    return { input, onBlur, submitFn }\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n&lt;/style&gt;\n</code></pre>\n"},{"fileName":"数组按照每个对象的属性值的大小进行排序.md","content":"<blockquote>\n<p>数组按照每个对象的属性值的大小进行排序</p>\n</blockquote>\n<pre><code class=\"language-js\">let arr = this.data \narr.sort(this.compare(&#39;avgScore&#39;))\n\ncompare (property) {\n    return function (a, b) {\n        var value1 = a[property]\n        var value2 = b[property]\n        return value2 - value1\n    }\n},\n</code></pre>\n<blockquote>\n<p>分割数组为[[],[],[]]</p>\n</blockquote>\n<pre><code class=\"language-js\">// 分割数组\n    splitData (num, arr) {\n      if (this[arr].length &lt; num) {\n        return [this[arr]]\n      } else {\n        const times = Math.ceil(this[arr].length / num)\n        const newArr = []\n        for (let i = 0; i &lt;= times; i++) {\n          if (i * num &gt;= this[arr].length) {\n            break\n          }\n          newArr.push(this[arr].slice(i * num, (i + 1) * num))\n        }\n        return newArr\n      }\n    },\n</code></pre>\n"},{"fileName":"时间戳显示为多少分钟前，多少天前的JS处理.md","content":"<p>（转载原文）[<a href=\"https://www.zhangxinxu.com/php/microCodeDetail?id=11%5D\">https://www.zhangxinxu.com/php/microCodeDetail?id=11]</a></p>\n<pre><code>/*\n** 时间戳显示为多少分钟前，多少天前的处理\n** eg.\n** console.log(dateDiff(1411111111111));  // 2014年09月19日\n** console.log(dateDiff(1481111111111));  // 9月前\n** console.log(dateDiff(1499911111111));  // 2月前\n** console.log(dateDiff(1503211111111));  // 3周前\n** console.log(dateDiff(1505283100802));  // 1分钟前\n*/\nvar dateDiff = function (timestamp) {\n    // 补全为13位\n    var arrTimestamp = (timestamp + &#39;&#39;).split(&#39;&#39;);\n    for (var start = 0; start &lt; 13; start++) {\n        if (!arrTimestamp[start]) {\n            arrTimestamp[start] = &#39;0&#39;;\n        }\n    }\n    timestamp = arrTimestamp.join(&#39;&#39;) * 1;\n\n    var minute = 1000 * 60;\n    var hour = minute * 60;\n    var day = hour * 24;\n    var halfamonth = day * 15;\n    var month = day * 30;\n    var now = new Date().getTime();\n    var diffValue = now - timestamp;\n\n    // 如果本地时间反而小于变量时间\n    if (diffValue &lt; 0) {\n        return &#39;不久前&#39;;\n    }\n\n    // 计算差异时间的量级\n    var monthC = diffValue / month;\n    var weekC = diffValue / (7 * day);\n    var dayC = diffValue / day;\n    var hourC = diffValue / hour;\n    var minC = diffValue / minute;\n\n    // 数值补0方法\n    var zero = function (value) {\n        if (value &lt; 10) {\n            return &#39;0&#39; + value;\n        }\n        return value;\n    };\n\n    // 使用\n    if (monthC &gt; 12) {\n        // 超过1年，直接显示年月日\n        return (function () {\n            var date = new Date(timestamp);\n            return date.getFullYear() + &#39;年&#39; + zero(date.getMonth() + 1) + &#39;月&#39; + zero(date.getDate()) + &#39;日&#39;;\n        })();\n    } else if (monthC &gt;= 1) {\n        return parseInt(monthC) + &quot;月前&quot;;\n    } else if (weekC &gt;= 1) {\n        return parseInt(weekC) + &quot;周前&quot;;\n    } else if (dayC &gt;= 1) {\n        return parseInt(dayC) + &quot;天前&quot;;\n    } else if (hourC &gt;= 1) {\n        return parseInt(hourC) + &quot;小时前&quot;;\n    } else if (minC &gt;= 1) {\n        return parseInt(minC) + &quot;分钟前&quot;;\n    }\n    return &#39;刚刚&#39;;\n};\n</code></pre>\n"},{"fileName":"暂存.md","content":"<pre><code>/** * Created by wanghonghao on 2022/09/29 */\nimport Vue from &#39;vue&#39;\n\nlet tdAttrs = { style: { border: &#39;1px solid #000&#39;, padding: &#39;5px 30px&#39;, &#39;text-align&#39;: &#39;center&#39;, &#39;font-weight&#39;: &#39;normal&#39; }}\nlet tableAttrs = { style: { &#39;border-collapse&#39;: &#39;collapse&#39;, margin: &#39;0 auto&#39; }}\n\nfunction render(examList) {\n  let table = Vue.component(&#39;subject-table&#39;, {\n    render: function (h) {\n      return h(&#39;table&#39;, tableAttrs, [\n        h(&#39;thead&#39;, tableAttrs, [h(&#39;tr&#39;, {}, [h(&#39;th&#39;, tdAttrs, &#39;日期&#39;), h(&#39;th&#39;, tdAttrs, &#39;时间&#39;), h(&#39;th&#39;, tdAttrs, &#39;科目&#39;)])]),\n        h(\n          &#39;tbody&#39;,\n          {},\n          examList.map(item =&gt; h(&#39;tr&#39;, {}, [h(&#39;td&#39;, tdAttrs, item.date), h(&#39;td&#39;, tdAttrs, item.time), h(&#39;td&#39;, tdAttrs, item.subject)]))\n        )\n      ])\n    }\n  })\n  let instance = Vue.extend(table)\n  // 插入子元素进行挂载 避免直接挂载到占位符所包含的&lt;td&gt;\n  let div = document.createElement(&#39;div&#39;)\n  div.setAttribute(&#39;id&#39;, &#39;table-div&#39;)\n  let td = document.querySelector(&#39;#subject-table&#39;)\n  td.innerText = &#39;&#39;\n  td.appendChild(div)\n  new instance().$mount(&#39;#table-div&#39;)\n}\n\nfunction append(examList) {\n  // 获取#subject 、#date、#time所在td\n  let el = document.querySelector(&#39;#subject&#39;) ?? document.querySelector(&#39;#date&#39;) ?? document.querySelector(&#39;#time&#39;)\n  if (el === null) {\n    return false\n  }\n  // 获取td节点数组 用于插入排序\n  let order = el.parentElement.childNodes\n  examList.forEach((item, index) =&gt; {\n    // 拼接html字符串\n    let str = &#39;&#39;\n    order.forEach((_item, _index) =&gt; {\n      str += &#39;&lt;td&gt;&#39; + item[_item.id] + &#39;&lt;/td&gt;&#39;\n    })\n    // html字符串生成dom\n    const parser = new DOMParser()\n    // 向table标签中插入节点表格元素（tr、td）时必须使用&lt;table&gt;&lt;/table&gt;标签包裹，否则parseFromString方法会将tr和td标签自动删除\n    let node = parser.parseFromString(&#39;&lt;table&gt;&lt;tr&gt;&#39; + str + &#39;&lt;/tr&gt;&lt;/table&gt;&#39;, &#39;text/html&#39;)\n    // parseFromString转换的是document对象，无法append()直接进行插入，获取内部节点后再插入\n    el.parentElement.after(node.getElementsByTagName(&#39;tr&#39;)[0])\n  })\n  // 删除占位符所在行\n  el.parentElement.replaceWith(&#39;&#39;)\n}\n\nfunction renderTable(examList) {\n  let el = document.querySelector(&#39;#subject-table&#39;)\n  if (el === null) {\n    append(examList)\n  } else {\n    render(examList)\n  }\n}\n\nexport default renderTable\n</code></pre>\n"},{"fileName":"替代eval().md","content":"<p>方法1:\n//计算表达式的值</p>\n<pre><code>function evil(fn) {\n    var Fn = Function;  //一个变量指向Function，防止有些前端编译工具报错\n    return new Fn(&#39;return &#39; + fn)();\n}\n</code></pre>\n<p>方法2</p>\n<pre><code>function eval1 (str) {\n    var script = document.createElement(&#39;script&#39;);\n    script.type=&quot;text/javascript&quot;;\n    script.text=str;\n    document.getElementsByTagName(&#39;head&#39;)[0].appendChild(script);\n    document.head.removeChild(document.head.lastChild);\n}\n</code></pre>\n<p>小程序替代eval使用eval5\n<code>https://gitee.com/bplok20010/eval5</code></p>\n<pre><code>import { Interpreter } from &#39;eval5&#39;\nconst interpreter = new Interpreter(window, {})\ninterpreter.evaluate(str)\n</code></pre>\n"},{"fileName":"校验合法的身份证姓名.md","content":"<h3>先看要求</h3>\n<p>（1）允许仅可以为汉字、字母以及汉字与符号的组合、字母与符号的组合，符号仅无许下列符号“•”或“<em>” 或“-”或空格(“</em>〞或“-&quot; 或空格仅允许半角模式）。\n（2）“•”或“_”或“-&quot;只能出现在两个汉字或两个字母之间，两个汉字或两个字母之间只允许有1个符号。\n（3） 汉字之间不允许有空格、字母中间只允许有1个空格、汉字与符号之间、字母与符号之间不允许有空格。\n（4）必须大于等于3个字符，小于等于 50个字符（宇母、数字、符号相当于1个字符,1个汉字相当于2字符)。</p>\n<h3>逐条解析名字校验的正则</h3>\n<pre><code> [\\u4e00-\\u9fa5]                                                                           汉字\n /^ [\\u4e00 - \\u9fa5] | [a-zA-Z]$/                                                   输入汉字、字母\n /^ (? ![·\\-_\\s])(?!.* [·\\-_\\s]$) /                                                       4个特殊符号“•”或“_” 或“-”或空格 不可以出现在开头和结尾\n /^[·\\-\\s\\w\\u4e00-\\u9fa5]*$/                                                        汉字与符号的组合\n !/[0-9]/                                                                                        不可以出现数字\n !/[\\u4e00-\\u9fa5][a-zA-Z]{1}|[a-zA-Z][\\u4e00-\\u9fa5]{1}/                汉字和字母不可以组合，即没有汉字与字母的组合\n !/[·_\\-\\s]{2}/                                                                                 符号“•”或“_”或“-”不允许挨着\n !/[\\u4e00-\\u9fa5]\\s[\\u4e00-\\u9fa5a]/                                            汉字之间不允许有空格\n !/[a-z]\\s{2,}[a-z]/                                                                          字母之间只允许有1个空格\n</code></pre>\n<h3>正则</h3>\n<pre><code>^[a-zA-Z\\u4E00-\\u9FA5]+(([a-zA-Z]+\\s[a-zA-Z]+)|([\\u4E00-\\u9FA5]+([•_-]{1}[\\u4E00-\\u9FA5]+)*))*$\n</code></pre>\n"},{"fileName":"检查属性是否存在对象中.md","content":"<h3>检查属性是否存在对象中</h3>\n<blockquote>\n<p>可以使用 in 关键字检查对象中是否存在某个属性：</p>\n</blockquote>\n<pre><code>const person = { name: &quot;dby&quot;, salary: 1000 };\nconsole.log(&#39;salary&#39; in person); // true\nconsole.log(&#39;age&#39; in person); // false\n</code></pre>\n<blockquote>\n<p>但是 in 关键字其实并不安全，会把原型上的属性也包括进去，例如：</p>\n</blockquote>\n<pre><code>&quot;hasOwnProperty&quot; in {}; // true\n&quot;toString&quot; in {}; // true\n</code></pre>\n<blockquote>\n<p>所以推荐使用下面的方法进行判断：</p>\n</blockquote>\n<pre><code>Object.prototype.hasOwnProperty.call(person, &quot;salary&quot;); // true\n</code></pre>\n<blockquote>\n<p>不过上面这样的问题就是太长了，每次使用都要这样写很麻烦。ECMA 有一个新的提案 Object.hasOwn() ，相当于 Object.prototype.hasOwnProperty.call() 的别名：</p>\n</blockquote>\n<pre><code>Object.hasOwn(person, &quot;salary&quot;); // true\n</code></pre>\n"},{"fileName":"浏览器多标签页共享sessionStorage.md","content":"<h3>业务背景</h3>\n<p>需求系统同时只能有一位用户登录，此时系统使用的sessionStorage在多开标签页时无法共享，用户重新开一个标签页，就可以再次登录，其次标签页关闭时会话到期 不能保留用户信息</p>\n<h3>利用localStorage事件来跨标签页共享sessionStorage</h3>\n<pre><code> &lt;script&gt;\n      // session实现多标签页共享\n      ;(function () {\n        // 判断当前sessionStorage中是否存在数据\n        if (!sessionStorage.length) {\n          // 随便存储一个数据触发storage监听\n          localStorage.setItem(&#39;getSessionStorageData&#39;, Date.now())\n        }\n        window.addEventListener(&#39;storage&#39;, function (event) {\n          if (event.key == &#39;getSessionStorageData&#39;) {\n            // 通过localStorage暂时共享数据\n            localStorage.setItem(&#39;sessionStorageData&#39;, JSON.stringify(window.sessionStorage))\n            localStorage.removeItem(&#39;sessionStorageData&#39;)\n          }\n          if (event.key == &#39;sessionStorageData&#39; &amp;&amp; !sessionStorage.length) {\n            const data = JSON.parse(event.newValue)\n            for (key in data) {\n              window.sessionStorage.setItem(key, data[key])\n            }\n          }\n          if (event.key == &#39;clearSessionStorageData&#39;) {\n            sessionStorage.clear()\n            location.reload()\n          }\n          if (event.key == &#39;loginSessionStorageData&#39;) {\n            const data = JSON.parse(event.newValue)\n            for (key in data) {\n              window.sessionStorage.setItem(key, data[key])\n            }\n            location.reload()\n          }\n        })\n      })()\n    &lt;/script&gt;\n</code></pre>\n<pre><code>const syncStorage = {}\n// 在系统退出的时候调用\nsyncStorage.clear = function () {\n  localStorage.setItem(&#39;clearSessionStorageData&#39;, Date.now())\n}\n// 在系统登录的时候调用\nsyncStorage.login = function () {\n  localStorage.setItem(&#39;loginSessionStorageData&#39;, JSON.stringify(window.sessionStorage))\n  localStorage.removeItem(&#39;loginSessionStorageData&#39;)\n}\nexport default syncStorage\n</code></pre>\n<p><a href=\"https://blog.51cto.com/u_11103019/3773726\">参考链接🔗</a></p>\n"},{"fileName":"深度解构、解构时使用别名.md","content":"<h3>深度解构</h3>\n<blockquote>\n<p>大部分时候我们只会解构一层，但实际上解构赋值是可以深度解构的：</p>\n</blockquote>\n<pre><code>let obj = {\n  name: &quot;dby&quot;,\n  a: {\n    b: 1\n  }\n}\nconst { a: { b } } = obj;\nconsole.log(b); // 1\n</code></pre>\n<h3>解构时使用别名</h3>\n<blockquote>\n<p>解构时使用别名</p>\n</blockquote>\n<pre><code>const obj = {\n  // 这个键名太长了，我们希望把它换掉\n  aaa_bbb_ccc: {\n    name: &quot;dby&quot;,\n    age: 12,\n    sex: true\n  }\n}\nconst { aaa_bbb_ccc: user } = obj;\nconsole.log(user); // { name: &quot;dby&quot;, age: 12, sex: true }\n</code></pre>\n"},{"fileName":"生产环境清除console.log.md","content":"<h2><strong>基本操作</strong></h2>\n<h3><strong>Webpack配置</strong></h3>\n<h3><strong>uglifyjs-webpack-plugin</strong></h3>\n<p><img src=\"https://pic4.zhimg.com/v2-ef5c530f01dfaf7fe7f5cf343bfe041b_b.jpg\" alt=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ef5c530f01dfaf7fe7f5cf343bfe041b_r.jpg\" alt=\"\"></p>\n<p>我们可以看一下该插件介绍，该插件是用于减少我们代码<code>js</code>代码体积。并且如果安装运行该插件的话，<code>node</code>版本是在<code>v6.9.0+</code>和<code>Webpack</code>版本<code>v4.0.0+</code>。</p>\n<p>官网地址看这里：<strong><a href=\"https://www.npmjs.com/package/uglifyjs-webpack-plugin\">uglifyjs-webpack-plugin</a></strong></p>\n<p><strong>安装</strong></p>\n<pre><code class=\"language-text\">npm i uglifyjs-webpack-plugin\n</code></pre>\n<p><strong>使用</strong></p>\n<p>在<code>webpack.config.js</code>文件下进行如下配置。</p>\n<pre><code class=\"language-text\">const UglifyJsPlugin = require(&#39;uglifyjs-webpack-plugin&#39;)\nmodule.exports = {\n // 省略...\n    mode: &quot;production&quot;,\n    optimization: {\n        minimizer: [\n          new UglifyJsPlugin({\n            uglifyOptions: {\n              // 删除注释\n              output:{\n                comments: false\n              },\n              compress: {\n                drop_console: true, // 删除所有调式带有console的\n                drop_debugger: true,\n                pure_funcs: [&#39;console.log&#39;] // 删除console.log\n              }\n            }\n          })\n        ]\n      } \n}\n</code></pre>\n<p>配置完上面代码，重启即可看到效果。<strong>注意：代码只会在production（生产环境）环境下有效</strong>，看上面我们的配置<code>mode: production</code>，就是生产环境。来讲解一下上面这俩个属性<code>drop_console</code>和<code>pure_funcs</code>的区别，前者则是删除所有带console的前缀的调试方法，如：<code>console.log</code>、<code>console.table</code>、<code>console.dir</code>只要带有<code>console</code>前缀则全部删除。而后者则是配置，就是数组的值是什么它才会删除什么，比如<code>pure_funcs：[console.log, console.dir]</code>那么只会删除这两项，则不会删除代码中的<code>console.table</code>代码。</p>\n<blockquote>\n<p>以上代码放到生产环境下，console调试代码即可清除，但是还有一个问题需要注意，就是该插件只支持<code>ES5</code>语法，如果你的代码中涉及到<code>ES6</code>语法则会报错。  </p>\n</blockquote>\n<h3><strong>terser-webpack-plugin</strong></h3>\n<p><img src=\"https://pic2.zhimg.com/v2-16c5227384bfe12d6e4edc523c5a1f65_b.jpg\" alt=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-16c5227384bfe12d6e4edc523c5a1f65_r.jpg\" alt=\"\"></p>\n<p>该插件跟上面<code>uglifyjs-webpack-plugin</code>一样，都是用于减少我们代码<code>js</code>代码体积。</p>\n<p>看上面描述：如果你的<code>Webpack</code>版本大于5+，则不需要安装此<code>terser-webpack-plugin</code>插件，会自带<code>terser-webpack-plugin</code>。但你的<code>Webpack</code>版本还是4，则你需要安装<code>terser-webpack-plugin</code>4的版本</p>\n<p><strong>安装</strong></p>\n<pre><code class=\"language-text\">npm i terser-webpack-plugin@4\n</code></pre>\n<p><strong>使用</strong></p>\n<pre><code class=\"language-text\">const TerserWebpackPlugin = require(&quot;terser-webpack-plugin&quot;);\n\nmodule.exports = {\n    // 省略...\n    mode: &quot;production&quot;,\n    optimization: {\n     minimizer: [\n           new TerserWebpackPlugin({\n                terserOptions: {\n                  compress: {\n                    warnings: true,\n                    drop_console: true,\n                    drop_debugger: true,\n                    pure_funcs: [&#39;console.log&#39;, &quot;console.table&quot;] // 删除console\n                  }\n                }\n            });\n        ]\n    }\n}\n</code></pre>\n<p>该插件功能与上面一样，属性用法也一样，唯一该插件可支持<code>ES6</code>语法。都是在<strong>生产环境</strong>代码生效。</p>\n<h3><strong>Vue-cli配置</strong></h3>\n<p>这是在<code>Vue-cli</code>项目中推荐使用的清除console插件。更多介绍看这里 <strong><a href=\"https://www.npmjs.com/package/babel-plugin-transform-remove-console\">babel-plugin-transform-remove-console</a></strong></p>\n<p><strong>安装</strong></p>\n<pre><code class=\"language-text\">npm i babel-plugin-transform-remove-console --save-dev\n</code></pre>\n<p><strong>使用</strong></p>\n<p>在项目根目录<code>babel.config.js</code>文件下配置。该插件不区分<strong>生产环境</strong>或者<strong>开发环境</strong>，只要你配置都能生效。</p>\n<pre><code class=\"language-text\">module.exports = {\n plugins: [\n  &quot;transform-remove-console&quot;\n ]\n}\n\n// 生产环境如下配置\n\nconst prodPlugins = []\nif (process.env.NODE_ENV === &#39;production&#39;) {\n prodPlugins.push(&#39;transform-remove-console&#39;)\n}\nmodule.exports = {\n plugins: [\n  ...prodPlugins\n ]\n}\n</code></pre>\n<h3><strong>简单粗暴删除</strong></h3>\n<p>接下来这个可是一个骚操作，瞪大眼睛看好了，哈哈哈。直接重写<code>console.log</code>的方法。</p>\n<pre><code class=\"language-text\">console.log = function () {};\n</code></pre>\n<h3><strong>灵活运用VScode编辑器</strong></h3>\n<p><img src=\"https://pic4.zhimg.com/v2-9978c12eb32d6dd4d59357e8c250f38b_b.jpg\" alt=\"\"></p>\n<p>![](<a href=\"https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8\">https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8</a>,<svg xmlns='http://www.w3.org/2000/svg' width='327' height='208'></svg>)</p>\n<p><strong>使用</strong></p>\n<p>直接全局搜索本项目里<code>console.log</code>正则匹配，然后全部替换为空即可。</p>\n<pre><code class=\"language-text\">console\\.log\\(.*?\\)\n</code></pre>\n<h3><strong>手写Loader删除console</strong></h3>\n<p>我们来写一个简易版的清除console插件。</p>\n<p>新建一个<code>js</code>文件，我这里名为<code>clearConsole.js</code>，其实这里也是用正则去匹配然后替换为空。如果不懂<code>loader</code>则可看我这篇文章**<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5MTU3MDA1MA==&mid=2247486478&idx=1&sn=12c6832c1e5d6866fedd6b11d03fc6ad&chksm=cfca1ee3f8bd97f54c76ad8a03d2d2a78bedb14a2ba5dfc28cfc22a002b82a236cc67411f893&token=1266031560&lang=zh_CN#rd\">手写一个Sass-loader</a>**。</p>\n<p><strong>clearConsole.js</strong></p>\n<pre><code class=\"language-text\">const reg = /(console.log\\()(.*)(\\))/g;\nmodule.exports = function(source) {\n    source = source.replace(reg, &quot;&quot;)\n    return source;\n}\n</code></pre>\n<p>在<code>Vue.config.js</code>配置</p>\n<pre><code class=\"language-text\">module.exports = {\n    // 省略...\n    configureWebpack: {\n        module: {\n            rules: [\n                {\n                    test: /\\.vue$/,\n                    exclude: /node_modules/,\n                    loader: path.resolve(__dirname, &quot;./clearConsole.js&quot;)\n                },\n                {\n                    test: /\\.js$/,\n                    exclude: /node_modules/,\n                    loader: path.resolve(__dirname, &quot;./clearConsole.js&quot;)\n                }\n            ],\n        }\n    },\n}\n</code></pre>\n"},{"fileName":"生成器函数.md","content":"<p>生成器函数</p>\n<p>生成器函数是一个带星号函数，而且是可以暂停执行和恢复执行的。我们可以看下面这段代码：</p>\n<pre><code>function* genDemo() {\n    console.log(&quot; 开始执行第一段 &quot;)\n    yield &#39;generator 2&#39;\n \n    console.log(&quot; 开始执行第二段 &quot;)\n    yield &#39;generator 2&#39;\n \n    console.log(&quot; 开始执行第三段 &quot;)\n    yield &#39;generator 2&#39;\n \n    console.log(&quot; 执行结束 &quot;)\n    return &#39;generator 2&#39;\n}\n \nconsole.log(&#39;main 0&#39;)\nlet gen = genDemo()\nconsole.log(gen.next().value)\nconsole.log(&#39;main 1&#39;)\nconsole.log(gen.next().value)\nconsole.log(&#39;main 2&#39;)\nconsole.log(gen.next().value)\nconsole.log(&#39;main 3&#39;)\nconsole.log(gen.next().value)\nconsole.log(&#39;main 4&#39;)\n</code></pre>\n<p>执行上面这段代码，观察输出结果，你会发现函数 genDemo 并不是一次执行完的，全局代码和 genDemo 函数交替执行。其实这就是生成器函数的特性，可以暂停执行，也可以恢复执行。下面我们就来看看生成器函数的具体使用方式：</p>\n<p>在生成器函数内部执行一段代码，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。\n外部函数可以通过 next 方法恢复函数的执行</p>\n"},{"fileName":"电梯导航.md","content":"<h3>电梯导航</h3>\n<p>效果图：\n<img src=\"https://img2020.cnblogs.com/blog/2483371/202112/2483371-20211227155237420-183049834.png\" alt=\"\"></p>\n<p>点击导航可以跳转到对应楼层，鼠标滚轮联动</p>\n<pre><code class=\"language-js\">&lt;template&gt;\n  &lt;div class=&quot;outBox&quot;&gt;\n    &lt;div class=&quot;container&quot; @scroll=&quot;handleScroll&quot; ref=&quot;viewBox&quot;&gt;\n      &lt;div class=&quot;zhjd-container-nav&quot;&gt;\n        &lt;el-breadcrumb separator-class=&quot;el-icon-arrow-right&quot;&gt;\n          &lt;el-breadcrumb-item&gt;沥青拌合站&lt;/el-breadcrumb-item&gt;\n          &lt;el-breadcrumb-item&gt;统计报表&lt;/el-breadcrumb-item&gt;\n          &lt;el-breadcrumb-item&gt;生产配比数据分析&lt;/el-breadcrumb-item&gt;\n        &lt;/el-breadcrumb&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;report&quot; v-loading=&quot;loading&quot;&gt;\n        &lt;div class=&quot;title&quot;&gt;沥青混合料生产数据图表统计&lt;/div&gt;\n        &lt;el-row class=&quot;elevator&quot; ref=&quot;buttonGroup&quot;&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.a ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.a ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.a&quot; @click=&quot;handleClick(&#39;a&#39;)&quot;&gt;产量统计&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.b ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.b ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.b&quot; @click=&quot;handleClick(&#39;b&#39;)&quot;&gt;产量统计报表&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.c ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.c ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.c&quot; @click=&quot;handleClick(&#39;c&#39;)&quot;&gt;生产质量报表&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.d ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.d ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.d&quot; @click=&quot;handleClick(&#39;d&#39;)&quot;&gt;油石比分布&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.e ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.e ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.e&quot; @click=&quot;handleClick(&#39;e&#39;)&quot;&gt;油石比波动&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.f ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.f ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.f&quot; @click=&quot;handleClick(&#39;f&#39;)&quot;&gt;油石比分析&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.g ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.g ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.g&quot; @click=&quot;handleClick(&#39;g&#39;)&quot;&gt;温度分布&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.h ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.h ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.h&quot; @click=&quot;handleClick(&#39;h&#39;)&quot;&gt;温度波动&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.i ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.i ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.i&quot; @click=&quot;handleClick(&#39;i&#39;)&quot;&gt;温度分析&lt;/el-button&gt;\n          &lt;el-button :style=&quot;{&#39;background&#39;: btn.j ? &#39;#fff&#39;:&#39;#245DC6&#39;,&#39;color&#39;:btn.j ? &#39;#245DC6&#39;:&#39;#fff&#39;,&#39;borderColor&#39;: &#39;#245DC6&#39;}&quot; class=&quot;buttonGroup&quot; size=&quot;mini&quot; :plain=&quot;btn.j&quot; @click=&quot;handleClick(&#39;j&#39;)&quot;&gt;热料仓配比波动&lt;/el-button&gt;\n        &lt;/el-row&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;&#39;,\n  components: {\n  },\n  data () {\n    return {\n      btn: {\n        a: false,\n        b: true,\n        c: true,\n        d: true,\n        e: true,\n        f: true,\n        g: true,\n        h: true,\n        i: true,\n        j: true,\n      },\n      box: null,\n    }\n  },\n  mounted () {\n    this.zoom = 1 / this.$store.state.d2admin.zoomGlobal.zoom\n    window.addEventListener(&quot;resize&quot;, () =&gt; {\n      this.zoom = 1 / this.$store.state.d2admin.zoomGlobal.zoom\n    })\n    this.init()\n  },\n  methods: {\n    init () {\n      this.onSearch()\n    },\n    // 侧边栏点击修改stationId\n    stationClick (index) {\n      this.searchForm = {\n        reportType: &#39;year&#39;,\n        month: this.$moment().format(&#39;YYYY-MM&#39;),\n        year: this.$moment().format(&#39;YYYY&#39;),\n        weekday: this.$moment().format(&#39;YYYY-MM-DD&#39;)\n      }\n      this.stationIndex = index\n      this.searchForm.stationId = this.sliderList[index].station.id\n      this.onSearch()\n    },\n    // 按钮点击事件\n    btnClick (current) {\n      let that = this\n      that.btn = {\n        a: true,\n        b: true,\n        c: true,\n        d: true,\n        e: true,\n        f: true,\n        g: true,\n        h: true,\n        i: true,\n        j: true,\n      }\n      that.btn[current] = false\n\n    },\n    // 滚动事件处理函数\n    handleScroll () {\n      // 滚动的距离\n      let scrollTop = this.$refs.viewBox.scrollTop\n      // 获取所有楼层的伪数组\n      const floor = document.querySelectorAll(&#39;.floor&#39;)\n      floor.forEach((item, index) =&gt; {\n        if (scrollTop &gt;= (item.offsetTop - 470)) {\n          let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;]\n          this.btnClick(arr[index])\n        }\n      })\n    },\n    // 滚动到指定位置\n    handleClick (current) {\n      let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;]\n      let index = arr.indexOf(current)\n      const floor = document.querySelectorAll(&#39;.floor&#39;)\n      const offsetTop = floor[index].offsetTop\n      this.$refs.viewBox.scrollTo({\n        top: offsetTop - 450,\n        behavior: &#39;smooth&#39;\n      })\n    },\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.elevator {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: sticky;\n  top: 0px;\n  left: 0;\n  background-color: #f5fafe;\n  z-index: 999;\n  height: 56px;\n}\n.buttonGroup {\n  margin: 0 16px;\n  font-size: 14px;\n  height: 30px;\n}\n&lt;/style&gt;\n\n</code></pre>\n"},{"fileName":"监听Vuex中的数据变化.md","content":"<p><code>方法1</code></p>\n<h3>将state数据映射到组件的computed,然后监听映射的计算属性即可</h3>\n<pre><code>// vuex中的state数据\n  state: {\n    count: 0\n  },\n     \n//  A组件中映射 state数据到计算属性\n  computed: {\n   //  this.$store.state.count\n  // mapState       把全局  count 变成 可以直接使用的 数据\n    ...mapState([&#39;count&#39;])\n  }\n// A组件监听 count计算属性的变化\n   watch: {\n     // watch 可以监听 data 数据 也可以监听 全局 vuex数据\n    count () {\n      // 用本身的数据进行一下计数\n      this.changeCount++\n    }\n  }\n</code></pre>\n<p><code>方法2</code></p>\n<h3>vuex中store对象本身提供了watch函数</h3>\n<p>watch(fn: Function, callback: Function, options?: Object): Function\n响应式地侦听 fn 的返回值，当值改变时调用回调函数。fn 接收 store 的 state 作为第一个参数，其 getter 作为第二个参数。最后接收一个可选的对象参数表示 Vue 的 vm.$watch 方法的参数。</p>\n<pre><code>  created () {\n    this.$store.watch((state, getters) =&gt; {\n      return state.count\n    }, () =&gt; {\n      this.changeCount++\n    })\n  }\n</code></pre>\n<p><code>方法3</code></p>\n<h3>直接对Vuex对象进行watch监听</h3>\n<pre><code>export default{\n    component:{},\n    data(){\n        return{}\n    },\n    watch:{\n        &#39;$store.state.data.age&#39;(newVal,oldVal){\n            //对数据执行操作\n            console.log(newVal,oldVal)\n        }\n    },\n    methods:{}\n}\n</code></pre>\n"},{"fileName":"移动端适配（px转vw）（postcss-px-to-viewport配置）.md","content":"<p>安装postcss-px-to-viewport</p>\n<pre><code>npm install postcss-px-to-viewport\n</code></pre>\n<p>根目录新建postcss.config.js文件</p>\n<pre><code>//postcss.config.js文件\nmodule.exports = {\n  plugins: {\n    &#39;postcss-px-to-viewport&#39;: {\n      unitToConvert: &#39;px&#39;, //需要转换的单位，默认为&quot;px&quot;\n      viewportWidth: 375, // 视窗的宽度，对应的是我们设计稿的宽度\n      viewportHeight: 1334,//视窗的高度，根据375设备的宽度来指定，一般指定667，也可以不配置\n      unitPrecision: 13, // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）\n      propList: [&#39;*&#39;], // 能转化为vw的属性列表\n      viewportUnit: &#39;vw&#39;, // 指定需要转换成的视窗单位，建议使用vw\n      fontViewportUnit: &#39;vw&#39;, //字体使用的视口单位\n      selectorBlackList: [&#39;.ignore-&#39;, &#39;.hairlines&#39;], //指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名\n      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值\n      mediaQuery: false, // 允许在媒体查询中转换`px`\n      replace: true, //是否直接更换属性值，而不添加备用属性\n      exclude: [\n        /RightBar/,\n        /gotop.vue/,\n      ], //忽略某些文件夹下的文件或特定文件，例如 &#39;node_modules&#39; 下的文件\n      landscape: false, //是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)\n      landscapeUnit: &#39;vw&#39;, //横屏时使用的单位\n      landscapeWidth: 1134 //横屏时使用的视口宽度\n    }\n  }\n}\n\n</code></pre>\n"},{"fileName":"结合折叠面板的动态表单.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202205/2483371-20220511111307100-1565044151.png\" alt=\"\"></p>\n<p><code>index</code></p>\n<pre><code>&lt;!-- 报名信息填报 --&gt;\n&lt;template&gt;\n  &lt;div v-loading=&quot;loading&quot; class=&quot;container-box&quot;&gt;\n    &lt;dynamic-form ref=&quot;dynamicForm&quot; v-model=&quot;form&quot; :form-config=&quot;formConfig&quot; /&gt;\n    &lt;el-row type=&quot;flex&quot; justify=&quot;center&quot;&gt;\n      &lt;button class=&quot;submitButton btn&quot; @click=&quot;submit()&quot;&gt;\n        &lt;svg-icon icon-class=&quot;submit&quot; /&gt;提交\n      &lt;/button&gt;\n      &lt;button class=&quot;revertButton btn&quot; @click=&quot;revert()&quot;&gt;\n        &lt;svg-icon icon-class=&quot;revert&quot; /&gt;返回\n      &lt;/button&gt;\n    &lt;/el-row&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { getUserInfo } from &#39;@/utils/auth&#39;\nimport dynamicForm from &#39;./dynamic-form.vue&#39;\nimport SvgIcon from &#39;@/components/SvgIcon&#39;\nimport * as api from &#39;@/api/informationFill.js&#39;\nimport {\n  scCard,\n  isPhoneNumber,\n  isTelNumber,\n  isEmail,\n  GetAge,\n  getSexAndbirthday\n} from &#39;@/utils/validate&#39;\nexport default {\n  name: &#39;InformationFill&#39;,\n  components: {\n    dynamicForm,\n    SvgIcon\n  },\n  props: {},\n  data() {\n    return {\n      loading: true,\n      // 绑定表单对象\n      form: {\n        // name: &#39;&#39;,//姓名\n        // paperWorkType: &#39;&#39;,//证件类型\n        // idCard: &#39;&#39;,//证件号码\n        // sex: &#39;&#39;,//性别\n        // birthDay: &#39;&#39;,//出生日期\n        // age: &#39;&#39;,//年龄\n        // resume: &#39;&#39;,\n        // applyLevel: &#39;&#39;,//报考级别\n        // applyQualifications: &#39;&#39;,//报考资格\n        // applySubject: &#39;&#39;,//报考科目\n        // jobTitle: &#39;&#39;,//现有职称（资格）\n        // jobTitleTime: &#39;&#39;,//取得职称（资格）时间\n        // onWork: &#39;&#39;,//在职情况\n        // workUnit: &#39;&#39;,//工作单位\n        // onWorkTime: &#39;&#39;,//参加工作时间\n        // majorWorkTime: &#39;&#39;,//本专业工作时间\n        // currentSchool: &#39;&#39;,//所在学校\n        // discipline: &#39;&#39;,//所学专业\n        // graduationTime: &#39;&#39;,//毕业时间\n        // disciplineName: &#39;&#39;,//专业名称\n        // education: &#39;&#39;,//在学/已有学历\n        // educationalType: &#39;&#39;,//学制\n        // educationalLevel: &#39;&#39;,//学位\n        // address: &#39;&#39;,//通讯地址\n        // email: &#39;&#39;,//邮箱\n        // phone: &#39;&#39;,//手机号\n        // fixedTelephone: &#39;&#39;,//固定电话\n        // zipCode: &#39;&#39;,//邮政编码\n      },\n      // options字典集合\n      optionSet: null,\n      // 动态表单配置对象 formItemList1、formItemList2、formItemList3为配置项实例\n      formConfig: {\n        inline: true,\n        labelPosition: &#39;right&#39;,\n        labelWidth: &#39;250px&#39;,\n        size: &#39;small&#39;,\n        statusIcon: true,\n        formItemList1: [\n          // {\n          //   &quot;type&quot;: &quot;input&quot;,\n          //   &quot;label&quot;: &quot;姓名：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;placeholder&quot;: &quot;请输入姓名&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请输入姓名&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;name&quot;,\n          //   &quot;subtype&quot;: &quot;text&quot;\n          // },\n          // {\n          //   &quot;type&quot;: &quot;select&quot;,\n          //   &quot;label&quot;: &quot;证件类型：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;clearable&quot;: true,\n          //   &quot;placeholder&quot;: &quot;请选择证件类型&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请选择证件类型&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;paperWorkType&quot;,\n          //   &quot;options&quot;: [\n          //     {\n          //       &quot;value&quot;: &quot;1&quot;,\n          //       &quot;label&quot;: &quot;居民身份证/社保卡&quot;,\n          //     },\n          //   ]\n          // },\n          // {\n          //   &quot;type&quot;: &quot;input&quot;,\n          //   &quot;label&quot;: &quot;身份证号：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;placeholder&quot;: &quot;请输入身份证号&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请输入身份证号&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;idCard&quot;,\n          //   &quot;subtype&quot;: &quot;text&quot;\n          // },\n          // {\n          //   &quot;type&quot;: &quot;select&quot;,\n          //   &quot;label&quot;: &quot;性别：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;clearable&quot;: true,\n          //   &quot;placeholder&quot;: &quot;请选择性别&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请选择性别&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;sex&quot;,\n          //   &quot;options&quot;: [\n          //     {\n          //       &quot;value&quot;: &quot;0&quot;,\n          //       &quot;label&quot;: &quot;女&quot;,\n          //     },\n          //     {\n          //       &quot;value&quot;: &quot;1&quot;,\n          //       &quot;label&quot;: &quot;男&quot;,\n          //     },\n          //   ]\n          // },\n          // {\n          //   &quot;type&quot;: &quot;date&quot;,\n          //   &quot;label&quot;: &quot;出生日期：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;valueFormat&quot;: &quot;yyyy-mm-dd&quot;,\n          //   &quot;placeholder&quot;: &quot;请选择出生日期&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请选择出生日期&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;birthDay&quot;,\n          //   &quot;pickerOptions&quot;: {\n          //     disabledDate (time) {\n          //       // 设置禁用状态，参数为当前日期，要求返回 Boolean\n          //       return time.getTime() &gt; Date.now()\n          //     }\n          //   },\n          // },\n          // {\n          //   &quot;type&quot;: &quot;input&quot;,\n          //   &quot;label&quot;: &quot;年龄：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;placeholder&quot;: &quot;请输入年龄&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请输入年龄&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;age&quot;,\n          //   &quot;subtype&quot;: &quot;text&quot;\n          // },\n          // {\n          //   &quot;type&quot;: &quot;textarea&quot;,\n          //   &quot;label&quot;: &quot;个人简历：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;placeholder&quot;: &quot;请输入个人简历&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请输入个人简历&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;resume&quot;,\n          // },\n        ],\n        formItemList2: [\n          // {\n          //   &quot;type&quot;: &quot;select&quot;,\n          //   &quot;label&quot;: &quot;学历：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;clearable&quot;: true,\n          //   &quot;placeholder&quot;: &quot;请选择学历&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请选择学历&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;education&quot;,\n          //   &quot;options&quot;: [\n          //     {\n          //       &quot;value&quot;: &quot;1&quot;,\n          //       &quot;label&quot;: &quot;硕士研究生&quot;,\n          //     },\n          //   ]\n          // },\n          // {\n          //   &quot;type&quot;: &quot;select&quot;,\n          //   &quot;label&quot;: &quot;学位：&quot;,\n          //   &quot;value&quot;: &#39;&#39;,\n          //   &quot;disabled&quot;: false,\n          //   &quot;clearable&quot;: true,\n          //   &quot;placeholder&quot;: &quot;请选择学位&quot;,\n          //   &quot;rules&quot;: [{ required: true, message: &#39;请选择学位&#39;, trigger: &#39;blur&#39; }],\n          //   &quot;key&quot;: &quot;educationalLevel&quot;,\n          //   &quot;options&quot;: [\n          //     {\n          //       &quot;value&quot;: &quot;1&quot;,\n          //       &quot;label&quot;: &quot;硕士&quot;,\n          //     },\n          //   ]\n          // },\n        ],\n        formItemList3: []\n      },\n      fillFields: [],\n      // 静态校验\n      staticRules: {\n        sfzh: (rule, value, callback) =&gt; {\n          if (scCard(value)) {\n            callback()\n          } else {\n            callback(new Error(&#39;身份证号码格式错误！&#39;))\n          }\n        },\n        lxdh1: (rule, value, callback) =&gt; {\n          if (isPhoneNumber(value) || isTelNumber(value)) {\n            callback()\n          } else {\n            callback(new Error(&#39;联系电话格式错误！&#39;))\n          }\n        },\n        yx: (rule, value, callback) =&gt; {\n          if (isEmail(value)) {\n            callback()\n          } else {\n            callback(new Error(&#39;邮箱格式错误！&#39;))\n          }\n        }\n      },\n      // 分类\n      listArr: [&#39;formItemList1&#39;, &#39;formItemList2&#39;, &#39;formItemList3&#39;]\n    }\n  },\n  computed: {},\n  watch: {},\n  created() {\n    this.getTableLinkage()\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    async init() {\n      // 获取填报字段\n      await this.getField()\n      // 填充信息\n      this.autoFillhandler()\n      // 获取报考条件\n      // this.getBmCondition()\n    },\n    // 获取填报字段\n    async getField() {\n      const res = await api.getField()\n      console.log(res)\n      this.handlerFormConfig(res)\n      this.loading = false\n    },\n    // 获取报考条件\n    async getBmCondition() {\n      const res = await api.getBmCondition()\n      console.log(&#39;获取报考条件&#39;, res)\n    },\n    // 获取字段联动\n    async getTableLinkage() {\n      const res = await api.getTableLinkage()\n      res.forEach((item) =&gt; {\n        // 添加数据监听\n        this.$watch(&#39;form.&#39; + item.watchFieldName, function (newVal, oldVal) {\n          if (eval(item.fieldRule)) {\n            // 表达式成立执行关联动作\n            if (item.action == 1) {\n              // 隐藏\n              this.handlerLinkFormItem(item.linkageFieldName, &#39;show&#39;, false)\n            } else if (item.action == 3) {\n              // 禁用\n              this.handlerLinkFormItem(item.linkageFieldName, &#39;disabled&#39;, true)\n            }\n          } else {\n            // 不成立设置默认值\n            if (item.action == 1) {\n              // 展示\n              this.handlerLinkFormItem(item.linkageFieldName, &#39;show&#39;, true)\n            } else if (item.action == 3) {\n              // 启用\n              this.handlerLinkFormItem(\n                item.linkageFieldName,\n                &#39;disabled&#39;,\n                false\n              )\n            }\n          }\n        })\n      })\n    },\n    // 处理受关联的表单项\n    handlerLinkFormItem(key, field, value) {\n      // 在所有分类中查找有关项\n      for (let i = 0; i &lt; this.listArr.length; i++) {\n        const LinkFormItem = this.formConfig[this.listArr[i]].find(\n          (item) =&gt; item.key === key\n        )\n        if (LinkFormItem) {\n          LinkFormItem[field] = value\n          return\n        }\n      }\n    },\n    // 处理表单配置\n    handlerFormConfig(res) {\n      res.forEach((item, index) =&gt; {\n        // 设置响应式数据\n        this.$set(this.form, item.name, &#39;&#39;)\n        let obj = {}\n        if (item.categoryName === &#39;基本信息&#39;) {\n          if (item.fieldType === &#39;input&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;input&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              disabled: !item.firstModify,\n              placeholder: &#39;请填写&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请填写&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                },\n                {\n                  min: 0,\n                  max: item.fieldLength,\n                  message: `长度在 0 到 ${item.fieldLength} 个字符`,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name,\n              subtype: &#39;text&#39;\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList1.push(obj)\n          } else if (item.fieldType === &#39;select&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;select&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              disabled: !item.firstModify,\n              placeholder: &#39;请选择&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请选择&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name\n              // options: Object.values(this.optionSet[item.codeId])\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList1.push(obj)\n          } else if (item.fieldType == &#39;date&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;date&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              valueFormat: &#39;yyyy-mm-dd&#39;,\n              disabled: !item.firstModify,\n              placeholder: &#39;请选择&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请选择&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name,\n              pickerOptions: {\n                disabledDate(time) {\n                  // 设置禁用状态，参数为当前日期，要求返回 Boolean\n                  return time.getTime() &gt; Date.now()\n                }\n              }\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList1.push(obj)\n          }\n        } else if (item.categoryName === &#39;教育情况&#39;) {\n          if (item.fieldType === &#39;input&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;input&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              disabled: !item.firstModify,\n              placeholder: &#39;请填写&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请填写&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                },\n                {\n                  min: 0,\n                  max: item.fieldLength,\n                  message: `长度在 0 到 ${item.fieldLength} 个字符`,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name,\n              subtype: &#39;text&#39;\n            }\n            this.formConfig.formItemList2.push(obj)\n          } else if (item.fieldType === &#39;select&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;select&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              disabled: !item.firstModify,\n              placeholder: &#39;请选择&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请选择&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name\n              // options: Object.values(this.optionSet[item.codeId])\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList2.push(obj)\n          } else if (item.fieldType == &#39;date&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;date&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              valueFormat: &#39;yyyy-mm-dd&#39;,\n              disabled: !item.firstModify,\n              placeholder: &#39;请选择&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请选择&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name,\n              pickerOptions: {\n                disabledDate(time) {\n                  // 设置禁用状态，参数为当前日期，要求返回 Boolean\n                  return time.getTime() &gt; Date.now()\n                }\n              }\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList2.push(obj)\n          }\n        } else if (item.categoryName === &#39;其他信息&#39;) {\n          if (item.fieldType === &#39;input&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;input&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              disabled: !item.firstModify,\n              placeholder: &#39;请填写&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请填写&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                },\n                {\n                  min: 0,\n                  max: item.fieldLength,\n                  message: `长度在 0 到 ${item.fieldLength} 个字符`,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name,\n              subtype: &#39;text&#39;\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList3.push(obj)\n          } else if (item.fieldType === &#39;select&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;select&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              disabled: !item.firstModify,\n              placeholder: &#39;请选择&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请选择&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name\n              // options: Object.values(this.optionSet[item.codeId])\n            }\n            this.formConfig.formItemList3.push(obj)\n          } else if (item.fieldType == &#39;date&#39;) {\n            obj = {\n              show: item.hasShow,\n              type: &#39;date&#39;,\n              label: item.formLabel + &#39;：&#39;,\n              value: &#39;&#39;,\n              codeId: item.codeId,\n              valueFormat: &#39;yyyy-mm-dd&#39;,\n              disabled: !item.firstModify,\n              placeholder: &#39;请选择&#39; + item.formLabel,\n              rules: [\n                {\n                  required: item.required,\n                  message: &#39;请选择&#39; + item.formLabel,\n                  trigger: &#39;blur&#39;\n                }\n              ],\n              key: item.name,\n              pickerOptions: {\n                disabledDate(time) {\n                  // 设置禁用状态，参数为当前日期，要求返回 Boolean\n                  return time.getTime() &gt; Date.now()\n                }\n              }\n            }\n            if (item.formRules) {\n              obj.rules.push({\n                validator: this.staticRules[item.name],\n                trigger: &#39;blur&#39;\n              })\n            }\n            this.formConfig.formItemList3.push(obj)\n          }\n        }\n      })\n    },\n    // 填充信息\n    autoFillhandler() {\n      let info = getUserInfo()\n      // 需要填充的字段\n      let fillArr = [&#39;sfzh&#39;, &#39;lxdh1&#39;, &#39;xm&#39;, &#39;nl&#39;, &#39;csrq&#39;, &#39;xb&#39;]\n      // 对应的用户信息\n      let valueArr = [&#39;idCard&#39;, &#39;mobile&#39;, &#39;realName&#39;, &#39;age&#39;, &#39;birthday&#39;, &#39;sex&#39;]\n      if (info?.idCard) {\n        let obj = getSexAndbirthday(info.idCard)\n        obj.age = GetAge(info.idCard)\n        this.userInfo = Object.assign(info, obj)\n        console.log(this.userInfo)\n        // 在所有分类中查找有关项\n        for (let i = 0; i &lt; this.listArr.length; i++) {\n          fillArr.forEach((str, index) =&gt; {\n            let item = this.formConfig[this.listArr[i]].find(\n              (item) =&gt; item.key == str\n            )\n            if (item) {\n              // 默认值直接修改绑定的值\n              console.log(this.userInfo[valueArr[index]])\n              this.form[str] = this.userInfo[valueArr[index]] || &#39;&#39;\n              // 禁用修改配置项\n              if (item.key === &#39;xm&#39; || item.key === &#39;sfzh&#39;) {\n                item.disabled = true\n              }\n              // return\n            }\n          })\n        }\n      }\n    },\n    submit() {\n      this.$refs.dynamicForm.$refs.form.validate((valid) =&gt; {\n        if (valid) {\n          let res = api.sunbmitExamInformations(this.form)\n          console.log(res)\n          this.$message({\n            type: &#39;success&#39;,\n            message: &#39;提交成功!&#39;\n          })\n          console.log(this.form)\n        } else {\n          console.log(&#39;error submit!!&#39;)\n          return false\n        }\n      })\n    },\n    // 返回\n    revert() {\n      this.$emit(&#39;revert&#39;)\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n.btn {\n  margin-top: 15px;\n  width: 115px;\n  height: 50px;\n  border-radius: 10px;\n  font-size: 16px;\n  color: #fff;\n  border: 1px solid #4077f3;\n  vertical-align: middle;\n  cursor: pointer;\n}\n.submitButton {\n  background-color: #4077f3;\n  margin-right: 10px;\n}\n.revertButton {\n  color: #4077f3;\n  background-color: transparent;\n  margin-left: 10px;\n}\n.svg-icon {\n  margin-right: 5px;\n  width: 20px;\n  height: 20px;\n  vertical-align: sub;\n}\n&lt;/style&gt;\n</code></pre>\n<p><code>dynamic-form</code></p>\n<pre><code>&lt;!-- 动态表单组件 --&gt;\n&lt;template&gt;\n  &lt;div class=&quot;container-box&quot;&gt;\n    &lt;el-form ref=&quot;form&quot; :model=&quot;value&quot; class=&quot;form&quot; :inline=&quot;formConfig.inline&quot; :label-position=&quot;formConfig.labelPosition&quot; :label-width=&quot;formConfig.labelWidth&quot; :size=&quot;formConfig.size&quot;&gt;\n      &lt;el-collapse v-model=&quot;activeNames&quot;&gt;\n        &lt;el-collapse-item name=&quot;basicInformation&quot;&gt;\n          &lt;template slot=&quot;title&quot;&gt;\n            &lt;i class=&quot;dots&quot; /&gt;\n            &lt;label style=&quot;font-size:18px&quot;&gt;基本信息&lt;/label&gt;\n          &lt;/template&gt;\n          &lt;el-row :gutter=&quot;20&quot;&gt;\n            &lt;div v-for=&quot;item in formConfig.formItemList1&quot; :key=&quot;item.key&quot;&gt;\n              &lt;el-col v-if=&quot;item.type !==&#39;textarea&#39; &amp;&amp; item.show&quot; :span=&quot;12&quot;&gt;\n                &lt;dynamic-form-item v-if=&quot;value[item.key]!==undefined&quot; :item=&quot;item&quot; :value=&quot;value[item.key]&quot; @input=&quot;handleInput($event, item.key)&quot; /&gt;\n              &lt;/el-col&gt;\n              &lt;el-col v-else-if=&quot;item.show&quot; :span=&quot;24&quot;&gt;\n                &lt;dynamic-form-item v-if=&quot;value[item.key]!==undefined&quot; :item=&quot;item&quot; :value=&quot;value[item.key]&quot; @input=&quot;handleInput($event, item.key)&quot; /&gt;\n              &lt;/el-col&gt;\n            &lt;/div&gt;\n          &lt;/el-row&gt;\n        &lt;/el-collapse-item&gt;\n        &lt;el-collapse-item name=&quot;educationInformation&quot;&gt;\n          &lt;template slot=&quot;title&quot;&gt;\n            &lt;i class=&quot;dots&quot; /&gt;\n            &lt;label style=&quot;font-size:18px&quot;&gt;教育情况&lt;/label&gt;\n          &lt;/template&gt;\n          &lt;el-row :gutter=&quot;20&quot;&gt;\n            &lt;div v-for=&quot;item in formConfig.formItemList2&quot; :key=&quot;item.key&quot;&gt;\n              &lt;el-col v-if=&quot;item.type !==&#39;textarea&#39;&amp;&amp; item.show&quot; :span=&quot;12&quot;&gt;\n                &lt;dynamic-form-item v-if=&quot;value[item.key]!==undefined&quot; :item=&quot;item&quot; :value=&quot;value[item.key]&quot; @input=&quot;handleInput($event, item.key)&quot; /&gt;\n              &lt;/el-col&gt;\n              &lt;el-col v-else-if=&quot;item.show&quot; :span=&quot;24&quot;&gt;\n                &lt;dynamic-form-item v-if=&quot;value[item.key]!==undefined&quot; :item=&quot;item&quot; :value=&quot;value[item.key]&quot; @input=&quot;handleInput($event, item.key)&quot; /&gt;\n              &lt;/el-col&gt;\n            &lt;/div&gt;\n          &lt;/el-row&gt;\n        &lt;/el-collapse-item&gt;\n        &lt;el-collapse-item name=&quot;otherInformation&quot;&gt;\n          &lt;template slot=&quot;title&quot;&gt;\n            &lt;i class=&quot;dots&quot; /&gt;\n            &lt;label style=&quot;font-size:18px&quot;&gt;其他信息&lt;/label&gt;\n          &lt;/template&gt;\n          &lt;el-row :gutter=&quot;20&quot;&gt;\n            &lt;div v-for=&quot;item in formConfig.formItemList3&quot; :key=&quot;item.key&quot;&gt;\n              &lt;el-col v-if=&quot;item.type !==&#39;textarea&#39;&amp;&amp; item.show&quot; :span=&quot;12&quot;&gt;\n                &lt;dynamic-form-item v-if=&quot;value[item.key]!==undefined&quot; :item=&quot;item&quot; :value=&quot;value[item.key]&quot; @input=&quot;handleInput($event, item.key)&quot; /&gt;\n              &lt;/el-col&gt;\n              &lt;el-col v-else-if=&quot;item.show&quot; :span=&quot;24&quot;&gt;\n                &lt;dynamic-form-item v-if=&quot;value[item.key]!==undefined&quot; :item=&quot;item&quot; :value=&quot;value[item.key]&quot; @input=&quot;handleInput($event, item.key)&quot; /&gt;\n              &lt;/el-col&gt;\n            &lt;/div&gt;\n          &lt;/el-row&gt;\n        &lt;/el-collapse-item&gt;\n      &lt;/el-collapse&gt;\n    &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport dynamicFormItem from &#39;./dynamic-form-item&#39;\nexport default {\n  name: &#39;DynamicForm&#39;,\n  components: {\n    dynamicFormItem\n  },\n  props: {\n    formConfig: {\n      required: true,\n      type: Object\n    },\n    value: {\n      type: Object,\n      required: true\n    }\n  },\n  data () {\n    return {\n      activeNames: [&#39;basicInformation&#39;, &#39;educationInformation&#39;, &#39;otherInformation&#39;]\n    }\n  },\n  computed: {},\n  watch: {},\n  created () { },\n  mounted () {\n    this.setDefaultValue()\n  },\n  methods: {\n    handleInput (val, key) {\n      // 这里直接合并赋值\n      this.$emit(&#39;input&#39;, { ...this.value, [key]: val })\n    },\n    setDefaultValue () {\n      const formData = { ...this.value }\n      // 设置默认值 渲染之前，保证每个字段都有值\n      for (let i = 1; i &lt; 4; i++) {\n        const str = &#39;formItemList&#39; + i\n        this.formConfig[str].forEach(({ key, value }) =&gt; {\n          // if (formData[key] === undefined || formData[key] === null) {\n          formData[key] = value\n          // }\n        })\n      }\n      this.$emit(&#39;input&#39;, formData)\n    }\n\n  }\n}\n\n&lt;/script&gt;\n\n&lt;style lang=&#39;scss&#39; scoped&gt;\n.dots {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background-color: #4077f3;\n  vertical-align: middle;\n  margin-right: 10px;\n}\n::v-deep.container-box .el-collapse {\n  border: none;\n}\n::v-deep.container-box .el-collapse-item__header .is-active {\n  border: none;\n}\n::v-deep.container-box .el-collapse-item__header {\n  background-color: #edf3ff;\n  height: 50px;\n  padding-left: 20px;\n  border: none;\n}\n::v-deep.container-box .el-collapse-item__wrap {\n  border: none;\n}\n::v-deep.container-box .el-collapse-item__content {\n  padding: 25px 0px;\n}\n&lt;/style&gt;\n\n</code></pre>\n<p><code>dynamic-form-item</code></p>\n<pre><code>&lt;template&gt;\n  &lt;el-form-item\n    class=&quot;dynamic-form-item&quot;\n    :rules=&quot;item.rules&quot;\n    :label=&quot;item.label&quot;\n    :prop=&quot;item.key&quot;\n    style=&quot;width: 100%&quot;\n    :inline-message=&quot;item.type === &#39;textarea&#39; ? true : false&quot;\n  &gt;\n    &lt;el-input\n      v-if=&quot;item.type === &#39;input&#39;&quot;\n      style=&quot;width: 100%&quot;\n      v-bind=&quot;$attrs&quot;\n      :type=&quot;item.subtype&quot;\n      :placeholder=&quot;item.placeholder&quot;\n      :disabled=&quot;item.disabled&quot;\n      clearable\n      v-on=&quot;$listeners&quot;\n    /&gt;\n    &lt;el-select\n      v-else-if=&quot;item.type === &#39;select&#39; &amp;&amp; item.key !== &#39;xb&#39;&quot;\n      style=&quot;width: 100%&quot;\n      v-bind=&quot;$attrs&quot;\n      :disabled=&quot;item.disabled&quot;\n      :placeholder=&quot;item.placeholder&quot;\n      filterable\n      clearable\n      v-on=&quot;$listeners&quot;\n      @focus=&quot;selectFocus(item.codeId)&quot;\n    &gt;\n      &lt;el-option\n        v-for=&quot;o in options&quot;\n        :key=&quot;o.code&quot;\n        :label=&quot;o.description&quot;\n        :value=&quot;o.code&quot;\n      /&gt;\n    &lt;/el-select&gt;\n    &lt;el-select\n      v-else-if=&quot;item.type === &#39;select&#39; &amp;&amp; item.key === &#39;xb&#39;&quot;\n      style=&quot;width: 100%&quot;\n      v-bind=&quot;$attrs&quot;\n      :disabled=&quot;item.disabled&quot;\n      :placeholder=&quot;item.placeholder&quot;\n      filterable\n      clearable\n      v-on=&quot;$listeners&quot;\n    &gt;\n      &lt;el-option\n        v-for=&quot;o in options&quot;\n        :key=&quot;o.code&quot;\n        :label=&quot;o.description&quot;\n        :value=&quot;o.code&quot;\n      /&gt;\n    &lt;/el-select&gt;\n    &lt;el-date-picker\n      v-else-if=&quot;item.type === &#39;date&#39;&quot;\n      class=&quot;date-picker&quot;\n      style=&quot;width: 100%&quot;\n      v-bind=&quot;$attrs&quot;\n      :value-format=&quot;item.valueFormat&quot;\n      :placeholder=&quot;item.placeholder&quot;\n      :picker-options=&quot;item.pickerOptions&quot;\n      v-on=&quot;$listeners&quot;\n    /&gt;\n    &lt;el-input\n      v-else-if=&quot;item.type === &#39;textarea&#39;&quot;\n      class=&quot;textArea&quot;\n      style=&quot;width: 100%&quot;\n      type=&quot;textarea&quot;\n      :rows=&quot;4&quot;\n      placeholder=&quot;请输入个人简历情况&quot;\n      v-bind=&quot;$attrs&quot;\n      v-on=&quot;$listeners&quot;\n    /&gt;\n    &lt;div v-if=&quot;item.type === &#39;textarea&#39;&quot; class=&quot;el-form-item__error&quot;&gt;\n      格式：某年某月-某年某月 某单位 例如：1999年9月-2003年7月 某单位\n      （内容完整连贯） 如没有，请填无\n    &lt;/div&gt;\n    &lt;el-radio-group\n      v-else-if=&quot;item.type === &#39;radio&#39;&quot;\n      v-bind=&quot;$attrs&quot;\n      v-on=&quot;$listeners&quot;\n    &gt;\n      &lt;el-radio label=&quot;true&quot;&gt;是&lt;/el-radio&gt;\n      &lt;el-radio label=&quot;false&quot;&gt;否&lt;/el-radio&gt;\n    &lt;/el-radio-group&gt;\n  &lt;/el-form-item&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { getCoteItemOne } from &#39;@/api/informationFill.js&#39;\n\nexport default {\n  name: &#39;DynamicFormItem&#39;,\n  props: {\n    item: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      options: []\n    }\n  },\n  watch: {\n    item: {\n      // 监听渲染的item项 如果是性别立即获取字典\n      handler: function(newVal, oldVal) {\n        if (newVal.key === &#39;xb&#39;) {\n          console.log(&#39;监听渲染的item项 如果是性别立即获取字典&#39;)\n          this.selectFocus(newVal.codeId)\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  methods: {\n    async selectFocus(codeId) {\n      console.log(codeId)\n      const res = await getCoteItemOne(codeId)\n      this.options = res\n      console.log(&#39;获取单个字典&#39;, res)\n    }\n  }\n}\n&lt;/script&gt;\n&lt;style lang=&quot;scss&quot; scoped&gt;\n.dynamic-form-item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n::v-deep.dynamic-form-item .el-form-item__content {\n  // width: calc(100% - 210px);\n  flex: 1;\n}\n::v-deep.dynamic-form-item .el-form-item__label {\n  line-height: 16px;\n}\n::v-deep.el-form-item .el-form-item__error--inline {\n  margin-left: 0;\n}\n::v-deep.date-picker .el-input__inner {\n  padding: 0 15px; // 这个15是el-input组件默认的值\n}\n::v-deep.date-picker .el-input__prefix {\n  right: 5px;\n  left: unset;\n}\n// ::v-deep.date-picker  .el-input__suffix{\n//   right: 25px;\n// }\n&lt;/style&gt;\n</code></pre>\n<p><code>json数据</code></p>\n<pre><code>{&quot;code&quot;:0,&quot;msg&quot;:&quot;success&quot;,&quot;data&quot;:[{&quot;id&quot;:&quot;1509098809943154690&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;shengshi&quot;,&quot;description&quot;:&quot;省市&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:60,&quot;fieldOrder&quot;:2,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;省市&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098809876045825&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;id&quot;,&quot;description&quot;:&quot;id&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:32,&quot;fieldOrder&quot;:3,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;id&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:true,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098809943154689&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;exam_id&quot;,&quot;description&quot;:&quot;考试类别ID&quot;,&quot;fieldType&quot;:&quot;select&quot;,&quot;fieldLength&quot;:6,&quot;fieldOrder&quot;:4,&quot;codeId&quot;:&quot;ZY&quot;,&quot;formLabel&quot;:&quot;考试类别ID&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810010263554&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bmd&quot;,&quot;description&quot;:&quot;报名点(dept_id)&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:60,&quot;fieldOrder&quot;:4,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;报名点(dept_id)&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810010263555&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bmxh&quot;,&quot;description&quot;:&quot;报名序号&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:50,&quot;fieldOrder&quot;:5,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;报名序号&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;02&quot;,&quot;categoryName&quot;:&quot;教育情况&quot;},{&quot;id&quot;:&quot;1509098810010263556&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;xm&quot;,&quot;description&quot;:&quot;姓名&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:50,&quot;fieldOrder&quot;:6,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;姓名&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;02&quot;,&quot;categoryName&quot;:&quot;教育情况&quot;},{&quot;id&quot;:&quot;1509098810010263557&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;xb&quot;,&quot;description&quot;:&quot;性别&quot;,&quot;fieldType&quot;:&quot;select&quot;,&quot;fieldLength&quot;:2,&quot;fieldOrder&quot;:7,&quot;codeId&quot;:&quot;AX&quot;,&quot;formLabel&quot;:&quot;性别&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098809943154691&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;kaoqu&quot;,&quot;description&quot;:&quot;考区(考试所在地点)&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:60,&quot;fieldOrder&quot;:8,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;考区(考试所在地点)&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810077372417&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;zzmm&quot;,&quot;description&quot;:&quot;政治面貌&quot;,&quot;fieldType&quot;:&quot;select&quot;,&quot;fieldLength&quot;:10,&quot;fieldOrder&quot;:9,&quot;codeId&quot;:&quot;AT&quot;,&quot;formLabel&quot;:&quot;政治面貌&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810077372418&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;mz&quot;,&quot;description&quot;:&quot;民族&quot;,&quot;fieldType&quot;:&quot;select&quot;,&quot;fieldLength&quot;:30,&quot;fieldOrder&quot;:10,&quot;codeId&quot;:&quot;AE&quot;,&quot;formLabel&quot;:&quot;民族&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810077372419&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;rdtsj&quot;,&quot;description&quot;:&quot;入党团时间&quot;,&quot;fieldType&quot;:&quot;date&quot;,&quot;fieldLength&quot;:null,&quot;fieldOrder&quot;:11,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;入党团时间&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810077372420&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;sfzh&quot;,&quot;description&quot;:&quot;身份证号&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:18,&quot;fieldOrder&quot;:12,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;身份证号&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:&quot;sfzh&quot;,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810140286977&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bkjb&quot;,&quot;description&quot;:&quot;报考级别&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:10,&quot;fieldOrder&quot;:13,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;报考级别&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810140286978&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bkzy&quot;,&quot;description&quot;:&quot;报考专业&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:200,&quot;fieldOrder&quot;:14,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;报考专业&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810140286979&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bkdw&quot;,&quot;description&quot;:&quot;报考单位&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:60,&quot;fieldOrder&quot;:15,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;报考单位&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810140286980&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bkzw&quot;,&quot;description&quot;:&quot;报考职位&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:60,&quot;fieldOrder&quot;:16,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;报考职位&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810207395841&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;zgxl&quot;,&quot;description&quot;:&quot;最高学历&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:200,&quot;fieldOrder&quot;:17,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;最高学历&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;02&quot;,&quot;categoryName&quot;:&quot;教育情况&quot;},{&quot;id&quot;:&quot;1509098810207395842&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;zgxw&quot;,&quot;description&quot;:&quot;最高学位&quot;,&quot;fieldType&quot;:&quot;select&quot;,&quot;fieldLength&quot;:100,&quot;fieldOrder&quot;:18,&quot;codeId&quot;:&quot;AN&quot;,&quot;formLabel&quot;:&quot;最高学位&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;最高学位&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;02&quot;,&quot;categoryName&quot;:&quot;教育情况&quot;},{&quot;id&quot;:&quot;1509098810207395843&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;bysj&quot;,&quot;description&quot;:&quot;毕业时间(选择 年月日)&quot;,&quot;fieldType&quot;:&quot;date&quot;,&quot;fieldLength&quot;:null,&quot;fieldOrder&quot;:19,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;毕业时间(选择 年月日)&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;毕业时间&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;02&quot;,&quot;categoryName&quot;:&quot;教育情况&quot;},{&quot;id&quot;:&quot;1509098810270310402&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;byyx&quot;,&quot;description&quot;:&quot;毕业院校&quot;,&quot;fieldType&quot;:&quot;select&quot;,&quot;fieldLength&quot;:255,&quot;fieldOrder&quot;:20,&quot;codeId&quot;:&quot;AT&quot;,&quot;formLabel&quot;:&quot;毕业院校&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;毕业院校&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;02&quot;,&quot;categoryName&quot;:&quot;教育情况&quot;},{&quot;id&quot;:&quot;1509098810270310403&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;byzy&quot;,&quot;description&quot;:&quot;毕业专业&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:255,&quot;fieldOrder&quot;:21,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;毕业专业&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;毕业专业&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810270310404&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;xgzdw&quot;,&quot;description&quot;:&quot;现工作单位&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:255,&quot;fieldOrder&quot;:22,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;现工作单位&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;现工作单位&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810333224961&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;lxdh1&quot;,&quot;description&quot;:&quot;联系电话1&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:20,&quot;fieldOrder&quot;:23,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;联系电话1&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;联系电话&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:&quot;zj&quot;,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;99&quot;,&quot;categoryName&quot;:&quot;其他信息&quot;},{&quot;id&quot;:&quot;1509098810333224962&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;lxdh2&quot;,&quot;description&quot;:&quot;联系电话&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:20,&quot;fieldOrder&quot;:24,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;联系电话&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;联系电话&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:&quot;sjh&quot;,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;99&quot;,&quot;categoryName&quot;:&quot;其他信息&quot;},{&quot;id&quot;:&quot;1509098810333224963&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;jcgzjynx&quot;,&quot;description&quot;:&quot;是否基层工作经验(年限) 0 代表没有&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:25,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;是否基层工作经验(年限) 0 代表没有&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;是否基层工作经验&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810396139522&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;sfdxscg&quot;,&quot;description&quot;:&quot;是否大学生村官&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:26,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;是否大学生村官&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;是否大学生村官&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810396139523&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;sfncywjygw&quot;,&quot;description&quot;:&quot;是否农村义务教育阶段学校教师特设岗位计划&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:27,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;是否农村义务教育阶段学校教师特设岗位计划&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;是否农村义务教育阶段学校教师特设岗位计划&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810396139524&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;sfszyfjh&quot;,&quot;description&quot;:&quot;是否三支一扶计划&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:28,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;是否三支一扶计划&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;是否三支一扶计划&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810396139525&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;sfdxszyfwxbjh&quot;,&quot;description&quot;:&quot;是否大学生致远服务西部计划&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:29,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;是否大学生致远服务西部计划&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;是否大学生致远服务西部计划&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810459054082&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;sfjdfy5n&quot;,&quot;description&quot;:&quot;是否军队服役5年&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:30,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;是否军队服役5年&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;是否军队服役5年&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810459054083&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;jyjl&quot;,&quot;description&quot;:&quot;教育经历(从小学)&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:31,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;教育经历(从小学)&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;教育经历&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810459054084&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;gzjl&quot;,&quot;description&quot;:&quot;工作经历&quot;,&quot;fieldType&quot;:&quot;textarea&quot;,&quot;fieldLength&quot;:65535,&quot;fieldOrder&quot;:32,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;工作经历&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;工作经历&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810526162946&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;jtcy&quot;,&quot;description&quot;:&quot;家庭成员&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:255,&quot;fieldOrder&quot;:33,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;家庭成员&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;家庭成员&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810526162947&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;jcqk&quot;,&quot;description&quot;:&quot;奖惩情况&quot;,&quot;fieldType&quot;:&quot;textarea&quot;,&quot;fieldLength&quot;:65535,&quot;fieldOrder&quot;:34,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;奖惩情况&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:&quot;奖惩情况&quot;,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810526162948&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;shzt&quot;,&quot;description&quot;:&quot;审核zt(0 未审核  1 已审核)&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:1,&quot;fieldOrder&quot;:35,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;审核zt(0 未审核  1 已审核)&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:3,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810593271810&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;create_date&quot;,&quot;description&quot;:&quot;创建时间&quot;,&quot;fieldType&quot;:&quot;date&quot;,&quot;fieldLength&quot;:null,&quot;fieldOrder&quot;:36,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;创建时间&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810526162949&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;creator&quot;,&quot;description&quot;:&quot;创建者&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:null,&quot;fieldOrder&quot;:37,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;创建者&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:19,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810593271811&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;updater&quot;,&quot;description&quot;:&quot;更新者&quot;,&quot;fieldType&quot;:&quot;input&quot;,&quot;fieldLength&quot;:null,&quot;fieldOrder&quot;:38,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;更新者&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:0,&quot;numericScale&quot;:19,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;},{&quot;id&quot;:&quot;1509098810593271812&quot;,&quot;examId&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;update_date&quot;,&quot;description&quot;:&quot;更新时间&quot;,&quot;fieldType&quot;:&quot;date&quot;,&quot;fieldLength&quot;:null,&quot;fieldOrder&quot;:39,&quot;codeId&quot;:null,&quot;formLabel&quot;:&quot;更新时间&quot;,&quot;formItem&quot;:null,&quot;formTips&quot;:null,&quot;hasTips&quot;:null,&quot;required&quot;:false,&quot;formRules&quot;:null,&quot;hasShow&quot;:true,&quot;firstModify&quot;:true,&quot;hasModify&quot;:true,&quot;numericPrecision&quot;:null,&quot;numericScale&quot;:null,&quot;category&quot;:&quot;01&quot;,&quot;categoryName&quot;:&quot;基本信息&quot;}]}\n</code></pre>\n"},{"fileName":"自定义el-select头部内容.md","content":"<p><img src=\"https://img2022.cnblogs.com/blog/2483371/202202/2483371-20220225150100047-1148291014.png\" alt=\"\"></p>\n<pre><code>&lt;el-select v-model=&quot;&quot; style=&quot;width:400px&quot; class=&quot;select&quot; :disabled=&quot;&quot;&gt;\n    &lt;template slot=&quot;prefix&quot;&gt;\n        &lt;div class=&quot;select_header&quot;&gt;xxxxxxx&lt;/div&gt;\n    &lt;/template&gt;\n   &lt;el-option v-for=&quot;&quot; :key=&quot;subList.id&quot; :label=&quot;&quot; :value=&quot;&quot;&gt;&lt;/el-option&gt;\n&lt;/el-select&gt;\n\n\n&lt;style lang=&#39;scss&#39; scoped&gt;\n  .select_header {\n  background-color: #f5f7fa;\n  color: #909399;\n  vertical-align: middle;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px 0 0 4px;\n  padding: 0 20px;\n  //   width: 1px;\n  white-space: nowrap;\n  width: 100%;\n  height: 100%;\n  line-height: 36px;\n}\n.select &gt;&gt;&gt; .el-input__prefix {\n  left: 0 !important;\n}\n.select &gt;&gt;&gt; .el-input__inner {\n  padding-left: 108px !important;\n}\n.select &gt;&gt;&gt; .el-popper {\n  min-width: 306px !important;\n  left: 750px !important;\n}\n&lt;/style&gt;\n</code></pre>\n"},{"fileName":"观察者模式（发布-订阅模式）.md","content":"<pre><code>// 定义发布者类\nclass Publisher {\n  constructor() {\n    this.observers = []\n  }\n  // 增加订阅者\n  add(observer) {\n    this.observers.push(observer)\n  }\n  // 移除订阅者\n  remove(observer) {\n    this.observers.forEach((item, i) =&gt; {\n      if (observer === item) {\n        this.observers.splice(i, 1)\n      }\n    })\n  }\n  // 通知所有订阅者\n  notify() {\n    this.observers.forEach(observer =&gt; {\n        observer.update(this)\n      })\n  }\n}\n\n// 定义订阅者类\nclass Observer {\n  constructor() {}\n  update() {\n    console.log(&#39;Observer.update invoked&#39;)\n  }\n}\n\n// 定义一个具体的需求文档（prd）发布类\nclass PrdPublisher extends Publisher {\n  constructor() {\n    super()\n    // 初始化需求文档\n    this.prdState = null\n    // 没有拉群，开发群目前为空\n    this.observers = []\n  }\n  // 该方法用于获取当前的prdState\n  getState() {\n    return this.prdState\n  }\n  // 该方法用于改变prdState的值\n  setState(state) {\n    this.prdState = state\n    // 需求文档变更，立刻通知所有开发者\n    this.notify()\n  }\n}\n\n// 开发者类\nclass DeveloperObserver extends Observer {\n  constructor() {\n    super()\n    // 需求文档一开始还不存在，prd初始为空对象\n    this.prdState = {}\n  }\n  // 重写一个具体的update方法\n  update(publisher) {\n    // 更新需求文档\n    this.prdState = publisher.getState()\n    // 调用工作函数\n    this.work()\n  }\n  work() {\n    // 获取需求文档\n    const prd = this.prdState\n    // 开始基于需求文档提供的信息搬砖。。。\n    console.log(&#39;996 begins...&#39;)\n  }\n}\n// 创建订阅者：前端开发李雷\nlet lilei = new DeveloperObserver()\n// 创建订阅者：服务端开发小A\nconst A = new DeveloperObserver()\n// 创建订阅者：测试同学小B\nconst B = new DeveloperObserver()\n// 韩梅梅出现了\nconst hanMeiMei = new PrdPublisher()\n// 需求文档出现了\nconst prd = {\n    // 具体的需求内容\n}\n// 韩梅梅开始拉群\nhanMeiMei.add(liLei)\nhanMeiMei.add(A)\nhanMeiMei.add(B)\n// 韩梅梅发送了需求文档，并@了所有人\nhanMeiMei.setState(prd)\n\n\n\n\n</code></pre>\n"},{"fileName":"解决vue-router@3重复添加路由导致的控制台警告.md","content":"<p>vue 项目的权限限制功能, 有一种实现方案是这样的</p>\n<ul>\n<li>进入项目</li>\n<li>只设置没有权限要求的路由</li>\n<li>向后台提供当前用户的权限</li>\n<li>后台根据用户权限, 返回该用户可以用的路由信息</li>\n<li>将路由信息翻译成 “符合 routes 选项要求的数组”</li>\n<li>用 router.addRoutes(routes) 方法把 “符合 routes 选项要求的数组” 添加到路由</li>\n</ul>\n<p>这个方案涉及到两个问题:</p>\n<ol>\n<li>怎么添加路由规则</li>\n<li>怎么删除路由规则</li>\n</ol>\n<hr>\n<h1>路由规则</h1>\n<p>首先明确一下什么叫路由规则?<br>下例的 { path: ‘/foo’, <a href=\"https://so.csdn.net/so/search?q=component&spm=1001.2101.3001.7020\">component</a>: Foo } 就是一条路由规则</p>\n<pre><code class=\"language-javascript\">var router = new VueRouter({\n    routes: [{\n        path: &#39;/foo&#39;,\n        component: Foo\n    }, {\n        path: &#39;/bar&#39;,\n        component: Bar\n    }]\n})\n</code></pre>\n<p>将路由规则包装成<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>, 这个数组就是下面要提供给 router.addRoutes 方法的数据</p>\n<h1>添加路由规则</h1>\n<p>官方有提供添加规则的方法 router.addRoutes()</p>\n<blockquote>\n<p>router.addRoutes(routes: Array)<br>动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组。</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var router = new VueRouter({\n    routes: [{\n        path: &#39;/foo&#39;,\n        component: Foo\n    }]\n});\n\nrouter.addRoutes([{\n    path: &#39;/bar&#39;,\n    component: Bar\n}])\n</code></pre>\n<p>这样就已经把 bar 添加到路由当中, 可以说是简单粗暴且高效</p>\n<p>添加路由规则时, 要注意一个细节<br>addRoutes 只能把新路由规则添加到末尾<br>如你的路由规则很复杂, 一个路径可以匹配好几个路由的话, 那你要仔细设计你的路由了<br>因为路由规则的顺序是有意义的, 越靠前优先级越高, 这将直接影响匹配结果</p>\n<h1>删除路由规则</h1>\n<p>神奇的是官方只提供了增加规则的方法, 却不提供删除规则的方法<br>经过学习, 我找到了一个效果相近的方法</p>\n<pre><code class=\"language-javascript\">var router = new VueRouter({\n    routes: [{\n        path: &#39;/foo&#39;,\n        component: Foo\n    }]\n});\n\nrouter.addRoutes([{\n    path: &#39;/bar&#39;,\n    component: Bar\n}])\n\n// 获取原始路由数据\nvar options = router.options\n\n// 用原始数据重新 new 一个路由\nvar _VueRouter = new VueRouter(options)\n\n// 用新路由的 matcher 替换旧路由的 matcher\nrouter.matcher = _VueRouter.matcher\n</code></pre>\n<p>这样就相当于把路由重置了<br>获得原始数据后, 也可以根据项目要求, 向 options 插入路由规则, 再重新 new 一个路由</p>\n<h2>删除方法原理简析</h2>\n<p>看过 vue router 源码的朋友大概都知道</p>\n<p>new VueRouter() 后, routes 数据会被传给内部方法 createMatcher()</p>\n<p>createMatcher 方法中有三个对象 pathList, pathMap, nameMap 和两个方法 addRoutes, match</p>\n<p>三个对象用于保存编译后的路由数据, 因为没有暴露出去, 所以 router 并不能查询到编译后的路由数据( router.options 其实是初始化时的数据, 上面的例子也有用到它)</p>\n<p>两个方法被 createMatcher return, 最终保存在 this.matcher 上面, 可以被 router.matcher 调用</p>\n<p>上面的方法本质就是用新数据 new 一个新路由对象 _VueRouter<br>从而得到新的 pathList, pathMap, nameMap</p>\n<p>因为 pathList, pathMap, nameMap 是内部变量, 不能直接调用<br>只能被内部方法如 addRoutes, match 调用<br>所以用替换 matcher 的方式, 替换了整个 createMatcher (这里是闭包的知识)</p>\n<p>简单点说就是<br>新的 matcher 包含新的 addRoutes, match<br>新的 addRoutes, match 可以调用新的 pathList, pathMap, nameMap</p>\n<h1>关于 vue <a href=\"mailto:router@4.x\">router@4.x</a> 的 removeRoute</h1>\n<p>随着 vue3.x 的发展, vue router 也推出了 4.x(不知道为什么中文官网好像没提到这个)<br>而 4.x 中新增了 removeRoute 方法, 就是用户删除路由规则的</p>\n<p>如果你已经在使用 vue <a href=\"mailto:router@4.x\">router@4.x</a><br>那么上面的话当我没说</p>\n<p>end</p>\n<p>文章知识点与官方知识档案匹配，可进一步学习相关知识</p>\n<p><a href=\"https://edu.csdn.net/skill/vue/vue-ffb7401f51a7483bb21eaa81827c0e73\">Vue入门技能树</a><a href=\"https://edu.csdn.net/skill/vue/vue-ffb7401f51a7483bb21eaa81827c0e73\">Vue-router</a><a href=\"https://edu.csdn.net/skill/vue/vue-ffb7401f51a7483bb21eaa81827c0e73\">vue-router是什么？</a>17994 人正在系统学习中</p>\n"},{"fileName":"记录一个通过keep-alive缓存组件不生效的问题.md","content":"<p>项目中通过菜单管理配置页面进行缓存，layout组件中通过keep-alive的include属性进行命中</p>\n<p>官方描述：匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配。</p>\n<p>通过检查发现配置菜单时用的组件名称（动态菜单配的名称最终会用来绑定include）和组件name大小写不一致 导致无法缓存</p>\n"},{"fileName":"隔离css继承的样式.md","content":"<p>项目里遇到一个富文本在编辑器内和页面上渲染出来的样式不一致的问题，具体表现在fons-size和line-height等可继承的属性上，经过排查发现确实是继承了父元素的样式导致的</p>\n<p>随即我在想如何隔离父元素的样式，经过我在张鑫旭的博客里一整翻，终于<code>style:&quot;all: initial;&quot;</code>解决问题</p>\n<h3>CSS3的all属性</h3>\n<p>all属性实际上是所有CSS属性的缩写，表示，所有的CSS属性都怎样怎样，但是，不包括unicode-bidi和direction这两个CSS属性。\n支持三个CSS通用属性值，initial, inherit, unset. 这三个属性值分别表示什么意思呢？</p>\n<h4>initial</h4>\n<p>initial是初始值的意思，也就是，父元素下面所有的第一级子元素都除了unicode-bidi和direction以外的CSS都使用初始值。</p>\n<h4>inherit</h4>\n<p>inherit是继承的意思，也就是，父元素下面所有的相邻子元素都除了unicode-bidi和direction以外的CSS都继承了父元素的CSS。</p>\n<h3>unset</h3>\n<p>unset是取消设置的意思，也就是，article元素下面所有的相邻子元素除了unicode-bidi和direction以外的CSS都干掉都不要，不要了那用什么呢？unset值的特性如下，当前元素浏览器或用户设置的CSS忽略，然后如果是具有继承特性的CSS，如color, 则使用继承值；如果是没有继承特性的CSS属性，如background-color, 则使用初始值。</p>\n"},{"fileName":"页面渲染、导出、打印大量数据是添加loading失效的解决办法.md","content":"<pre><code>print () {\n      this.printLoading = true\n      const dom = document.querySelector(&#39;#printBox&#39;)\n      // 添加延时器以解决loading 效果失效的问题\n      setTimeout(() =&gt; {\n        this.$print(dom)\n      }, 100)\n      setTimeout(() =&gt; {\n        this.printLoading = false\n      }, 100)\n    },\n</code></pre>\n"},{"fileName":"高德地图开放API.md","content":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;!-- 1. 如果是移动端开发，请在head标签内添加viewport meta标签，以达到最佳的绘制性能 --&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;\n    &lt;style&gt;\n      /* 通过 css 为地图容器指定高度、宽度； */\n      #container {\n        width: 1920px;\n        height: 1080px;\n      }\n    &lt;/style&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      window._AMapSecurityConfig = {\n        securityJsCode: &quot;cc2018dc6e0480a5342d71d7fa7a1e48&quot;,\n      };\n    &lt;/script&gt;\n    &lt;script\n      type=&quot;text/javascript&quot;\n      src=&quot;https://webapi.amap.com/maps?v=1.4.15&amp;key=a60e52709801c0f7f70599610a168119&quot;\n    &gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;!-- 2. 添加div标签作为地图容器，同时为该div指定id属性； --&gt;\n    &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n      // 创建的同时可以给地图设置中心点、级别、显示模式、自定义样式等属性：\n      let map = new AMap.Map(&quot;container&quot;, {\n        zoom: 11, //级别\n        center: [116.98, 36.67], //中心点坐标\n        viewMode: &quot;3D&quot;, //使用3D视图\n      });\n      // //添加实时路况图层 默认情况下，地图只显示标准底图，如需要叠加别的图层，可以通过map.add方法添加图层：\n      // var trafficLayer = new AMap.TileLayer.Traffic({\n      //   zIndex: 10,\n      // });\n      // map.add(trafficLayer); //添加图层到地图\n      var marker = new AMap.Marker({\n        position: [116.98111, 36.67111],\n      });\n      map.add(marker); //添加标记点\n      try {\n        AMap.plugin(&quot;AMap.DistrictSearch&quot;, () =&gt; {\n          // 创建行政区查询对象\n          var district = new AMap.DistrictSearch({\n            // 返回行政区边界坐标等具体信息\n            extensions: &quot;all&quot;,\n            // 设置查询行政区级别为 区\n            level: &quot;city&quot;,\n            subdistrict: 0,\n          });\n\n          district.search(&quot;济南市&quot;, (status, result) =&gt; {\n            console.log(status, result);\n            // 获取济南市的边界信息\n            var bounds = result.districtList[0].boundaries;\n            var polygons = [];\n            if (bounds) {\n              for (var i = 0, l = bounds.length; i &lt; l; i++) {\n                //生成行政区划polygon\n                var polygon = new AMap.Polygon({\n                  map: map,\n                  strokeWeight: 1,\n                  path: bounds[i],\n                  fillOpacity: 0.7,\n                  fillColor: &quot;#CCF3FF&quot;,\n                  strokeColor: &quot;#CC66CC&quot;,\n                });\n                polygons.push(polygon);\n              }\n              // 地图自适应\n              // map.setFitView();\n            }\n          });\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"fileName":"鼠标事件“穿透”.md","content":"<h1>鼠标事件“穿透”</h1>\n<h2>pointer-events属性</h2>\n<p><strong><code>pointer-events</code></strong> CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\">target (en-US)</a>。</p>\n<p>除了指示该元素不是鼠标事件的目标之外，值<code>none</code>表示鼠标事件“穿透”该元素并且指定该元素“下面”的任何东西。</p>\n<h2>常用属性值</h2>\n<ul>\n<li><code>auto</code> 与<code>pointer-events</code>属性未指定时的表现效果相同</li>\n<li><code>none</code> 元素永远不会成为鼠标事件的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\">target (en-US)</a>。但是，当其后代元素的<code>pointer-events</code>属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</li>\n</ul>\n"}]